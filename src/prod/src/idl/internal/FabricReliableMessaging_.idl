// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License (MIT). See License.txt in the repo root for license information.
// ------------------------------------------------------------

cpp_quote("// ------------------------------------------------------------")
cpp_quote("// Copyright (c) Microsoft Corporation. All rights reserved.")
cpp_quote("// Licensed under the MIT License (MIT). See License.txt in the repo root for license information.")
cpp_quote("// ------------------------------------------------------------")
cpp_quote("#if ( _MSC_VER >= 1020 )")
cpp_quote("#pragma once")
cpp_quote("#endif")

import "Unknwn.idl";
import "FabricTypes.idl";
import "FabricCommon.idl";
import "FabricRuntime.idl";


[
    uuid(d58ddaf2-bc17-4e87-a366-05fc640e7025),
    version(1.0),
]
library FabricReliableMessagingTypeLib
{
    importlib("stdole2.tlb");

#pragma pack (push, 8)

    // ----------------------------------------------------------------------------
    // List of interfaces to include in the type library
    //
    interface IFabricReliableSession;
    interface IFabricReliableInboundSessionCallback;
    interface IFabricReliableSessionAbortedCallback;
    interface IFabricReliableSessionManager;

	// ----------------------------------------------------------------------------
    // Int64 Key Range of a UniformInt64 service partition
    //

	typedef struct INTEGER_PARTITION_KEY_RANGE
	{
		// Low and high ends of the integer partition range
		//
		LONGLONG IntegerKeyLow;
		LONGLONG IntegerKeyHigh;

	} INTEGER_PARTITION_KEY_RANGE;

	// ----------------------------------------------------------------------------
    // partition and replica Ids associated with the service partition hosting the session manager
	// currently used only for tracing
    //

	typedef struct HOST_SERVICE_PARTITION_INFO
	{
        FABRIC_PARTITION_ID PartitionId;
        FABRIC_REPLICA_ID ReplicaId;

	} HOST_SERVICE_PARTITION_INFO;


    // ----------------------------------------------------------------------------
    // A snapshot of session configuration data and current state data
	// being a snapshot there is no guarantee of being current when looked at for state data
	// This is designed currently for internal usage only: specifically mixes inbound and
	//             outbound perspectives even though only one is valid
    //

	typedef struct SESSION_DATA_SNAPSHOT
	{
		// Quota and actual number of inbound mesages queued for receive
		//
		LONG InboundMessageQuota;
		LONG InboundMessageCount;

		// Quota and actual number of outstanding send requests
		//
		LONG SendOperationQuota;
		LONG SendOperationCount;

		// Quota and actual number of outstanding receive requests
		//
		LONG ReceiveOperationQuota;
		LONG ReceiveOperationCount;

		// Invariant configuration for direction and identity
		BOOLEAN IsOutbound;
		GUID SessionId;

		// Current session state perspectives
		BOOLEAN NormalCloseOccurred;
		BOOLEAN IsOpenForSend;
		BOOLEAN IsOpenForReceive;

		// Sequence numbers from outbound and inbound perspective: only one perspective will be valid
		FABRIC_SEQUENCE_NUMBER LastOutboundSequenceNumber;
		FABRIC_SEQUENCE_NUMBER FinalInboundSequenceNumberInSession;


		// reserved - for versioning
		//
		void* reserved;

	} SESSION_DATA_SNAPSHOT;

    // ----------------------------------------------------------------------------
    // module definitions
    [
        uuid(5a5aa8b8-9f5c-4675-83d9-b347d8ccd481),
        dllname("FabricReliableMessaging.dll")
    ]
    module FabricReliableMessaging
    {
        [entry("CreateReliableSessionManager")] HRESULT CreateReliableSessionManager(
														[in] HOST_SERVICE_PARTITION_INFO *servicePartitionInfo,
                                                        [in] FABRIC_URI callingServiceInstanceName,
                                                        [in] FABRIC_PARTITION_KEY_TYPE partitionKeyType,
                                                        [in] const void * partitionKey,																	
                                                        [out, retval] IFabricReliableSessionManager ** sessionManager);
    }

#pragma pack (pop)
}

// This interface is meant for simple fast synchronous interactions--more delay-prone behavior is in the interfaces being exchanged
[object, local, uuid(90f13016-7c1e-48f4-a7db-479c22f87252)]
interface IFabricReliableSessionManager : IUnknown
{
    // Opens the session manager service for use
    [] HRESULT BeginOpen(
        [in] IFabricReliableSessionAbortedCallback * sessionCallback,
        [in] IFabricAsyncOperationCallback * operationCallback,
        [out, retval] IFabricAsyncOperationContext ** context);
    
    [] HRESULT EndOpen(
        [in] IFabricAsyncOperationContext * context);

    // Shuts down the session manager service -- cannot be reopened
    [] HRESULT BeginClose(
        [in] IFabricAsyncOperationCallback * callback,
        [out, retval] IFabricAsyncOperationContext ** context);

    [] HRESULT EndClose(
        [in] IFabricAsyncOperationContext * context);

    // creates a session object locally but must be "opened" to activate wire protocol
    [] HRESULT BeginCreateOutboundSession(
        [in] FABRIC_URI targetServiceInstanceName,	
        [in] FABRIC_PARTITION_KEY_TYPE partitionKeyType,
        [in] const void * partitionKey,
        [in] LPCWSTR targetCommunicationEndpoint,
        [in] IFabricAsyncOperationCallback * callback,
        [out, retval] IFabricAsyncOperationContext ** context);

    [] HRESULT EndCreateOutboundSession(
        [in] IFabricAsyncOperationContext * context,
        [out, retval] IFabricReliableSession ** session);

    // starts listening for inbound sessions and registers a callback interface
    // can only do this once per service: FABRIC_INBOUND_ALREADY_LISTENING returned on repeat
    // Calling service needs to know the session endpoint to communicate to naming 
    // FABRIC_E_RELIABLE_SESSION_LISTEN_PORT_UNAVAILABLE return on transport listen failure
    [] HRESULT BeginRegisterInboundSessionCallback(
        [in] IFabricReliableInboundSessionCallback * listenerCallback,
        [in] IFabricAsyncOperationCallback * callback,
        [out, retval] IFabricAsyncOperationContext ** context);

    [] HRESULT EndRegisterInboundSessionCallback(
        [in] IFabricAsyncOperationContext * context,
        [out, retval] IFabricStringResult **sessionListenerEndpoint);

    // Unregisters a callback interface and stops listening for inbound sessions  
    // Now open for RegisterInboundSessionCallback again
    [] HRESULT BeginUnregisterInboundSessionCallback(
        [in] IFabricAsyncOperationCallback * callback,
        [out, retval] IFabricAsyncOperationContext ** context);

    [] HRESULT EndUnregisterInboundSessionCallback(
        [in] IFabricAsyncOperationContext * context);
}

[object, local, uuid(6f6110e0-3eec-4d65-a761-218d7f479515)]
interface IFabricReliableSessionPartitionIdentity : IUnknown
{
    [] FABRIC_URI getServiceName();
    [] FABRIC_PARTITION_KEY_TYPE getPartitionKeyType();
    [] void * getPartitionKey();
}


[object, local, uuid(496b7bbc-b6d3-4990-adf4-d6e06eedfd7d)]
interface IFabricReliableInboundSessionCallback : IUnknown
{
    // response is true if accepted or false if rejected
    [] HRESULT AcceptInboundSession(
        [in] IFabricReliableSessionPartitionIdentity *partitionIdentity,
        [in] IFabricReliableSession *session,
        [out, retval] LONG *response);
}

[object, local, uuid(978932f4-c93f-45ac-a804-d0fb4b4f7193)]
interface IFabricReliableSessionAbortedCallback : IUnknown
{
    [] HRESULT SessionAbortedByPartner(
		[in] BOOLEAN isInbound,
        [in] IFabricReliableSessionPartitionIdentity *partitionIdentity,
        [in] IFabricReliableSession *session);
}

[object, local, uuid(b2cc5f0e-2bdb-433d-9f73-c7e096037770)]
interface IFabricMessageDataFactory : IUnknown
{
    // the session is suspended at this time until explicitly resumed by the service
    [] HRESULT CreateMessageData(
        [in] ULONG buffercount,
        [in] ULONG * bufferSizes,
        [in] const void * bufferPointers,
        [out, retval] IFabricOperationData ** messageData);
}




[object, local, uuid(df1e6d90-3fab-4c36-ae22-7213223f46ae)]
interface IFabricReliableSession : IUnknown 
{
    //	Establish connection with transport target and initialize session protocol.
    //	
    [] HRESULT BeginOpen(
        [in] IFabricAsyncOperationCallback * operationCallback,
        [out, retval] IFabricAsyncOperationContext ** context);

    [] HRESULT EndOpen(
        [in] IFabricAsyncOperationContext * context);
    
    //	Gracefully close the session protocol and release resources
    [] HRESULT BeginClose(
        [in] IFabricAsyncOperationCallback * callback,
        [out, retval] IFabricAsyncOperationContext ** context);

    [] HRESULT EndClose(
        [in] IFabricAsyncOperationContext * context);
        
    //	Rudely close the session protocol and abort connections and release other resources
    [] HRESULT Abort();	

    //	Send a message to session target
    [] HRESULT BeginSend(
        [in] IFabricOperationData * message,
        [in] IFabricAsyncOperationCallback * callback,
        [out, retval] IFabricAsyncOperationContext ** context);
    
    [] HRESULT EndSend(
        [in] IFabricAsyncOperationContext * context);

    //	Receive a message from the session source
	// if waitForMessages is FALSE, EndReceive will return with NULL message
	// if there are no messages in the queue 
	// this is most useful during the session close process to ensure draining the queue
    [] HRESULT BeginReceive(
		[in] BOOLEAN waitForMessages, 
        [in] IFabricAsyncOperationCallback * callback,
        [out, retval] IFabricAsyncOperationContext ** context);
        
    [] HRESULT EndReceive(
        [in] IFabricAsyncOperationContext * context,
        [out, retval] IFabricOperationData ** message);

	[] HRESULT GetSessionDataSnapshot(
		[out, retval] const SESSION_DATA_SNAPSHOT ** sessionDataSnapshot);


}

