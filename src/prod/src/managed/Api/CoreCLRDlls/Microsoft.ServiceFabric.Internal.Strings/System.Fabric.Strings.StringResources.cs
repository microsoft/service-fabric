
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a dotnet run from src\ResGen folder.
//     To add or remove a member, edit your .resx file then rerun src\ResGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace System.Fabric.Strings {

using System;
using System.Reflection;

/// <summary>
///   A strongly-typed resource class, for looking up localized strings, etc.
/// </summary>
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]

internal class StringResources {

    private static global::System.Resources.ResourceManager resourceMan;

    private static global::System.Globalization.CultureInfo resourceCulture;

    [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
    internal StringResources() {
    }

    /// <summary>
    ///   Returns the cached ResourceManager instance used by this class.
    /// </summary>
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    internal static global::System.Resources.ResourceManager ResourceManager {
        get {
            if (object.ReferenceEquals(resourceMan, null)) {
                global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("System.Fabric.Strings.StringResources", typeof(StringResources).Assembly);
                resourceMan = temp;
            }
            return resourceMan;
        }
    }

    /// <summary>
    ///   Overrides the current threads CurrentUICulture property for all
    ///   resource lookups using this strongly typed resource class.
    /// </summary>
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    internal static global::System.Globalization.CultureInfo Culture {
        get {
            return resourceCulture;
        }
        set {
            resourceCulture = value;
        }
    }
    

    /// <summary>
    ///   Looks up a localized string similar to 
    ///    This resource string is reserved for internal use
    ///  
    /// </summary>
    internal static string General_Reserved {
        get {
            return ResourceManager.GetString("General_Reserved", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Default service not found: type = '{0}'
    ///  
    /// </summary>
    internal static string Error_ServiceNotFound_Formatted {
        get {
            return ResourceManager.GetString("Error_ServiceNotFound_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The value of SectionName={0} and KeyName={1} is encrypted.
    ///  
    /// </summary>
    internal static string Error_EncryptedValue_Formatted {
        get {
            return ResourceManager.GetString("Error_EncryptedValue_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    IsLocalIpAddress encountered empty hostName.
    ///  
    /// </summary>
    internal static string Error_IsLocalIpAddressEmptyHostname {
        get {
            return ResourceManager.GetString("Error_IsLocalIpAddressEmptyHostname", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Event already exists
    ///  
    /// </summary>
    internal static string Error_ExistingEvent {
        get {
            return ResourceManager.GetString("Error_ExistingEvent", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    AddSIDToBoundaryDescriptor API call failed.
    ///  
    /// </summary>
    internal static string Error_Failed_API_AddSIDToBoundaryDescriptor {
        get {
            return ResourceManager.GetString("Error_Failed_API_AddSIDToBoundaryDescriptor", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    CreateBoundaryDescriptor API call failed.
    ///  
    /// </summary>
    internal static string Error_Failed_API_CreateBoundaryDescriptor {
        get {
            return ResourceManager.GetString("Error_Failed_API_CreateBoundaryDescriptor", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    OpenPrivateNamespace API call failed with error {0} when opening namespace {1}
    ///  
    /// </summary>
    internal static string Error_Failed_API_OpenPrivateNamespace {
        get {
            return ResourceManager.GetString("Error_Failed_API_OpenPrivateNamespace", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    CreatePrivateNamespace API call failed with error {0} when opening namespace {1}
    ///  
    /// </summary>
    internal static string Error_Failed_API_CreatePrivateNamespace {
        get {
            return ResourceManager.GetString("Error_Failed_API_CreatePrivateNamespace", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Namespace {0} could not be created or opened even after {1} retries. Giving up.
    ///  
    /// </summary>
    internal static string Error_Failed_API_PrivateNamespaceMaxRetryCount {
        get {
            return ResourceManager.GetString("Error_Failed_API_PrivateNamespaceMaxRetryCount", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid Keyword
    ///  
    /// </summary>
    internal static string Error_InvalidKeyword {
        get {
            return ResourceManager.GetString("Error_InvalidKeyword", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid Store Location
    ///  
    /// </summary>
    internal static string Error_InvalidStoreLocation {
        get {
            return ResourceManager.GetString("Error_InvalidStoreLocation", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    No Entry Point
    ///  
    /// </summary>
    internal static string Error_NoEntryPoint {
        get {
            return ResourceManager.GetString("Error_NoEntryPoint", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Argument {0} must not be null.
    ///  
    /// </summary>
    internal static string Error_NullArgument_Formatted {
        get {
            return ResourceManager.GetString("Error_NullArgument_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Text to encrypt cannot be null or empty
    ///  
    /// </summary>
    internal static string Error_NullEncryptedText {
        get {
            return ResourceManager.GetString("Error_NullEncryptedText", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    EncryptedValue cannot be null
    ///  
    /// </summary>
    internal static string Error_NullEncryptedValue {
        get {
            return ResourceManager.GetString("Error_NullEncryptedValue", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The value of Property {0} is not encrypted. This function can be called only when the Parameter value is encrypted.
    ///  
    /// </summary>
    internal static string Error_PropertyNotEncrypted_Formatted {
        get {
            return ResourceManager.GetString("Error_PropertyNotEncrypted_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The dictionary is readonly
    ///  
    /// </summary>
    internal static string Error_ReadOnlyDictionary {
        get {
            return ResourceManager.GetString("Error_ReadOnlyDictionary", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The list is readonly
    ///  
    /// </summary>
    internal static string Error_ReadOnlyList {
        get {
            return ResourceManager.GetString("Error_ReadOnlyList", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unexpected trace level value.
    ///  
    /// </summary>
    internal static string Error_UnexpectedTraceLevel {
        get {
            return ResourceManager.GetString("Error_UnexpectedTraceLevel", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unsupported Trace Section {0}.
    ///  
    /// </summary>
    internal static string Error_UnsupportedTraceSection_Formatted {
        get {
            return ResourceManager.GetString("Error_UnsupportedTraceSection_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    A coding error has occurred - the completed-synchronously option was not set for the task.
    ///  
    /// </summary>
    internal static string Error_AsyncTaskCallInAdapter_Completed_Sync_Not_Set {
        get {
            return ResourceManager.GetString("Error_AsyncTaskCallInAdapter_Completed_Sync_Not_Set", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    AsyncTaskCallInAdapter.End was called twice
    ///  
    /// </summary>
    internal static string Error_AsyncTaskCallInAdapter_End_Called_Twice {
        get {
            return ResourceManager.GetString("Error_AsyncTaskCallInAdapter_End_Called_Twice", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    DefaultServiceFactory constructor passed an invalid type
    ///  
    /// </summary>
    internal static string Error_DefaultServiceFactory_Invalid_Type_In_Constructor {
        get {
            return ResourceManager.GetString("Error_DefaultServiceFactory_Invalid_Type_In_Constructor", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Mismatch between service implementation type (Stateless/Stateful) and create call (CreateInstance/CreateReplica)
    ///  
    /// </summary>
    internal static string Error_DefaultServiceFactory_Service_Implementation_Type_Mismatch {
        get {
            return ResourceManager.GetString("Error_DefaultServiceFactory_Service_Implementation_Type_Mismatch", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Trying to activate an already active code package
    ///  
    /// </summary>
    internal static string Error_FabricHostEntryPointManager_Active_CodePackage {
        get {
            return ResourceManager.GetString("Error_FabricHostEntryPointManager_Active_CodePackage", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The app domain for this Activation Context ID should have been created with a call to GetOrCreateAppDomain
    ///  
    /// </summary>
    internal static string Error_FabricHostEntryPointManager_AppDomain_Not_Created {
        get {
            return ResourceManager.GetString("Error_FabricHostEntryPointManager_AppDomain_Not_Created", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Configuration file not found
    ///  
    /// </summary>
    internal static string Error_FabricHostEntryPointManager_ConfigFile_Not_Found {
        get {
            return ResourceManager.GetString("Error_FabricHostEntryPointManager_ConfigFile_Not_Found", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid Activation Context ID
    ///  
    /// </summary>
    internal static string Error_FabricHostEntryPointManager_Invalid_Activation_Context_Id {
        get {
            return ResourceManager.GetString("Error_FabricHostEntryPointManager_Invalid_Activation_Context_Id", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid code package path
    ///  
    /// </summary>
    internal static string Error_FabricHostEntryPointManager_Invalid_CodePackage_Path {
        get {
            return ResourceManager.GetString("Error_FabricHostEntryPointManager_Invalid_CodePackage_Path", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Code package does not have a Fabric Host EntryPoint
    ///  
    /// </summary>
    internal static string Error_FabricHostEntryPoint_No_EntryPoint_Found {
        get {
            return ResourceManager.GetString("Error_FabricHostEntryPoint_No_EntryPoint_Found", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Package was not activated
    ///  
    /// </summary>
    internal static string Error_FabricHostEntryPoint_Package_Not_Activated {
        get {
            return ResourceManager.GetString("Error_FabricHostEntryPoint_Package_Not_Activated", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cannot load assembly with more than one FabricWorkerEntryPoint type.
    ///  
    /// </summary>
    internal static string Error_FabricWorkerEntryPoint_Extra_EntryPoint {
        get {
            return ResourceManager.GetString("Error_FabricWorkerEntryPoint_Extra_EntryPoint", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cannot load assembly with no FabricWorkerEntryPoint type.
    ///  
    /// </summary>
    internal static string Error_FabricWorkerEntryPoint_No_EntryPoint {
        get {
            return ResourceManager.GetString("Error_FabricWorkerEntryPoint_No_EntryPoint", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid data received
    ///  
    /// </summary>
    internal static string Error_InvalidDataReceived {
        get {
            return ResourceManager.GetString("Error_InvalidDataReceived", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid NodeId
    ///  
    /// </summary>
    internal static string Error_InvalidNodeId {
        get {
            return ResourceManager.GetString("Error_InvalidNodeId", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid Property Type
    ///  
    /// </summary>
    internal static string Error_InvalidPropertyType {
        get {
            return ResourceManager.GetString("Error_InvalidPropertyType", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid Service Type
    ///  
    /// </summary>
    internal static string Error_InvalidServiceType {
        get {
            return ResourceManager.GetString("Error_InvalidServiceType", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} operation can only be invoked for {1} services. {2} is a {3} service
    ///  
    /// </summary>
    internal static string Error_InvalidServiceTypeTestability {
        get {
            return ResourceManager.GetString("Error_InvalidServiceTypeTestability", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ServiceTypeImplementation is invalid
    ///  
    /// </summary>
    internal static string Error_InvalidServiceTypeImplementation {
        get {
            return ResourceManager.GetString("Error_InvalidServiceTypeImplementation", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Index must not be negative.
    ///  
    /// </summary>
    internal static string Error_NegativeIndex {
        get {
            return ResourceManager.GetString("Error_NegativeIndex", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Value cannot be null or empty
    ///  
    /// </summary>
    internal static string Error_NullOrEmptyValue {
        get {
            return ResourceManager.GetString("Error_NullOrEmptyValue", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unknown Type ID
    ///  
    /// </summary>
    internal static string Error_UnknownTypeId {
        get {
            return ResourceManager.GetString("Error_UnknownTypeId", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unknown Weight
    ///  
    /// </summary>
    internal static string Error_UnknownWeight {
        get {
            return ResourceManager.GetString("Error_UnknownWeight", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Must specify a valid notification mode.
    ///  
    /// </summary>
    internal static string Error_KeyValueStoreReplica_Invalid_Notification_Mode {
        get {
            return ResourceManager.GetString("Error_KeyValueStoreReplica_Invalid_Notification_Mode", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    backupDirectory must be null if StoreBackupOption.TruncateLogsOnly is specified
    ///  
    /// </summary>
    internal static string Error_KeyValueStoreReplica_Truncate_Logs_Only {
        get {
            return ResourceManager.GetString("Error_KeyValueStoreReplica_Truncate_Logs_Only", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The KeyValueStoreReplica is already initialized.
    ///  
    /// </summary>
    internal static string Error_KeyValueStoreReplica_Already_Initialized {
        get {
            return ResourceManager.GetString("Error_KeyValueStoreReplica_Already_Initialized", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The KeyValueStoreReplica is already opened.
    ///  
    /// </summary>
    internal static string Error_KeyValueStoreReplica_Already_Opened {
        get {
            return ResourceManager.GetString("Error_KeyValueStoreReplica_Already_Opened", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The KeyValueStoreReplica is closed or aborted.
    ///  
    /// </summary>
    internal static string Error_KeyValueStoreReplica_ClosedOrAborted {
        get {
            return ResourceManager.GetString("Error_KeyValueStoreReplica_ClosedOrAborted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The KeyValueStoreReplica must be initialized first.
    ///  
    /// </summary>
    internal static string Error_KeyValueStoreReplica_Not_Initialized {
        get {
            return ResourceManager.GetString("Error_KeyValueStoreReplica_Not_Initialized", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The KeyValueStoreReplica must be initialized and opened first.
    ///  
    /// </summary>
    internal static string Error_KeyValueStoreReplica_Not_InitializedAndOpened {
        get {
            return ResourceManager.GetString("Error_KeyValueStoreReplica_Not_InitializedAndOpened", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The KeyValueStoreReplica must be opened first.
    ///  
    /// </summary>
    internal static string Error_KeyValueStoreReplica_Not_Opened {
        get {
            return ResourceManager.GetString("Error_KeyValueStoreReplica_Not_Opened", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The operations collection must not contain null operation.
    ///  
    /// </summary>
    internal static string Error_PropertyManagementClient_Null_Operation_In_Collection {
        get {
            return ResourceManager.GetString("Error_PropertyManagementClient_Null_Operation_In_Collection", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ServiceFactoryBroker - Tried to construct a service factory with an invalid type. This indicates a coding error
    ///  
    /// </summary>
    internal static string Error_ServiceFactoryBroker_Coding_Error_Invalid_Type {
        get {
            return ResourceManager.GetString("Error_ServiceFactoryBroker_Coding_Error_Invalid_Type", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ServiceFactory type is incorrect for creation call
    ///  
    /// </summary>
    internal static string Error_ServiceFactoryBroker_Invalid_ServiceFactoryType {
        get {
            return ResourceManager.GetString("Error_ServiceFactoryBroker_Invalid_ServiceFactoryType", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ServiceFactory returned Null
    ///  
    /// </summary>
    internal static string Error_ServiceFactoryBroker_Null_Return {
        get {
            return ResourceManager.GetString("Error_ServiceFactoryBroker_Null_Return", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    A service factory with this name has already been added.
    ///  
    /// </summary>
    internal static string Error_ServiceGroupType_Existing_ServiceFactory {
        get {
            return ResourceManager.GetString("Error_ServiceGroupType_Existing_ServiceFactory", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Service groups with both stateless and stateful services are not supported.
    ///  
    /// </summary>
    internal static string Error_ServiceGroupType_Not_Supported {
        get {
            return ResourceManager.GetString("Error_ServiceGroupType_Not_Supported", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Code package activation context is not available in non-activated application
    ///  
    /// </summary>
    internal static string Error_ServiceInitializationParameters_ActivationContext_Not_Available {
        get {
            return ResourceManager.GetString("Error_ServiceInitializationParameters_ActivationContext_Not_Available", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Native replicators could not be initialized.
    ///  
    /// </summary>
    internal static string Error_StatefulServicePartition_Native_Replicator_Init_Failed {
        get {
            return ResourceManager.GetString("Error_StatefulServicePartition_Native_Replicator_Init_Failed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The Image Store object related to this operation appears corrupted. Please re-upload to the Image Store incoming folder before retrying the operation.
    ///  
    /// </summary>
    internal static string Error_CorruptedImageStoreObjectFound {
        get {
            return ResourceManager.GetString("Error_CorruptedImageStoreObjectFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    There was an error while trying to determine the service locations
    ///  
    /// </summary>
    internal static string Error_AddressDetectionFailure {
        get {
            return ResourceManager.GetString("Error_AddressDetectionFailure", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Application already exists
    ///  
    /// </summary>
    internal static string Error_ApplicationAlreadyExists {
        get {
            return ResourceManager.GetString("Error_ApplicationAlreadyExists", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Application is already in the target version
    ///  
    /// </summary>
    internal static string Error_ApplicationAlreadyInTargetVersion {
        get {
            return ResourceManager.GetString("Error_ApplicationAlreadyInTargetVersion", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Application not found
    ///  
    /// </summary>
    internal static string Error_ApplicationNotFound {
        get {
            return ResourceManager.GetString("Error_ApplicationNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Application is currently NOT being upgraded
    ///  
    /// </summary>
    internal static string Error_ApplicationNotUpgrading {
        get {
            return ResourceManager.GetString("Error_ApplicationNotUpgrading", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Application type and version already exists
    ///  
    /// </summary>
    internal static string Error_ApplicationTypeAlreadyExists {
        get {
            return ResourceManager.GetString("Error_ApplicationTypeAlreadyExists", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Application type and version is still in use
    ///  
    /// </summary>
    internal static string Error_ApplicationTypeInUse {
        get {
            return ResourceManager.GetString("Error_ApplicationTypeInUse", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Application type and version not found
    ///  
    /// </summary>
    internal static string Error_ApplicationTypeNotFound {
        get {
            return ResourceManager.GetString("Error_ApplicationTypeNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cannot provision multiple versions of the same application type simultaneously.
    ///  
    /// </summary>
    internal static string Error_ApplicationTypeProvisionInProgress {
        get {
            return ResourceManager.GetString("Error_ApplicationTypeProvisionInProgress", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Application is currently being upgraded
    ///  
    /// </summary>
    internal static string Error_ApplicationUpgradeInProgress {
        get {
            return ResourceManager.GetString("Error_ApplicationUpgradeInProgress", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Compose deployment already exists
    ///  
    /// </summary>
    internal static string Error_ComposeDeploymentAlreadyExists {
        get {
            return ResourceManager.GetString("Error_ComposeDeploymentAlreadyExists", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Compose deployment not found
    ///  
    /// </summary>
    internal static string Error_ComposeDeploymentNotFound {
        get {
            return ResourceManager.GetString("Error_ComposeDeploymentNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Compose deployment is not upgrading.
    ///  
    /// </summary>
    internal static string Error_ComposeDeploymentNotUpgrading {
        get {
            return ResourceManager.GetString("Error_ComposeDeploymentNotUpgrading", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Single instance application already exists
    ///  
    /// </summary>
    internal static string Error_SingleInstanceApplicationAlreadyExists {
        get {
            return ResourceManager.GetString("Error_SingleInstanceApplicationAlreadyExists", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Single instance application not found
    ///  
    /// </summary>
    internal static string Error_SingleInstanceApplicationNotFound {
        get {
            return ResourceManager.GetString("Error_SingleInstanceApplicationNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Single instance application upgrade is in progress.
    ///  
    /// </summary>
    internal static string Error_SingleInstanceApplicationUpgradeInProgress {
        get {
            return ResourceManager.GetString("Error_SingleInstanceApplicationUpgradeInProgress", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Volume already exists
    ///  
    /// </summary>
    internal static string Error_VolumeAlreadyExists {
        get {
            return ResourceManager.GetString("Error_VolumeAlreadyExists", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Volume not found
    ///  
    /// </summary>
    internal static string Error_VolumeNotFound {
        get {
            return ResourceManager.GetString("Error_VolumeNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Specified upgrade domain has already completed.
    ///  
    /// </summary>
    internal static string Error_UpgradeDomainAlreadyCompleted {
        get {
            return ResourceManager.GetString("Error_UpgradeDomainAlreadyCompleted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid application upgrade request
    ///  
    /// </summary>
    internal static string Error_ApplicationUpgradeValidationError {
        get {
            return ResourceManager.GetString("Error_ApplicationUpgradeValidationError", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The code package was not found
    ///  
    /// </summary>
    internal static string Error_CodePackageNotFound {
        get {
            return ResourceManager.GetString("Error_CodePackageNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The collection is readonly
    ///  
    /// </summary>
    internal static string Error_CollectionReadonly {
        get {
            return ResourceManager.GetString("Error_CollectionReadonly", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The config package was not found
    ///  
    /// </summary>
    internal static string Error_ConfigPackageNotFound {
        get {
            return ResourceManager.GetString("Error_ConfigPackageNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    A configuration parameter is missing.
    ///  
    /// </summary>
    internal static string Error_ConfigurationParameterNotFound {
        get {
            return ResourceManager.GetString("Error_ConfigurationParameterNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    A configuration section is missing.
    ///  
    /// </summary>
    internal static string Error_ConfigurationSectionNotFound {
        get {
            return ResourceManager.GetString("Error_ConfigurationSectionNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The data package was not found
    ///  
    /// </summary>
    internal static string Error_DataPackageNotFound {
        get {
            return ResourceManager.GetString("Error_DataPackageNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Failed to decrypt the value.
    ///  
    /// </summary>
    internal static string Error_DecryptionFailed {
        get {
            return ResourceManager.GetString("Error_DecryptionFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Directory not found
    ///  
    /// </summary>
    internal static string Error_DirectoryNotFound {
        get {
            return ResourceManager.GetString("Error_DirectoryNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Directory not empty
    ///  
    /// </summary>
    internal static string Error_DirectoryNotEmpty {
        get {
            return ResourceManager.GetString("Error_DirectoryNotEmpty", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Argument '{0}' cannot be empty
    ///  
    /// </summary>
    internal static string Error_EmptyArgument_Formatted {
        get {
            return ResourceManager.GetString("Error_EmptyArgument_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The list of operations can not be empty
    ///  
    /// </summary>
    internal static string Error_EmptyOperationList {
        get {
            return ResourceManager.GetString("Error_EmptyOperationList", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Failed to encrypt the value.
    ///  
    /// </summary>
    internal static string Error_EncryptionFailed {
        get {
            return ResourceManager.GetString("Error_EncryptionFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The Endpoint resource was not found
    ///  
    /// </summary>
    internal static string Error_EndpointResourceNotFound {
        get {
            return ResourceManager.GetString("Error_EndpointResourceNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Enumeration has completed.
    ///  
    /// </summary>
    internal static string Error_EnumerationCompleted {
        get {
            return ResourceManager.GetString("Error_EnumerationCompleted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Fabric is already in this version
    ///  
    /// </summary>
    internal static string Error_FabricAlreadyInTargetVersion {
        get {
            return ResourceManager.GetString("Error_FabricAlreadyInTargetVersion", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Max number of health reports reached, try again
    ///  
    /// </summary>
    internal static string Error_FabricHealthMaxReportsReached {
        get {
            return ResourceManager.GetString("Error_FabricHealthMaxReportsReached", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Health report is stale
    ///  
    /// </summary>
    internal static string Error_FabricHealthStaleReport {
        get {
            return ResourceManager.GetString("Error_FabricHealthStaleReport", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    There is no pending Fabric upgrade
    ///  
    /// </summary>
    internal static string Error_FabricNotUpgrading {
        get {
            return ResourceManager.GetString("Error_FabricNotUpgrading", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Fabric is being upgraded
    ///  
    /// </summary>
    internal static string Error_FabricUpgradeInProgress {
        get {
            return ResourceManager.GetString("Error_FabricUpgradeInProgress", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Fabric upgrade request failed validation
    ///  
    /// </summary>
    internal static string Error_FabricUpgradeValidationError {
        get {
            return ResourceManager.GetString("Error_FabricUpgradeValidationError", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Version has already been registered
    ///  
    /// </summary>
    internal static string Error_FabricVersionAlreadyExists {
        get {
            return ResourceManager.GetString("Error_FabricVersionAlreadyExists", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Fabric is currently in this version or being upgraded to this version
    ///  
    /// </summary>
    internal static string Error_FabricVersionInUse {
        get {
            return ResourceManager.GetString("Error_FabricVersionInUse", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Fabric version has not been registered
    ///  
    /// </summary>
    internal static string Error_FabricVersionNotFound {
        get {
            return ResourceManager.GetString("Error_FabricVersionNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    File not found
    ///  
    /// </summary>
    internal static string Error_FileNotFound {
        get {
            return ResourceManager.GetString("Error_FileNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    There is a content validation error in the manifest file(s)
    ///  
    /// </summary>
    internal static string Error_ImageBuilderValidationError {
        get {
            return ResourceManager.GetString("Error_ImageBuilderValidationError", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    There is an expression validation error in the manifest file with {0}: {1}
    ///  
    /// </summary>
    internal static string Error_ExpressionValidationError {
        get {
            return ResourceManager.GetString("Error_ExpressionValidationError", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    There is a error occurred attempting to modify reserved directory(s)
    ///  
    /// </summary>
    internal static string Error_ImageBuilderReservedDirectoryError {
        get {
            return ResourceManager.GetString("Error_ImageBuilderReservedDirectoryError", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    There was an IOException when using the Image Store.
    ///  
    /// </summary>
    internal static string Error_ImageStoreIOException {
        get {
            return ResourceManager.GetString("Error_ImageStoreIOException", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    There was an error acquiring lock on the file. This indicates that another process has acquired write lock on the file or the process does not have access to the file location.
    ///  
    /// </summary>
    internal static string Error_ImageStoreAcquireFileLockFailed {
        get {
            return ResourceManager.GetString("Error_ImageStoreAcquireFileLockFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    An abandoned file lock was found.
    ///  
    /// </summary>
    internal static string Error_ImageStoreOrphanFileWriteLockFound {
        get {
            return ResourceManager.GetString("Error_ImageStoreOrphanFileWriteLockFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The supplied address was invalid.
    ///  
    /// </summary>
    internal static string Error_InvalidAddress {
        get {
            return ResourceManager.GetString("Error_InvalidAddress", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The specified list of allowed common names is invalid.
    ///  
    /// </summary>
    internal static string Error_InvalidAllowedCommonNameList {
        get {
            return ResourceManager.GetString("Error_InvalidAllowedCommonNameList", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The specified atomic group has not been created or no longer exists.
    ///  
    /// </summary>
    internal static string Error_InvalidAtomicGroup {
        get {
            return ResourceManager.GetString("Error_InvalidAtomicGroup", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    A configuration parameter has been set to an invalid value. Please check the logs for details.
    ///  
    /// </summary>
    internal static string Error_InvalidConfiguration {
        get {
            return ResourceManager.GetString("Error_InvalidConfiguration", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The specified credentials are invalid.
    ///  
    /// </summary>
    internal static string Error_InvalidCredentials {
        get {
            return ResourceManager.GetString("Error_InvalidCredentials", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The security credential type specified is invalid.
    ///  
    /// </summary>
    internal static string Error_InvalidCredentialType {
        get {
            return ResourceManager.GetString("Error_InvalidCredentialType", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid Directory
    ///  
    /// </summary>
    internal static string Error_InvalidDirectory {
        get {
            return ResourceManager.GetString("Error_InvalidDirectory", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Override value for {0} setting is missing. It should be overriden also.
    ///  
    /// </summary>
    internal static string Error_MissingOverrideValue_DnsServiceSettings {
        get {
            return ResourceManager.GetString("Error_MissingOverrideValue_DnsServiceSettings", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Combination of partition Prefix/Suffix settings is invalid. For example, {0}, a sample URI using provided values does not meet DNS scheme requirements.
    ///  
    /// </summary>
    internal static string Error_InvalidChars_DnsServiceSettings {
        get {
            return ResourceManager.GetString("Error_InvalidChars_DnsServiceSettings", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} setting value has length of {1}, which exceeds maximum allowed length of {2}.
    ///  
    /// </summary>
    internal static string Error_InvalidLength_DnsServiceSettings {
        get {
            return ResourceManager.GetString("Error_InvalidLength_DnsServiceSettings", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} setting value has disallowed character '{1}'.
    ///  
    /// </summary>
    internal static string Error_DisallowedChar_DnsServiceSettings {
        get {
            return ResourceManager.GetString("Error_DisallowedChar_DnsServiceSettings", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} setting value cannot be empty.
    ///  
    /// </summary>
    internal static string Error_Empty_DnsServiceSettings {
        get {
            return ResourceManager.GetString("Error_Empty_DnsServiceSettings", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Health state '{0}' is not supported
    ///  
    /// </summary>
    internal static string Error_InvalidHealthState_Formatted {
        get {
            return ResourceManager.GetString("Error_InvalidHealthState_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    TimeToLive '{0}' is invalid. Please provide a duration that is larger than 0.
    ///  
    /// </summary>
    internal static string Error_InvalidHealthTimeToLive_Formatted {
        get {
            return ResourceManager.GetString("Error_InvalidHealthTimeToLive_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid name URI.
    ///  
    /// </summary>
    internal static string Error_InvalidNameUri {
        get {
            return ResourceManager.GetString("Error_InvalidNameUri", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The operation is invalid.
    ///  
    /// </summary>
    internal static string Error_InvalidOperation {
        get {
            return ResourceManager.GetString("Error_InvalidOperation", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid partition key/ID '{0}'  for selector {1}
    ///  
    /// </summary>
    internal static string Error_InvalidPartitionKey {
        get {
            return ResourceManager.GetString("Error_InvalidPartitionKey", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The protection level specified is invalid.
    ///  
    /// </summary>
    internal static string Error_InvalidProtectionLevel {
        get {
            return ResourceManager.GetString("Error_InvalidProtectionLevel", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Sequence number {0} is invalid.
    ///  
    /// </summary>
    internal static string Error_InvalidSequenceNumber_Formatted {
        get {
            return ResourceManager.GetString("Error_InvalidSequenceNumber_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The X509 subject name specified is invalid.
    ///  
    /// </summary>
    internal static string Error_InvalidSubjectName {
        get {
            return ResourceManager.GetString("Error_InvalidSubjectName", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The X509 find type specified is invalid.
    ///  
    /// </summary>
    internal static string Error_InvalidX509FindType {
        get {
            return ResourceManager.GetString("Error_InvalidX509FindType", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The X509 store specified is invalid.
    ///  
    /// </summary>
    internal static string Error_InvalidX509Store {
        get {
            return ResourceManager.GetString("Error_InvalidX509Store", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The X509 store location specified is invalid.
    ///  
    /// </summary>
    internal static string Error_InvalidX509StoreLocation {
        get {
            return ResourceManager.GetString("Error_InvalidX509StoreLocation", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The X509 store name specified is invalid.
    ///  
    /// </summary>
    internal static string Error_InvalidX509StoreName {
        get {
            return ResourceManager.GetString("Error_InvalidX509StoreName", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The X509 thumbprint specified is invalid.
    ///  
    /// </summary>
    internal static string Error_InvalidX509Thumbprint {
        get {
            return ResourceManager.GetString("Error_InvalidX509Thumbprint", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Node deactivation is stuck. Please investigate.
    ///  
    /// </summary>
    internal static string Error_InvestigationRequired {
        get {
            return ResourceManager.GetString("Error_InvestigationRequired", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The key is too large.
    ///  
    /// </summary>
    internal static string Error_KeyTooLarge {
        get {
            return ResourceManager.GetString("Error_KeyTooLarge", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Native {0} is null
    ///  
    /// </summary>
    internal static string Error_NativeDataNull_Formatted {
        get {
            return ResourceManager.GetString("Error_NativeDataNull_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Received unknown or invalid value {0} for enum type {1}. Serialization failure or upgrade in progress
    ///  
    /// </summary>
    internal static string Error_EnumInvalid_Formatted {
        get {
            return ResourceManager.GetString("Error_EnumInvalid_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Node deactivation is complete.
    ///  
    /// </summary>
    internal static string Error_NodeDeactivationComplete {
        get {
            return ResourceManager.GetString("Error_NodeDeactivationComplete", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Node deactivation is in progress.
    ///  
    /// </summary>
    internal static string Error_NodeDeactivationInProgress {
        get {
            return ResourceManager.GetString("Error_NodeDeactivationInProgress", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Requested node deactivation intent is not allowed.
    ///  
    /// </summary>
    internal static string Error_NodeDeactivationIntentNotAllowed {
        get {
            return ResourceManager.GetString("Error_NodeDeactivationIntentNotAllowed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Node deactivation request has been successfully recorded.
    ///  
    /// </summary>
    internal static string Error_NodeDeactivationRequestReceived {
        get {
            return ResourceManager.GetString("Error_NodeDeactivationRequestReceived", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Node is up.
    ///  
    /// </summary>
    internal static string Error_NodeIsUp {
        get {
            return ResourceManager.GetString("Error_NodeIsUp", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Node not found.
    ///  
    /// </summary>
    internal static string Error_NodeNotFound {
        get {
            return ResourceManager.GetString("Error_NodeNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The operation failed because this node is not the primary replica.  Consider re-resolving the primary and retrying the operation there.
    ///  
    /// </summary>
    internal static string Error_NotPrimary {
        get {
            return ResourceManager.GetString("Error_NotPrimary", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The requested data is not yet in cache.  This same operation is likely to succeed if retried later.
    ///  
    /// </summary>
    internal static string Error_NotReady {
        get {
            return ResourceManager.GetString("Error_NotReady", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The operation failed because a quorum of nodes are not available for this replica set.  Consider retrying once more nodes are up.
    ///  
    /// </summary>
    internal static string Error_NoWriteQuorum {
        get {
            return ResourceManager.GetString("Error_NoWriteQuorum", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Argument '{0}' cannot be empty or only white spaces
    ///  
    /// </summary>
    internal static string Error_NullOrWhiteSpaceArgument_Formatted {
        get {
            return ResourceManager.GetString("Error_NullOrWhiteSpaceArgument_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The object is closed.
    ///  
    /// </summary>
    internal static string Error_ObjectClosed {
        get {
            return ResourceManager.GetString("Error_ObjectClosed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The operation has not completed.
    ///  
    /// </summary>
    internal static string Error_OperationNotComplete {
        get {
            return ResourceManager.GetString("Error_OperationNotComplete", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The operation failed because the requested partition does not exist.
    ///  
    /// </summary>
    internal static string Error_PartitionNotFound {
        get {
            return ResourceManager.GetString("Error_PartitionNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Path is too long
    ///  
    /// </summary>
    internal static string Error_PathTooLong {
        get {
            return ResourceManager.GetString("Error_PathTooLong", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The process has aborted.
    ///  
    /// </summary>
    internal static string Error_ProcessAborted {
        get {
            return ResourceManager.GetString("Error_ProcessAborted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The process has been deactivated.
    ///  
    /// </summary>
    internal static string Error_ProcessDeactivated {
        get {
            return ResourceManager.GetString("Error_ProcessDeactivated", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The property check failed.
    ///  
    /// </summary>
    internal static string Error_PropertyCheckFailed {
        get {
            return ResourceManager.GetString("Error_PropertyCheckFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Property does not exist.
    ///  
    /// </summary>
    internal static string Error_PropertyDoesNotExist {
        get {
            return ResourceManager.GetString("Error_PropertyDoesNotExist", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The operation failed because this replica set is currently reconfiguring.
    ///  
    /// </summary>
    internal static string Error_ReconfigurationPending {
        get {
            return ResourceManager.GetString("Error_ReconfigurationPending", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The given key was not present.
    ///  
    /// </summary>
    internal static string Error_KeyNotFound {
        get {
            return ResourceManager.GetString("Error_KeyNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The specified replica does not exist.
    ///  
    /// </summary>
    internal static string Error_ReplicaDoesNotExist {
        get {
            return ResourceManager.GetString("Error_ReplicaDoesNotExist", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Replication queue is full.
    ///  
    /// </summary>
    internal static string Error_ReplicationQueueFull {
        get {
            return ResourceManager.GetString("Error_ReplicationQueueFull", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    There is a XML schema validation error in the manifest file(s)
    ///  
    /// </summary>
    internal static string Error_SchemaValidationError {
        get {
            return ResourceManager.GetString("Error_SchemaValidationError", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Sequence number check failed
    ///  
    /// </summary>
    internal static string Error_SequenceNumberCheckFailed {
        get {
            return ResourceManager.GetString("Error_SequenceNumberCheckFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Transaction has already committed or rolled back
    ///  
    /// </summary>
    internal static string Error_TransactionNotActive {
        get {
            return ResourceManager.GetString("Error_TransactionNotActive", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Transaction cannot be used after encountering an error. Retries must occur on a new transaction.
    ///  
    /// </summary>
    internal static string Error_TransactionAborted {
        get {
            return ResourceManager.GetString("Error_TransactionAborted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The operation failed because creating the service would form an affinity chain which is not supported.
    ///  
    /// </summary>
    internal static string Error_ServiceAffinityChainNotSupported {
        get {
            return ResourceManager.GetString("Error_ServiceAffinityChainNotSupported", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Service already exists.
    ///  
    /// </summary>
    internal static string Error_ServiceAlreadyExists {
        get {
            return ResourceManager.GetString("Error_ServiceAlreadyExists", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Service group already exists.
    ///  
    /// </summary>
    internal static string Error_ServiceGroupAlreadyExists {
        get {
            return ResourceManager.GetString("Error_ServiceGroupAlreadyExists", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Service group does not exist.
    ///  
    /// </summary>
    internal static string Error_ServiceGroupDoesNotExist {
        get {
            return ResourceManager.GetString("Error_ServiceGroupDoesNotExist", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The operation failed because the service metadata does not match.
    ///  
    /// </summary>
    internal static string Error_ServiceMetadataMismatch {
        get {
            return ResourceManager.GetString("Error_ServiceMetadataMismatch", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The operation failed because the service is currently offline.
    ///  
    /// </summary>
    internal static string Error_ServiceOffline {
        get {
            return ResourceManager.GetString("Error_ServiceOffline", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Service Type is already registered.
    ///  
    /// </summary>
    internal static string Error_ServiceTypeAlreadyRegistered {
        get {
            return ResourceManager.GetString("Error_ServiceTypeAlreadyRegistered", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Service Type mismatches description type (i.e. stateless/stateful/persisted)
    ///  
    /// </summary>
    internal static string Error_ServiceTypeMismatch {
        get {
            return ResourceManager.GetString("Error_ServiceTypeMismatch", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Service Type not found
    ///  
    /// </summary>
    internal static string Error_ServiceTypeNotFound {
        get {
            return ResourceManager.GetString("Error_ServiceTypeNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Service Type is not registered.
    ///  
    /// </summary>
    internal static string Error_ServiceTypeNotRegistered {
        get {
            return ResourceManager.GetString("Error_ServiceTypeNotRegistered", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Service Type template not found
    ///  
    /// </summary>
    internal static string Error_ServiceTypeTemplateNotFound {
        get {
            return ResourceManager.GetString("Error_ServiceTypeTemplateNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Service Manifest not found
    ///  
    /// </summary>
    internal static string Error_ServiceManifestNotFound {
        get {
            return ResourceManager.GetString("Error_ServiceManifestNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    An error occurred during this operation.  Please check the trace logs for more details.
    ///  
    /// </summary>
    internal static string Error_Unknown {
        get {
            return ResourceManager.GetString("Error_Unknown", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The property value is empty.
    ///  
    /// </summary>
    internal static string Error_ValueEmpty {
        get {
            return ResourceManager.GetString("Error_ValueEmpty", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Tha value specified is too large.
    ///  
    /// </summary>
    internal static string Error_ValueTooLarge {
        get {
            return ResourceManager.GetString("Error_ValueTooLarge", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Write conflict.
    ///  
    /// </summary>
    internal static string Error_WriteConflict {
        get {
            return ResourceManager.GetString("Error_WriteConflict", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Access denied.
    ///  
    /// </summary>
    internal static string Error_AccessDenied {
        get {
            return ResourceManager.GetString("Error_AccessDenied", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid argument {0} processed at {1}.
    ///  
    /// </summary>
    internal static string Error_ArgumentInvalid_Formatted {
        get {
            return ResourceManager.GetString("Error_ArgumentInvalid_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    A communication error caused the operation to fail.
    ///  
    /// </summary>
    internal static string Error_CommunicationError {
        get {
            return ResourceManager.GetString("Error_CommunicationError", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Could not ping any of the provided Service Fabric gateway endpoints.
    ///  
    /// </summary>
    internal static string Error_GatewayNotReachable {
        get {
            return ResourceManager.GetString("Error_GatewayNotReachable", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    End has already been called with this IAsyncResult.
    ///  
    /// </summary>
    internal static string Error_EndMethodAlreadyCalled {
        get {
            return ResourceManager.GetString("Error_EndMethodAlreadyCalled", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid IAsyncResult.  It is only valid to call End with the IAsyncResult that was returned from Begin.
    ///  
    /// </summary>
    internal static string Error_InvalidAsyncResult {
        get {
            return ResourceManager.GetString("Error_InvalidAsyncResult", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid cast.
    ///  
    /// </summary>
    internal static string Error_InvalidCast {
        get {
            return ResourceManager.GetString("Error_InvalidCast", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Microsoft Azure Service Fabric only supports running in MTA.  Do not use STAThreadAttribute in programs that use Microsoft Azure Service Fabric.
    ///  
    /// </summary>
    internal static string Error_MustUseMTA {
        get {
            return ResourceManager.GetString("Error_MustUseMTA", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Name already exists.
    ///  
    /// </summary>
    internal static string Error_NameAlreadyExists {
        get {
            return ResourceManager.GetString("Error_NameAlreadyExists", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Name does not exist.
    ///  
    /// </summary>
    internal static string Error_NameDoesNotExist {
        get {
            return ResourceManager.GetString("Error_NameDoesNotExist", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Name not empty.
    ///  
    /// </summary>
    internal static string Error_NameNotEmpty {
        get {
            return ResourceManager.GetString("Error_NameNotEmpty", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Operation canceled.
    ///  
    /// </summary>
    internal static string Error_OperationCanceled {
        get {
            return ResourceManager.GetString("Error_OperationCanceled", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Operation timed out.
    ///  
    /// </summary>
    internal static string Error_OperationTimedOut {
        get {
            return ResourceManager.GetString("Error_OperationTimedOut", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Service does not exist.
    ///  
    /// </summary>
    internal static string Error_ServiceDoesNotExist {
        get {
            return ResourceManager.GetString("Error_ServiceDoesNotExist", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The timeout is specified is not valid.  Timeouts must be TimeSpan.MaxValue to indicate no timeout, or must represent a duration between 0 and Int32.MaxValue milliseconds.
    ///  
    /// </summary>
    internal static string Error_TimeoutHelperTimeoutOutOfRange {
        get {
            return ResourceManager.GetString("Error_TimeoutHelperTimeoutOutOfRange", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The Image Builder encountered an unexpected error.
    ///  
    /// </summary>
    internal static string Error_ImageBuilderUnexpectedError {
        get {
            return ResourceManager.GetString("Error_ImageBuilderUnexpectedError", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Image Builder timed out. Please check that the Image Store is available and consider providing a larger timeout when processing large application packages.
    ///  
    /// </summary>
    internal static string Error_ImageBuilderTimeoutError {
        get {
            return ResourceManager.GetString("Error_ImageBuilderTimeoutError", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Please check that the Image Store is available and has correct access permissions for Microsoft Azure Service Fabric processes.
    ///  
    /// </summary>
    internal static string Error_ImageBuilderAccessDeniedError {
        get {
            return ResourceManager.GetString("Error_ImageBuilderAccessDeniedError", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    This property is empty. It was enumerated or read in a batch with the option not to retrieve values.
    ///  
    /// </summary>
    internal static string Error_EmptyProperty {
        get {
            return ResourceManager.GetString("Error_EmptyProperty", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    RolloutVersion string {0} is not in the correct format.
    ///  
    /// </summary>
    internal static string Error_Incorrect_RolloutVersionString_Formatted {
        get {
            return ResourceManager.GetString("Error_Incorrect_RolloutVersionString_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Value has to be a non-negative integer.
    ///  
    /// </summary>
    internal static string Error_NonNegative_Value_Required {
        get {
            return ResourceManager.GetString("Error_NonNegative_Value_Required", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Value has to be a positive integer.
    ///  
    /// </summary>
    internal static string Error_Positive_Value_Required {
        get {
            return ResourceManager.GetString("Error_Positive_Value_Required", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    This property stores data type of {0}. Requested type {1}
    ///  
    /// </summary>
    internal static string Error_PropertyTypeMismatch_Formatted {
        get {
            return ResourceManager.GetString("Error_PropertyTypeMismatch_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The Type {0} is not supported.
    ///  
    /// </summary>
    internal static string Error_TypeNotSupported_Formatted {
        get {
            return ResourceManager.GetString("Error_TypeNotSupported_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unknown PropertyTypeId: {0}
    ///  
    /// </summary>
    internal static string Error_UnknownPropertyType_Formatted {
        get {
            return ResourceManager.GetString("Error_UnknownPropertyType_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unknown reserved type
    ///  
    /// </summary>
    internal static string Error_UnknownReservedType {
        get {
            return ResourceManager.GetString("Error_UnknownReservedType", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid lock
    ///  
    /// </summary>
    internal static string Error_InvalidLock {
        get {
            return ResourceManager.GetString("Error_InvalidLock", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid lock mode
    ///  
    /// </summary>
    internal static string Error_InvalidLockMode {
        get {
            return ResourceManager.GetString("Error_InvalidLockMode", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid timeout
    ///  
    /// </summary>
    internal static string Error_InvalidTimeOut {
        get {
            return ResourceManager.GetString("Error_InvalidTimeOut", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid transaction
    ///  
    /// </summary>
    internal static string Error_InvalidTransaction {
        get {
            return ResourceManager.GetString("Error_InvalidTransaction", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Key must not be null
    ///  
    /// </summary>
    internal static string Error_NullKey {
        get {
            return ResourceManager.GetString("Error_NullKey", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Entity not found in Health Store
    ///  
    /// </summary>
    internal static string Error_FabricHealthEntityNotFound {
        get {
            return ResourceManager.GetString("Error_FabricHealthEntityNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    AsyncTaskCallInAdapter.End was called twice for {0}
    ///  
    /// </summary>
    internal static string Error_AsyncTaskCallInAdapter_End_Called_Twice_Formatted {
        get {
            return ResourceManager.GetString("Error_AsyncTaskCallInAdapter_End_Called_Twice_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    BeginFunc must set the adapter context
    ///  
    /// </summary>
    internal static string Error_BeginFuncMustSetAdapterContext {
        get {
            return ResourceManager.GetString("Error_BeginFuncMustSetAdapterContext", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Buffer at {0} was allocated of size {1}. expected {2}
    ///  
    /// </summary>
    internal static string Error_BufferAllocationSizeMismatch_Formatted {
        get {
            return ResourceManager.GetString("Error_BufferAllocationSizeMismatch_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The number of buffers we asked for must match the number of bufferr allocated
    ///  
    /// </summary>
    internal static string Error_BufferNumberMismatach {
        get {
            return ResourceManager.GetString("Error_BufferNumberMismatach", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The name of the specified configuration parameter must not be null or empty.
    ///  
    /// </summary>
    internal static string Error_ConfigParameterNameNullOrEmpty {
        get {
            return ResourceManager.GetString("Error_ConfigParameterNameNullOrEmpty", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The name of the specified configuration section must not be null or empty.
    ///  
    /// </summary>
    internal static string Error_ConfigSectionNameNullOrEmpty {
        get {
            return ResourceManager.GetString("Error_ConfigSectionNameNullOrEmpty", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The name of the specified endpoint resource must not be null or empty.
    ///  
    /// </summary>
    internal static string Error_EndpointNameNullOrEmpty {
        get {
            return ResourceManager.GetString("Error_EndpointNameNullOrEmpty", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The type {0} of the specified endpoint resource is not supported.
    ///  
    /// </summary>
    internal static string Error_EndpointNotSupported_Formatted {
        get {
            return ResourceManager.GetString("Error_EndpointNotSupported_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The scheme of the specified endpoint resource must not be null or empty.
    ///  
    /// </summary>
    internal static string Error_EndpointSchemeNullOrEmpty {
        get {
            return ResourceManager.GetString("Error_EndpointSchemeNullOrEmpty", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The eventName parameter must not be null or empty.
    ///  
    /// </summary>
    internal static string Error_EventNameNullOrEmpty {
        get {
            return ResourceManager.GetString("Error_EventNameNullOrEmpty", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unknown FABRIC_DLLHOST_HOSTED_DLL_KIND.
    ///  
    /// </summary>
    internal static string Error_HostedDllKindUnknown {
        get {
            return ResourceManager.GetString("Error_HostedDllKindUnknown", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid lock control block
    ///  
    /// </summary>
    internal static string Error_InvalidLockControlBlock {
        get {
            return ResourceManager.GetString("Error_InvalidLockControlBlock", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid parameter specified.
    ///  
    /// </summary>
    internal static string Error_InvalidParameter {
        get {
            return ResourceManager.GetString("Error_InvalidParameter", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid service correlation scheme {0}
    ///  
    /// </summary>
    internal static string Error_InvalidServiceCorrelationScheme_Formatted {
        get {
            return ResourceManager.GetString("Error_InvalidServiceCorrelationScheme_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid service placement policy type {0}
    ///  
    /// </summary>
    internal static string Error_InvalidServicePlacementPolicyType_Formatted {
        get {
            return ResourceManager.GetString("Error_InvalidServicePlacementPolicyType_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The specified item is already part of the list.
    ///  
    /// </summary>
    internal static string Error_ItemAlreadyInList {
        get {
            return ResourceManager.GetString("Error_ItemAlreadyInList", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Metadata must be set
    ///  
    /// </summary>
    internal static string Error_MetadataNotSet {
        get {
            return ResourceManager.GetString("Error_MetadataNotSet", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Array can't be null if size is not equal to zero.
    ///  
    /// </summary>
    internal static string Error_NullArrayWithNonZeroSize {
        get {
            return ResourceManager.GetString("Error_NullArrayWithNonZeroSize", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Can't pass in null native pointer.
    ///  
    /// </summary>
    internal static string Error_NullNativePointer {
        get {
            return ResourceManager.GetString("Error_NullNativePointer", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    OperationDataFactory must have been set
    ///  
    /// </summary>
    internal static string Error_OperationDataFactoryNotSet {
        get {
            return ResourceManager.GetString("Error_OperationDataFactoryNotSet", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    PartitionKey of type {0} is not supported.
    ///  
    /// </summary>
    internal static string Error_PartitionKeyNotSupported_Formatted {
        get {
            return ResourceManager.GetString("Error_PartitionKeyNotSupported_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unknown partition kind: {0}
    ///  
    /// </summary>
    internal static string Error_PartitionKindUnknown_Formatted {
        get {
            return ResourceManager.GetString("Error_PartitionKindUnknown_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Parititon scheme not supported
    ///  
    /// </summary>
    internal static string Error_PartitionSchemeNotSupported {
        get {
            return ResourceManager.GetString("Error_PartitionSchemeNotSupported", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unknown scheme: {0}
    ///  
    /// </summary>
    internal static string Error_PartitionSchemeUnknown_Formatted {
        get {
            return ResourceManager.GetString("Error_PartitionSchemeUnknown_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Property has no metadata
    ///  
    /// </summary>
    internal static string Error_PropertyHasNoMetadata {
        get {
            return ResourceManager.GetString("Error_PropertyHasNoMetadata", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unknown propertyTypeId: {0}
    ///  
    /// </summary>
    internal static string Error_PropertyTypeIDUnknown_Formatted {
        get {
            return ResourceManager.GetString("Error_PropertyTypeIDUnknown_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The name of the specified Service Type extension element must not be null or empty.
    ///  
    /// </summary>
    internal static string Error_ServiceTypeExtensionNameNullOrEmpty {
        get {
            return ResourceManager.GetString("Error_ServiceTypeExtensionNameNullOrEmpty", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid service kind: {0}
    ///  
    /// </summary>
    internal static string Error_ServiceKindInvalid_Formatted {
        get {
            return ResourceManager.GetString("Error_ServiceKindInvalid_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The eventId parameter must be less than {0}.
    ///  
    /// </summary>
    internal static string Error_TraceEvent_EventIdExceedsMaxValue_Formatted {
        get {
            return ResourceManager.GetString("Error_TraceEvent_EventIdExceedsMaxValue_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The Id field must be the first one.
    ///  
    /// </summary>
    internal static string Error_TraceEvent_IdFieldNotFirst {
        get {
            return ResourceManager.GetString("Error_TraceEvent_IdFieldNotFirst", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The trace level {0} is not supported.
    ///  
    /// </summary>
    internal static string Error_TraceLevelNotSupported_Formatted {
        get {
            return ResourceManager.GetString("Error_TraceLevelNotSupported_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The supplied taskId {0} must be less {1}.
    ///  
    /// </summary>
    internal static string Error_Trace_TaskIdExceedsMaxValue_Formatted {
        get {
            return ResourceManager.GetString("Error_Trace_TaskIdExceedsMaxValue_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unknown code package entry point type : {0}
    ///  
    /// </summary>
    internal static string Error_UnknownCodePackageEntryType_Formatted {
        get {
            return ResourceManager.GetString("Error_UnknownCodePackageEntryType_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unknown isolation policy type : {0}
    ///  
    /// </summary>
    internal static string Error_UnknownIsolationPolicyType_Formatted {
        get {
            return ResourceManager.GetString("Error_UnknownIsolationPolicyType_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unknown service description type {0}
    ///  
    /// </summary>
    internal static string Error_UnknownServiceDescriptionType_Formatted {
        get {
            return ResourceManager.GetString("Error_UnknownServiceDescriptionType_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unknown Weight {0}
    ///  
    /// </summary>
    internal static string Error_UnknownWeight_Formatted {
        get {
            return ResourceManager.GetString("Error_UnknownWeight_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid argument
    ///  
    /// </summary>
    internal static string Error_ArgumentInvalid {
        get {
            return ResourceManager.GetString("Error_ArgumentInvalid", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The argument {0} is invalid.
    ///  
    /// </summary>
    internal static string Error_ArgumentInvalid_Formatted_arg1 {
        get {
            return ResourceManager.GetString("Error_ArgumentInvalid_Formatted_arg1", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The argument {0} is not expected.
    ///  
    /// </summary>
    internal static string Error_ArgumentUnexpected_Formatted {
        get {
            return ResourceManager.GetString("Error_ArgumentUnexpected_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Argument {0} has invalid value '{1}'.
    ///  
    /// </summary>
    internal static string Error_InvalidArgument_Value {
        get {
            return ResourceManager.GetString("Error_InvalidArgument_Value", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The command line argument {0} is found more than once.
    ///  
    /// </summary>
    internal static string Error_CommandLineArgumentFoundMoreThanOnce_Formatted {
        get {
            return ResourceManager.GetString("Error_CommandLineArgumentFoundMoreThanOnce_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    FabricDataRoot is not provided or properly set.
    ///  
    /// </summary>
    internal static string Error_FabricDeployer_FabricDataRootNotFound_Formatted {
        get {
            return ResourceManager.GetString("Error_FabricDeployer_FabricDataRootNotFound_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    FabricBinRoot is not provided or properly set.
    ///  
    /// </summary>
    internal static string Error_FabricDeployer_FabricBinRootNotFound_Formatted {
        get {
            return ResourceManager.GetString("Error_FabricDeployer_FabricBinRootNotFound_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Target information file {0} not found for Fabric upgrade.
    ///  
    /// </summary>
    internal static string Error_FabricDeployer_TargetInformationFileNotFound_Formatted {
        get {
            return ResourceManager.GetString("Error_FabricDeployer_TargetInformationFileNotFound_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid File version value {0} for parameter {1}. Accepted format is maj.min.build.
    ///  
    /// </summary>
    internal static string Error_FabricDeployer_ParameterInvalidFileVersion_Formatted {
        get {
            return ResourceManager.GetString("Error_FabricDeployer_ParameterInvalidFileVersion_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Parameter {0} is only applicable in an {1} operation. It should always be 0 in a {2} operation.
    ///  
    /// </summary>
    internal static string Error_FabricDeployer_ParameterNotApplicable_Formatted {
        get {
            return ResourceManager.GetString("Error_FabricDeployer_ParameterNotApplicable_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Revision number detected in {0}. Ignoring it as the value is unused in Microsoft Azure Service Fabric product version.
    ///  
    /// </summary>
    internal static string Error_FabricDeployer_RevisionNumberDetected_Formatted {
        get {
            return ResourceManager.GetString("Error_FabricDeployer_RevisionNumberDetected_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid cluster manifest Infrastructure element. Does not match any InfrastructureType.
    ///  
    /// </summary>
    internal static string Error_InvalidClusterManifestElement {
        get {
            return ResourceManager.GetString("Error_InvalidClusterManifestElement", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The operation value '{0}' is not supported.
    ///  
    /// </summary>
    internal static string Error_OperationValueNotSupported_Formatted {
        get {
            return ResourceManager.GetString("Error_OperationValueNotSupported_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid value {0} for parameter {1}. Only integers >= 0 accepted.
    ///  
    /// </summary>
    internal static string Error_ParameterMustBeGreaterThanZero_Formatted {
        get {
            return ResourceManager.GetString("Error_ParameterMustBeGreaterThanZero_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The required command line argument {0} cannot be empty.
    ///  
    /// </summary>
    internal static string Error_RequiredCmdlineArgumentEmpty_Formatted {
        get {
            return ResourceManager.GetString("Error_RequiredCmdlineArgumentEmpty_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The required command line argument {0} is not found.
    ///  
    /// </summary>
    internal static string Error_RequiredCmdlineArgumentNotFound_Formatted {
        get {
            return ResourceManager.GetString("Error_RequiredCmdlineArgumentNotFound_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Do not invoke this method for Server Infrastructure cluster manifests.
    ///  
    /// </summary>
    internal static string Error_WrongMethodInvokedForServer {
        get {
            return ResourceManager.GetString("Error_WrongMethodInvokedForServer", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Deployer created
    ///  
    /// </summary>
    internal static string General_FabricDeployer_DeployerCreated {
        get {
            return ResourceManager.GetString("General_FabricDeployer_DeployerCreated", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    FabricDeployer.exe {0}:[Create | Update | Remove] {1}:<root of Fabric folder> {2}:<root of Fabric data folder> {3}:<cluster manifest file> {4}:<node list file>(needed for non-server deloyments) {5}:ForInternalUse {6}:ForInternalUse
    ///  
    /// </summary>
    internal static string General_FabricDeployer_Usage_1_Formatted {
        get {
            return ResourceManager.GetString("General_FabricDeployer_Usage_1_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Parameters {0} and {3} are required. If {1} and {2} are not specified they would be read from the environment. Parameter {4} is required if the deployment is on a non-server infrastructure
    ///  
    /// </summary>
    internal static string General_FabricDeployer_Usage_2_Formatted {
        get {
            return ResourceManager.GetString("General_FabricDeployer_Usage_2_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    If specifying environment variables for {0} and {1} please make sure they are properly escaped.
    ///  
    /// </summary>
    internal static string General_FabricDeployer_Usage_3_Formatted {
        get {
            return ResourceManager.GetString("General_FabricDeployer_Usage_3_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ImageStoreConnectionString must start with fabric: or file: or xstore:
    ///  
    /// </summary>
    internal static string Error_InvalidImageStoreConnectionString {
        get {
            return ResourceManager.GetString("Error_InvalidImageStoreConnectionString", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Make sure you are connected to the cluster or use 'Connect-ServiceFabricCluster' cmdlet to connect to cluster.
    ///  
    /// </summary>
    internal static string Error_MissingImageStoreConnectionStringArgument {
        get {
            return ResourceManager.GetString("Error_MissingImageStoreConnectionStringArgument", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Could not parse ImageStoreConnectionString from cluster manifest.
    ///  
    /// </summary>
    internal static string Error_ImageStoreConnectionStringParse {
        get {
            return ResourceManager.GetString("Error_ImageStoreConnectionStringParse", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Image Store client executable does not exist
    ///  
    /// </summary>
    internal static string Error_ImageStoreClientNotExist {
        get {
            return ResourceManager.GetString("Error_ImageStoreClientNotExist", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Image Store client upload operation failed with exit code {0}, run with -Verbose to see details
    ///  
    /// </summary>
    internal static string Error_ImageStoreClientUploadFailed {
        get {
            return ResourceManager.GetString("Error_ImageStoreClientUploadFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Paging is only supported by the native image store.
    ///  
    /// </summary>
    internal static string Error_PagingNotSupported {
        get {
            return ResourceManager.GetString("Error_PagingNotSupported", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Upload to Image Store succeeded
    ///  
    /// </summary>
    internal static string Info_UploadToImageStoreSucceeded {
        get {
            return ResourceManager.GetString("Info_UploadToImageStoreSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Remove application package succeeded
    ///  
    /// </summary>
    internal static string Info_RemoveApplicationPackageSucceeded {
        get {
            return ResourceManager.GetString("Info_RemoveApplicationPackageSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Register application type succeeded
    ///  
    /// </summary>
    internal static string Info_RegisterApplicationSucceeded {
        get {
            return ResourceManager.GetString("Info_RegisterApplicationSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Register application type started. Use Get-ServiceFabricApplicationType to query for status.
    ///  
    /// </summary>
    internal static string Info_RegisterApplicationStarted {
        get {
            return ResourceManager.GetString("Info_RegisterApplicationStarted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unregister application type succeeded.
    ///  
    /// </summary>
    internal static string Info_UnregisterApplicationSucceeded {
        get {
            return ResourceManager.GetString("Info_UnregisterApplicationSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unregister application type started. Use Get-ServiceFabricApplicationType to query for status.
    ///  
    /// </summary>
    internal static string Info_UnregisterApplicationStarted {
        get {
            return ResourceManager.GetString("Info_UnregisterApplicationStarted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Remove application instance succeeded
    ///  
    /// </summary>
    internal static string Info_RemoveApplicationInstanceSucceeded {
        get {
            return ResourceManager.GetString("Info_RemoveApplicationInstanceSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Current upgrade state is not pending
    ///  
    /// </summary>
    internal static string Error_InvalidUpgradeStateForResume {
        get {
            return ResourceManager.GetString("Error_InvalidUpgradeStateForResume", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Current upgrade progress status is not pending for any upgrade domain
    ///  
    /// </summary>
    internal static string Error_InvalidUpgradeDomainStatusForResume {
        get {
            return ResourceManager.GetString("Error_InvalidUpgradeDomainStatusForResume", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Upgrade domain name is not supposed to be {0} but {1}
    ///  
    /// </summary>
    internal static string Error_InvalidUpgradeDomainNameForResume {
        get {
            return ResourceManager.GetString("Error_InvalidUpgradeDomainNameForResume", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Resume application upgrade succeeded
    ///  
    /// </summary>
    internal static string Info_ResumeApplicationUpgradeSucceeded {
        get {
            return ResourceManager.GetString("Info_ResumeApplicationUpgradeSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cluster connection find type must be FindByThumbprint or FindBySubjectName
    ///  
    /// </summary>
    internal static string Error_InvalidClusterConnectionFindType {
        get {
            return ResourceManager.GetString("Error_InvalidClusterConnectionFindType", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cluster connection instance is null
    ///  
    /// </summary>
    internal static string Error_InvalidClusterConnection {
        get {
            return ResourceManager.GetString("Error_InvalidClusterConnection", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cluster connection with the same name already existed, the old connection will be deleted
    ///  
    /// </summary>
    internal static string Info_ClusterConnectionAlreadyExisted {
        get {
            return ResourceManager.GetString("Info_ClusterConnectionAlreadyExisted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Create node configuration succeeded
    ///  
    /// </summary>
    internal static string Info_NewNodeConfigurationSucceeded {
        get {
            return ResourceManager.GetString("Info_NewNodeConfigurationSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Update node configuration succeeded
    ///  
    /// </summary>
    internal static string Info_UpdateNodeConfigurationSucceeded {
        get {
            return ResourceManager.GetString("Info_UpdateNodeConfigurationSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Remove node configuration succeeded
    ///  
    /// </summary>
    internal static string Info_RemoveNodeConfigurationSucceeded {
        get {
            return ResourceManager.GetString("Info_RemoveNodeConfigurationSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Service partition scheme has to be Singleton, UniformInt64Range or Named
    ///  
    /// </summary>
    internal static string Error_InvalidServicePartitionScheme {
        get {
            return ResourceManager.GetString("Error_InvalidServicePartitionScheme", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Create service from template succeeded
    ///  
    /// </summary>
    internal static string Info_CreateServiceFromTemplateSucceeded {
        get {
            return ResourceManager.GetString("Info_CreateServiceFromTemplateSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Update service succeeded
    ///  
    /// </summary>
    internal static string Info_UpdateServiceSucceeded {
        get {
            return ResourceManager.GetString("Info_UpdateServiceSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Remove service succeeded
    ///  
    /// </summary>
    internal static string Info_RemoveServiceSucceeded {
        get {
            return ResourceManager.GetString("Info_RemoveServiceSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    PowerShell script output is null
    ///  
    /// </summary>
    internal static string Error_InvalidPowershellScriptOutput {
        get {
            return ResourceManager.GetString("Error_InvalidPowershellScriptOutput", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    PowerShell script does not have exit code
    ///  
    /// </summary>
    internal static string Error_InvalidPowershellScriptExitCode {
        get {
            return ResourceManager.GetString("Error_InvalidPowershellScriptExitCode", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Fine-grained update of individual health evaluation policy elements is not supported.
    ///  
    /// </summary>
    internal static string PowerShell_HealthPolicyUpdateCaption {
        get {
            return ResourceManager.GetString("PowerShell_HealthPolicyUpdateCaption", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Fine-grained override of individual health evaluation policy elements is not supported.
    ///  
    /// </summary>
    internal static string PowerShell_HealthPolicyUpgradeCaption {
        get {
            return ResourceManager.GetString("PowerShell_HealthPolicyUpgradeCaption", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unspecified values for ConsiderWarningAsError, DefaultServiceTypeHealthPolicy, MaxPercentUnhealthyDeployedApplications, and ServiceTypeHealthPolicyMap will be updated using system defaults.
    ///  
    /// </summary>
    internal static string PowerShell_ApplicationHealthPolicyUpdateWarning {
        get {
            return ResourceManager.GetString("PowerShell_ApplicationHealthPolicyUpdateWarning", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unspecified values for ConsiderWarningAsError, MaxPercentUnhealthyApplications, MaxPercentUnhealthyNodes, and ApplicationTypeHealthPolicyMap will be updated using system defaults.
    ///  
    /// </summary>
    internal static string PowerShell_ClusterHealthPolicyUpdateWarning {
        get {
            return ResourceManager.GetString("PowerShell_ClusterHealthPolicyUpdateWarning", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unspecified values for MaxPercentDeltaUnhealthyNodes and MaxPercentUpgradeDomainDeltaUnhealthyNodes will be updated using system defaults.
    ///  
    /// </summary>
    internal static string PowerShell_ClusterUpgradeHealthPolicyUpdateWarning {
        get {
            return ResourceManager.GetString("PowerShell_ClusterUpgradeHealthPolicyUpdateWarning", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Connecting with IP Address. Provide value for at least one of ServerCommonName or ServerCertThumbprint.
    ///  
    /// </summary>
    internal static string PowerShell_ConnectClusterWithoutServerCommonNameAndServerCertThumbprintError {
        get {
            return ResourceManager.GetString("PowerShell_ConnectClusterWithoutServerCommonNameAndServerCertThumbprintError", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    RestartProcess is deprecated - use ForceRestart.
    ///  
    /// </summary>
    internal static string PowerShell_RestartProcess_Deprecated {
        get {
            return ResourceManager.GetString("PowerShell_RestartProcess_Deprecated", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ReplicaQuorumTimeoutSec is deprecated - use UpgradeReplicaSetCheckTimeoutSec.
    ///  
    /// </summary>
    internal static string PowerShell_ReplicaQuorumTimeoutSec_Deprecated {
        get {
            return ResourceManager.GetString("PowerShell_ReplicaQuorumTimeoutSec_Deprecated", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Usage:
    ///  
    /// </summary>
    internal static string General_Usage {
        get {
            return ResourceManager.GetString("General_Usage", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} '{1}' is invalid. The version cannot contain '{2}' or '{3}' or invalid path characters or start/end with white-space.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidVersion_arg2 {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidVersion_arg2", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} with name '{1}' is invalid. The name cannot contain '{2}' or '{3}' or invalid path characters.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidName_arg2 {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidName_arg2", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} with name '{1}' is invalid. The name cannot contain '{2}' or '{3}' or invalid path characters or start with '{4}'.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidName_arg2_prefix {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidName_arg2_prefix", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The user principal with name '{0}' is invalid. Valid AccountName attribute is required.
    ///  
    /// </summary>
    internal static string ImageBuilderError_AccountNameNotSpecified {
        get {
            return ResourceManager.GetString("ImageBuilderError_AccountNameNotSpecified", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The ConfigOverride '{0}' does not match any ConfigPackages in service '{1}'.
    ///  
    /// </summary>
    internal static string ImageBuilderError_ConfigOverrideDoesNotMatchConfigPackage {
        get {
            return ResourceManager.GetString("ImageBuilderError_ConfigOverrideDoesNotMatchConfigPackage", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The IsEncrypted value of the override parameter with name '{0}' in section '{1}' for service manifest '{2}' does not match the IsEncrypted value of the corresponding parameter.
    ///  
    /// </summary>
    internal static string ImageBuilderError_ConfigOverrideDoesNotMatchIsEncrypted {
        get {
            return ResourceManager.GetString("ImageBuilderError_ConfigOverrideDoesNotMatchIsEncrypted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The override parameter with name '{0}' in section '{1}' for service manifest '{2}' is invalid. Cannot find parameter with the same name to override. Check that it is defined in your Settings.xml file.
    ///  
    /// </summary>
    internal static string ImageBuilderError_ConfigOverrideDoesNotMatchParameterName {
        get {
            return ResourceManager.GetString("ImageBuilderError_ConfigOverrideDoesNotMatchParameterName", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The Settings section with name '{0}' in ConfigOverride '{1}' for service manifest '{2}' is invalid. Cannot find a section with the same name. Check that it is defined in your Settings.xml file.
    ///  
    /// </summary>
    internal static string ImageBuilderError_ConfigOverrideDoesNotMatchSectionName {
        get {
            return ResourceManager.GetString("ImageBuilderError_ConfigOverrideDoesNotMatchSectionName", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid EntryPoint '{0}'. Quotes do not match.
    ///  
    /// </summary>
    internal static string ImageBuilderError_EntryPointQuotesDontMatch {
        get {
            return ResourceManager.GetString("ImageBuilderError_EntryPointQuotesDontMatch", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The user principal with name '{0}' is invalid. AccountName in UPN or downlevel name format is required.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidAccountNameFormat {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidAccountNameFormat", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The EntryPoint {0} is invalid or not found in {1}.
    ///  
    /// </summary>
    internal static string ImageBuilderError_EntryPointInvalidOrNotFound {
        get {
            return ResourceManager.GetString("ImageBuilderError_EntryPointInvalidOrNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The {0} '{1}' is invalid.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidValue {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidValue", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The ServiceDnsName for DefaultService '{0}' is invalid.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidServiceDnsName {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidServiceDnsName", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Code containing native DLLs (assemblies with Type = \"Dll\") must have DedicatedProcess isolation policy.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidIsolationPolicyForNativeDll {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidIsolationPolicyForNativeDll", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} with name '{1}' is invalid. The name cannot contain '{2}'.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidName_arg1 {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidName_arg1", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The {0} '{1}' in {2} is invalid. There is no matching {3} in the corresponding {4}.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidRef {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidRef", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The {0} '{1}' in {2} '{3}' is invalid. There is no matching {4} in {5}.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidRefSameFile {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidRefSameFile", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ServiceManifestRef has {0}={1}. This does not match the {0}={2} in Service Manifest.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidServiceManifestRef {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidServiceManifestRef", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Property {0} of {1} cannot be null.
    ///  
    /// </summary>
    internal static string ImageBuilderError_NullPropertyError {
        get {
            return ResourceManager.GetString("ImageBuilderError_NullPropertyError", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} cannot be null or empty.
    ///  
    /// </summary>
    internal static string ImageBuilderError_NullOrEmptyError {
        get {
            return ResourceManager.GetString("ImageBuilderError_NullOrEmptyError", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Parameter '{0}' has MustOverride set to true. However, '{0}' is not overriden.
    ///  
    /// </summary>
    internal static string ImageBuilderError_ParameterNotOverriden {
        get {
            return ResourceManager.GetString("ImageBuilderError_ParameterNotOverriden", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The user principal with name '{0}' is invalid. Password attribute is required for DomainUser AccountType.
    ///  
    /// </summary>
    internal static string ImageBuilderError_PasswordMissingForDomainUser {
        get {
            return ResourceManager.GetString("ImageBuilderError_PasswordMissingForDomainUser", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The user principal with name '{0}' is invalid. Password and PasswordEncrypted attribute can only be specified for DomainUser AccountType.
    ///  
    /// </summary>
    internal static string ImageBuilderError_PasswordSpecifiedForNonDomainUser {
        get {
            return ResourceManager.GetString("ImageBuilderError_PasswordSpecifiedForNonDomainUser", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The user principal with name '{0}' references group with name '{1}'. However, there is no matching group principal in the Application Manifest.
    ///  
    /// </summary>
    internal static string ImageBuilderError_ReferencingInvalidGroupPrincipal {
        get {
            return ResourceManager.GetString("ImageBuilderError_ReferencingInvalidGroupPrincipal", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    EntryPoint is set to '{0}'. Rooted paths are not supported.
    ///  
    /// </summary>
    internal static string ImageBuilderError_RootedEntryPointNotSupported {
        get {
            return ResourceManager.GetString("ImageBuilderError_RootedEntryPointNotSupported", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The ServiceTypeName '{0}' is not supported by any of the ImportedServiceManifests.
    ///  
    /// </summary>
    internal static string ImageBuilderError_ServiceTypeNameNotSupportedInImports {
        get {
            return ResourceManager.GetString("ImageBuilderError_ServiceTypeNameNotSupportedInImports", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} has parameter '{1}' which is unrecognized. Parameters have to be defined.
    ///  
    /// </summary>
    internal static string ImageBuilderError_UndefinedParameter {
        get {
            return ResourceManager.GetString("ImageBuilderError_UndefinedParameter", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Value '{0}' cannot be assigned to {1}. Value has to be a positive integer.
    ///  
    /// </summary>
    internal static string ImageBuilderError_ValueMustBePositiveInt {
        get {
            return ResourceManager.GetString("ImageBuilderError_ValueMustBePositiveInt", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Service Group must have member services.
    ///  
    /// </summary>
    internal static string ImageBuilderError_ServiceGroupHasNoMemberServices {
        get {
            return ResourceManager.GetString("ImageBuilderError_ServiceGroupHasNoMemberServices", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The Application Manifest file '{0}' is not found in the store.
    ///  
    /// </summary>
    internal static string ImageBuilderError_ApplicationManifestFileMissing {
        get {
            return ResourceManager.GetString("ImageBuilderError_ApplicationManifestFileMissing", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The application package '{0}' is not found in the store. Make sure that the package was previously copied to the store. If the package was previously provisioned successfully, the temporary package may have been removed based on the cleanup policies.
    ///  
    /// </summary>
    internal static string ImageBuilderError_ApplicationPackageFolderMissing {
        get {
            return ResourceManager.GetString("ImageBuilderError_ApplicationPackageFolderMissing", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Value cannot be null or empty.
    ///  
    /// </summary>
    internal static string ImageBuilderError_ArgumentNullOrEmpty {
        get {
            return ResourceManager.GetString("ImageBuilderError_ArgumentNullOrEmpty", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Could not resolve parameter '{0}'.
    ///  
    /// </summary>
    internal static string ImageBuilderError_CouldNotResolveParameter {
        get {
            return ResourceManager.GetString("ImageBuilderError_CouldNotResolveParameter", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    '{0}' is not a valid account name. Account name must be in UPN or downlevel name format. Source: {1}, Destination: {2}, Attribute: {3}.
    ///  
    /// </summary>
    internal static string ImageBuilderError_DiagnosticValidator_InvalidAccountNameFormat {
        get {
            return ResourceManager.GetString("ImageBuilderError_DiagnosticValidator_InvalidAccountNameFormat", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    '{0}' is not a valid account type. Valid values are {1}, {2}. Source: {3}, Destination: {4}, Attribute: {5}.
    ///  
    /// </summary>
    internal static string ImageBuilderError_DiagnosticValidator_InvalidAccountType {
        get {
            return ResourceManager.GetString("ImageBuilderError_DiagnosticValidator_InvalidAccountType", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    '{0}' must not be specified if '{1}' is not specified. Source: {2}, Destination: {3}.
    ///  
    /// </summary>
    internal static string ImageBuilderError_DiagnosticValidator_AttributeInvalid {
        get {
            return ResourceManager.GetString("ImageBuilderError_DiagnosticValidator_AttributeInvalid", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    '{0}' must not be specified if '{1}' is '{2}'. Source: {3}, Destination: {4}.
    ///  
    /// </summary>
    internal static string ImageBuilderError_DiagnosticValidator_PasswordAttributeInvalid {
        get {
            return ResourceManager.GetString("ImageBuilderError_DiagnosticValidator_PasswordAttributeInvalid", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Value '{0}' is an invalid value for ETW level filter. Valid values are {1}, {2}, {3} and {4}. Source: {5}, Destination: {6}, Attribute: {7}.
    ///  
    /// </summary>
    internal static string ImageBuilderError_DiagnosticValidator_InvalidETWLevel {
        get {
            return ResourceManager.GetString("ImageBuilderError_DiagnosticValidator_InvalidETWLevel", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Value '{0}' is an invalid value for relative path to application log folder because it is an absolute path. Source: {1}, Destination: {2}, Attribute: {3}.
    ///  
    /// </summary>
    internal static string ImageBuilderError_DiagnosticValidator_AbsolutePathNotAllowed {
        get {
            return ResourceManager.GetString("ImageBuilderError_DiagnosticValidator_AbsolutePathNotAllowed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Value '{0}' is an invalid value for relative path to application log folder because it contains '..'. Source: {1}, Destination: {2}, Attribute: {3}.
    ///  
    /// </summary>
    internal static string ImageBuilderError_DiagnosticValidator_InvalidRelativePath {
        get {
            return ResourceManager.GetString("ImageBuilderError_DiagnosticValidator_InvalidRelativePath", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Value '{0}' cannot be converted to {1}. Source: {2}, Destination: {3}, Attribute: {4}.
    ///  
    /// </summary>
    internal static string ImageBuilderError_DiagnosticValidator_ValueCannotBeConverted {
        get {
            return ResourceManager.GetString("ImageBuilderError_DiagnosticValidator_ValueCannotBeConverted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Value '{0}' is invalid because the specified value must be greater than 0. Source: {1}, Destination: {2}, Attribute: {3}.
    ///  
    /// </summary>
    internal static string ImageBuilderError_DiagnosticValidator_ValueMustBeGreaterThanZero {
        get {
            return ResourceManager.GetString("ImageBuilderError_DiagnosticValidator_ValueMustBeGreaterThanZero", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Path to file store cannot be an empty string. Source: {0}, Destination: {1}, Attribute: {2}.
    ///  
    /// </summary>
    internal static string ImageBuilderError_DiagnosticValidator_EmptyFilePathNotAllowed {
        get {
            return ResourceManager.GetString("ImageBuilderError_DiagnosticValidator_EmptyFilePathNotAllowed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Path to file store '{0}' is not a valid URI. Source: {1}, Destination: {2}, Attribute: {3}. Exception: {4}
    ///  
    /// </summary>
    internal static string ImageBuilderError_DiagnosticValidator_PathNotValidUri {
        get {
            return ResourceManager.GetString("ImageBuilderError_DiagnosticValidator_PathNotValidUri", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    '{0}' is not a valid value for the 'Version' attribute of ETW ManifestDataPackage {1} in Service Manifest {2}. The value for the 'Version' attribute must be a valid version number as defined by the .NET framework Version class.
    ///  
    /// </summary>
    internal static string ImageBuilderError_DiagnosticValidator_InvalidETWManifestDataPackageVersion {
        get {
            return ResourceManager.GetString("ImageBuilderError_DiagnosticValidator_InvalidETWManifestDataPackageVersion", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} with {1} '{2}' is found more than once. Multiple {0} with the same {1} is not allowed.
    ///  
    /// </summary>
    internal static string ImageBuilderError_DuplicateElementFound {
        get {
            return ResourceManager.GetString("ImageBuilderError_DuplicateElementFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Parameter with the name '{0}' is found more than once. Duplicate parameters are not allowed.
    ///  
    /// </summary>
    internal static string ImageBuilderError_DuplicateParametersFound {
        get {
            return ResourceManager.GetString("ImageBuilderError_DuplicateParametersFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The EntryPoint {0} is not found.
    ///  
    /// </summary>
    internal static string ImageBuilderError_EntryPointNotFound {
        get {
            return ResourceManager.GetString("ImageBuilderError_EntryPointNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Exception while parsing XML file: {0}. Check if XML content is well formed by comparing against the service model schema (ServiceFabricServiceModel.xsd) which is shipped with the SDK. By default, the schema file is installed to 'C:\Program Files\Microsoft SDKs\Service Fabric\schemas\ServiceFabricServiceModel.xsd'.
    ///  
    /// </summary>
    internal static string ImageBuilderError_ErrorParsingXmlFile {
        get {
            return ResourceManager.GetString("ImageBuilderError_ErrorParsingXmlFile", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The Image Builder operation was canceled because {0} was locked by another process.
    ///  
    /// </summary>
    internal static string ImageBuilderError_FailedToAcquireLock {
        get {
            return ResourceManager.GetString("ImageBuilderError_FailedToAcquireLock", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The BuildLayout of the application in {0} is invalid. File {1} is missing.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidBuildLayout_MissingApplicationManifest {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidBuildLayout_MissingApplicationManifest", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The BuildLayout of the application in {0} is invalid. {1} is missing for service {2}.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidBuildLayout_MissingResourceForService {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidBuildLayout_MissingResourceForService", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} is not a valid XML file.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidXmlFile {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidXmlFile", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Load balancing metric name must not be empty.
    ///  
    /// </summary>
    internal static string ImageBuilderError_LoadBalancingMetricNameEmpty {
        get {
            return ResourceManager.GetString("ImageBuilderError_LoadBalancingMetricNameEmpty", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Value of LowKey has to be less than HighKey. LowKey: {0}, HighKey: {1}.
    ///  
    /// </summary>
    internal static string ImageBuilderError_LowKeyGreaterThanHighKey {
        get {
            return ResourceManager.GetString("ImageBuilderError_LowKeyGreaterThanHighKey", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Value of MinReplicaSetSize has to be less than TargetReplicaSetSize. MinReplicaSetSize: {0}, TargetReplicaSetSize: {1}.
    ///  
    /// </summary>
    internal static string ImageBuilderError_MinReplicaGreaterThanTargetReplica {
        get {
            return ResourceManager.GetString("ImageBuilderError_MinReplicaGreaterThanTargetReplica", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The content in {0} Name:{1} and Version:{2} in Service Manifest '{3}' has changed, but the version number is the same.
    ///  
    /// </summary>
    internal static string ImageBuilderError_PackageModfiedWithoutChangingVersion {
        get {
            return ResourceManager.GetString("ImageBuilderError_PackageModfiedWithoutChangingVersion", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Service group member name must not be empty.
    ///  
    /// </summary>
    internal static string ImageBuilderError_ServiceGroupMemberNameEmpty {
        get {
            return ResourceManager.GetString("ImageBuilderError_ServiceGroupMemberNameEmpty", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Service group member Service Type name must not be empty.
    ///  
    /// </summary>
    internal static string ImageBuilderError_ServiceGroupServiceTypeNameEmpty {
        get {
            return ResourceManager.GetString("ImageBuilderError_ServiceGroupServiceTypeNameEmpty", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Service Manifest with Name:{0} and Version:{1} has changed, but the version number is the same.
    ///  
    /// </summary>
    internal static string ImageBuilderError_ServiceManifestModfiedWithoutChangingVersion {
        get {
            return ResourceManager.GetString("ImageBuilderError_ServiceManifestModfiedWithoutChangingVersion", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Filename:{0}
    ///  
    /// </summary>
    internal static string ImageBuilderError_FileName {
        get {
            return ResourceManager.GetString("ImageBuilderError_FileName", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    RunAsPolicy with SetupEntryPoint type is specified for CodePackage {0} that does not contain SetupEntryPoint.
    ///  
    /// </summary>
    internal static string ImageBuilderError_SetupRunas {
        get {
            return ResourceManager.GetString("ImageBuilderError_SetupRunas", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid number of RunasPolicies with EntryPointTypes specified for CodePackage {0}. CodePackage can either have at most one RunAsPolicy with EntryPointType All or at most one of each EntryPointType Setup and Main.
    ///  
    /// </summary>
    internal static string ImageBuilderError_RunasPolicyCount {
        get {
            return ResourceManager.GetString("ImageBuilderError_RunasPolicyCount", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid use of UseServiceFabricReplicatedStore attribute in ApplicationManifest.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidReplicatedStoreUsage {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidReplicatedStoreUsage", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The given path '{0}' should not start with the reserved directory '{1}'.
    ///  
    /// </summary>
    internal static string ImageBuilderError_ReservedDirectoryName {
        get {
            return ResourceManager.GetString("ImageBuilderError_ReservedDirectoryName", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The destination directory '{0}' for downloading application package from '{1}' doesn't exist.
    ///  
    /// </summary>
    internal static string ImageBuilderError_DownloadDestinationDirectoryNotFound {
        get {
            return ResourceManager.GetString("ImageBuilderError_DownloadDestinationDirectoryNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} does not exist.
    ///  
    /// </summary>
    internal static string ImageStoreError_DoesNotExistError {
        get {
            return ResourceManager.GetString("ImageStoreError_DoesNotExistError", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Execution timed out for {0}.
    ///  
    /// </summary>
    internal static string ImageStoreError_ExecutionTimedOut {
        get {
            return ResourceManager.GetString("ImageStoreError_ExecutionTimedOut", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Failed to copy {0} items while copying from source {1} to destination {2}
    ///  
    /// </summary>
    internal static string ImageStoreError_FailedToCopy {
        get {
            return ResourceManager.GetString("ImageStoreError_FailedToCopy", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid destination folder name specified
    ///  
    /// </summary>
    internal static string ImageStoreError_InvalidDestinationFolderSpecified {
        get {
            return ResourceManager.GetString("ImageStoreError_InvalidDestinationFolderSpecified", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid Image Store URI scheme '{0}' provided.
    ///  
    /// </summary>
    internal static string ImageStoreError_InvalidImageStoreUriScheme {
        get {
            return ResourceManager.GetString("ImageStoreError_InvalidImageStoreUriScheme", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid parameter specified.
    ///  
    /// </summary>
    internal static string ImageStoreError_InvalidParameterSpecified {
        get {
            return ResourceManager.GetString("ImageStoreError_InvalidParameterSpecified", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid source folder name specified
    ///  
    /// </summary>
    internal static string ImageStoreError_InvalidSourceFolderSpecified {
        get {
            return ResourceManager.GetString("ImageStoreError_InvalidSourceFolderSpecified", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    There was an IOException in the ImageStore.
    ///  
    /// </summary>
    internal static string ImageStoreError_IOException {
        get {
            return ResourceManager.GetString("ImageStoreError_IOException", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} failed because of {1}.
    ///  
    /// </summary>
    internal static string ImageStoreError_OperationFailed {
        get {
            return ResourceManager.GetString("ImageStoreError_OperationFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unaccessible Image Store URI '{0}' specified.
    ///  
    /// </summary>
    internal static string ImageStoreError_UnaccessibleImageStore {
        get {
            return ResourceManager.GetString("ImageStoreError_UnaccessibleImageStore", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The percentage value must be between 0 and 100. 
    ///  
    /// </summary>
    internal static string Error_InvalidPercentageValue {
        get {
            return ResourceManager.GetString("Error_InvalidPercentageValue", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cluster package successfully registered
    ///  
    /// </summary>
    internal static string Info_RegisterClusterPackageSucceeded {
        get {
            return ResourceManager.GetString("Info_RegisterClusterPackageSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Service Fabric package successfully registered
    ///  
    /// </summary>
    internal static string Info_RegisterServiceFabricPackageSucceeded {
        get {
            return ResourceManager.GetString("Info_RegisterServiceFabricPackageSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Registering service fabric package...
    ///  
    /// </summary>
    internal static string Info_RegisteringServiceFabricPackage {
        get {
            return ResourceManager.GetString("Info_RegisteringServiceFabricPackage", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Resume cluster upgrade succeeded
    ///  
    /// </summary>
    internal static string Info_ResumeClusterUpgradeSucceeded {
        get {
            return ResourceManager.GetString("Info_ResumeClusterUpgradeSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Code package successfully copied.
    ///  
    /// </summary>
    internal static string Info_CopyCodePackageSucceeded {
        get {
            return ResourceManager.GetString("Info_CopyCodePackageSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Copying code package to imagestore...
    ///  
    /// </summary>
    internal static string Info_CopyingCodePackageToImageStore {
        get {
            return ResourceManager.GetString("Info_CopyingCodePackageToImageStore", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Config package successfully copied.
    ///  
    /// </summary>
    internal static string Info_CopyConfigPackageSucceeded {
        get {
            return ResourceManager.GetString("Info_CopyConfigPackageSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Copying config package to imagestore...
    ///  
    /// </summary>
    internal static string Info_CopyingConfigPackageToImageStore {
        get {
            return ResourceManager.GetString("Info_CopyingConfigPackageToImageStore", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Code package successfully removed.
    ///  
    /// </summary>
    internal static string Info_RemoveCodePackageSucceeded {
        get {
            return ResourceManager.GetString("Info_RemoveCodePackageSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Config Package successfully removed.
    ///  
    /// </summary>
    internal static string Info_RemoveConfigPackageSucceeded {
        get {
            return ResourceManager.GetString("Info_RemoveConfigPackageSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Successfully removed node state for node '{0}'
    ///  
    /// </summary>
    internal static string Info_NodeStateRemoveSucceeded_Formatted {
        get {
            return ResourceManager.GetString("Info_NodeStateRemoveSucceeded_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unregister cluster package succeeded
    ///  
    /// </summary>
    internal static string Info_UnregisterClusterPackageSucceeded {
        get {
            return ResourceManager.GetString("Info_UnregisterClusterPackageSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Successfully set service placement for node '{0}'
    ///  
    /// </summary>
    internal static string Info_SetNodeServicePlacementSucceeded {
        get {
            return ResourceManager.GetString("Info_SetNodeServicePlacementSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    PowerShell timeout in seconds cannot be negative or zero
    ///  
    /// </summary>
    internal static string Error_InvalidPowershellTimeout {
        get {
            return ResourceManager.GetString("Error_InvalidPowershellTimeout", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    PowerShell parameter cannot be negative
    ///  
    /// </summary>
    internal static string Error_InvalidPowershellParameter_Negative {
        get {
            return ResourceManager.GetString("Error_InvalidPowershellParameter_Negative", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The Fabric client PartitionLocationCacheLimit must be a positive value. Provided value is '{0}'.
    ///  
    /// </summary>
    internal static string Error_InvalidFabricClientPartitionLocationCacheLimit {
        get {
            return ResourceManager.GetString("Error_InvalidFabricClientPartitionLocationCacheLimit", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The Fabric client settings specified timeout has an invalid value: {0}.
    ///  
    /// </summary>
    internal static string Error_InvalidFabricClientSettingsTimeout {
        get {
            return ResourceManager.GetString("Error_InvalidFabricClientSettingsTimeout", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Incorrect index
    ///  
    /// </summary>
    internal static string Error_IncorrectIndex {
        get {
            return ResourceManager.GetString("Error_IncorrectIndex", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid Count
    ///  
    /// </summary>
    internal static string Error_InvalidCount {
        get {
            return ResourceManager.GetString("Error_InvalidCount", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid items
    ///  
    /// </summary>
    internal static string Error_InvalidItems {
        get {
            return ResourceManager.GetString("Error_InvalidItems", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid Keys
    ///  
    /// </summary>
    internal static string Error_InvalidKeys {
        get {
            return ResourceManager.GetString("Error_InvalidKeys", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid Values
    ///  
    /// </summary>
    internal static string Error_InvalidValues {
        get {
            return ResourceManager.GetString("Error_InvalidValues", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Array must not be null
    ///  
    /// </summary>
    internal static string Error_NullArray {
        get {
            return ResourceManager.GetString("Error_NullArray", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    items must not be null
    ///  
    /// </summary>
    internal static string Error_NullItems {
        get {
            return ResourceManager.GetString("Error_NullItems", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    keyPrefixMatch must not be null
    ///  
    /// </summary>
    internal static string Error_NullKeyPrefix {
        get {
            return ResourceManager.GetString("Error_NullKeyPrefix", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    keys must not be null
    ///  
    /// </summary>
    internal static string Error_NullKeys {
        get {
            return ResourceManager.GetString("Error_NullKeys", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    existentKey must not be null
    ///  
    /// </summary>
    internal static string Error_NullExistentKey {
        get {
            return ResourceManager.GetString("Error_NullExistentKey", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    newKey must not be null
    ///  
    /// </summary>
    internal static string Error_NullNewKey {
        get {
            return ResourceManager.GetString("Error_NullNewKey", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cluster connection timeout. Please check if cluster is up and running, and also make sure connection endpoints are correct
    ///  
    /// </summary>
    internal static string Error_ClusterConnectionTimeout {
        get {
            return ResourceManager.GetString("Error_ClusterConnectionTimeout", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    FabricDCA was unable to dispose of the {0} timer.
    ///  
    /// </summary>
    internal static string DCAError_DisposeTimerFailed_Formatted {
        get {
            return ResourceManager.GetString("DCAError_DisposeTimerFailed_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Task name was a wildcard but event name was not
    ///  
    /// </summary>
    internal static string DCAError_EventNameNotAWildcard {
        get {
            return ResourceManager.GetString("DCAError_EventNameNotAWildcard", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    FabricDCA was unable to parse filter '{0}'. The format '*.<eventType>' is not supported for DCA filters.
    ///  
    /// </summary>
    internal static string DCAError_FormatNotSupported_Formatted {
        get {
            return ResourceManager.GetString("DCAError_FormatNotSupported_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    FabricDCA was unable to parse filter '{0}'. The filter has an invalid number of components.
    ///  
    /// </summary>
    internal static string DCAError_InvalidComponentNumber_Formatted {
        get {
            return ResourceManager.GetString("DCAError_InvalidComponentNumber_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Pending event count is not zero.
    ///  
    /// </summary>
    internal static string DCAError_NonZeroPendingEventCount {
        get {
            return ResourceManager.GetString("DCAError_NonZeroPendingEventCount", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ProcessTraceEvent called before EtlFileReadEvent is handled
    ///  
    /// </summary>
    internal static string DCAError_ProcessTraceEventCalledUnexpectedly {
        get {
            return ResourceManager.GetString("DCAError_ProcessTraceEventCalledUnexpectedly", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    FabricDCA was unable to set the event to signal that it has stopped.
    ///  
    /// </summary>
    internal static string DCAError_SignalEventToStopFailed {
        get {
            return ResourceManager.GetString("DCAError_SignalEventToStopFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    FabricDCA was unable to set the event to indicate that it has been asked to stop
    ///  
    /// </summary>
    internal static string DCAError_SignalEventToStopFailed_2 {
        get {
            return ResourceManager.GetString("DCAError_SignalEventToStopFailed_2", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    FabricDCA was unable to start the {0} timer.
    ///  
    /// </summary>
    internal static string DCAError_StartTimerFailed_Formatted {
        get {
            return ResourceManager.GetString("DCAError_StartTimerFailed_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    FabricDCA was unable to stop the {0} timer.
    ///  
    /// </summary>
    internal static string DCAError_StopTimerFailed_Formatted {
        get {
            return ResourceManager.GetString("DCAError_StopTimerFailed_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid timestamp
    ///  
    /// </summary>
    internal static string Error_InvalidTimestamp {
        get {
            return ResourceManager.GetString("Error_InvalidTimestamp", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The ETL file name {0} is in an unexpected format.
    ///  
    /// </summary>
    internal static string ETLReaderError_UnexpectedETLFileFomat_formatted {
        get {
            return ResourceManager.GetString("ETLReaderError_UnexpectedETLFileFomat_formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The parameter cannot be empty.
    ///  
    /// </summary>
    internal static string ETLReaderError_EmptyParameter {
        get {
            return ResourceManager.GetString("ETLReaderError_EmptyParameter", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The value cannot be empty.
    ///  
    /// </summary>
    internal static string ETLReaderError_EmptyValue {
        get {
            return ResourceManager.GetString("ETLReaderError_EmptyValue", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    An error occurred while processing traces.
    ///  
    /// </summary>
    internal static string ETLReaderError_ErrorProcessingTraces {
        get {
            return ResourceManager.GetString("ETLReaderError_ErrorProcessingTraces", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The file name {0} is incorrect because the version component of the name does not contain {1} parts.
    ///  
    /// </summary>
    internal static string ETLReaderError_IncorrectVersionComponentInFileName_formatted {
        get {
            return ResourceManager.GetString("ETLReaderError_IncorrectVersionComponentInFileName_formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The file name {0} is incorrect because its version component could not be parsed.
    ///  
    /// </summary>
    internal static string ETLReaderError_InvalidFileName_formatted {
        get {
            return ResourceManager.GetString("ETLReaderError_InvalidFileName_formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The manifest document was invalid: {0}.
    ///  
    /// </summary>
    internal static string ETLReaderError_InvalidManifestDocument_Formatted {
        get {
            return ResourceManager.GetString("ETLReaderError_InvalidManifestDocument_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The manifest file name {0} is incorrect because it does not contain an '_' character after the standard prefix.
    ///  
    /// </summary>
    internal static string ETLReaderError_InvalidManifestFileName_formatted {
        get {
            return ResourceManager.GetString("ETLReaderError_InvalidManifestFileName_formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    inputProvider is not an XmlElement
    ///  
    /// </summary>
    internal static string ETLReaderError_InvalidXmlElement_InputProvider {
        get {
            return ResourceManager.GetString("ETLReaderError_InvalidXmlElement_InputProvider", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    inputStringTable is not an XmlElement
    ///  
    /// </summary>
    internal static string ETLReaderError_InvalidXmlElement_InputStringTable {
        get {
            return ResourceManager.GetString("ETLReaderError_InvalidXmlElement_InputStringTable", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The manifest file '{0}' was not found.
    ///  
    /// </summary>
    internal static string ETLReaderError_ManifestFileNotFound_Formatted {
        get {
            return ResourceManager.GetString("ETLReaderError_ManifestFileNotFound_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    missing '{0}' element
    ///  
    /// </summary>
    internal static string ETLReaderError_MissingElement_Formatted {
        get {
            return ResourceManager.GetString("ETLReaderError_MissingElement_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The ETL file name {0} does not begin with a standard prefix.
    ///  
    /// </summary>
    internal static string ETLReaderError_MustBeginWithStandardPrefix_formatted {
        get {
            return ResourceManager.GetString("ETLReaderError_MustBeginWithStandardPrefix_formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    There must be at least one subscriber to EventRead.
    ///  
    /// </summary>
    internal static string ETLReaderError_NoSubscribersForEventRead {
        get {
            return ResourceManager.GetString("ETLReaderError_NoSubscribersForEventRead", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The parameter cannot exceed {0} characters.
    ///  
    /// </summary>
    internal static string ETLReaderError_ParameterExceedsMax_Formatted {
        get {
            return ResourceManager.GetString("ETLReaderError_ParameterExceedsMax_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The reader is already started.
    ///  
    /// </summary>
    internal static string ETLReaderError_ReaderAlreadyStarted {
        get {
            return ResourceManager.GetString("ETLReaderError_ReaderAlreadyStarted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The session cannot be started again.
    ///  
    /// </summary>
    internal static string ETLReaderError_SessionAlreadyStarted {
        get {
            return ResourceManager.GetString("ETLReaderError_SessionAlreadyStarted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The start time must be before the end time.
    ///  
    /// </summary>
    internal static string ETLReaderError_StartTimeGreaterThanEndTime {
        get {
            return ResourceManager.GetString("ETLReaderError_StartTimeGreaterThanEndTime", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Stop cannot be called from inside an EventRead handler.
    ///  
    /// </summary>
    internal static string ETLReaderError_StopCalledFromEventreadHandler {
        get {
            return ResourceManager.GetString("ETLReaderError_StopCalledFromEventreadHandler", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The trace file was not found
    ///  
    /// </summary>
    internal static string ETLReaderError_TracefileNotFound {
        get {
            return ResourceManager.GetString("ETLReaderError_TracefileNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Manifest file {0} was unexpectedly returned as a match for ETL file {1}.
    ///  
    /// </summary>
    internal static string ETLReaderError_UnexpectedManifestFileReturned_formatted {
        get {
            return ResourceManager.GetString("ETLReaderError_UnexpectedManifestFileReturned_formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    unknown template {0}
    ///  
    /// </summary>
    internal static string ETLReaderError_UnknownTemplate_Formatted {
        get {
            return ResourceManager.GetString("ETLReaderError_UnknownTemplate_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Could not find Fabric code path
    ///  
    /// </summary>
    internal static string Error_FabricCodePathNotFound {
        get {
            return ResourceManager.GetString("Error_FabricCodePathNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Could not find file {0} in Fabric code path
    ///  
    /// </summary>
    internal static string Error_FabricCodeFileNotFound {
        get {
            return ResourceManager.GetString("Error_FabricCodeFileNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cluster manifest validation failed with exception {0}. ClusterManifestPath: {1}
    ///  
    /// </summary>
    internal static string ImageBuilderError_ClusterManifestValidationFailed {
        get {
            return ResourceManager.GetString("ImageBuilderError_ClusterManifestValidationFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Both codePath and configPath cannot be empty
    ///  
    /// </summary>
    internal static string ImageBuilderError_CodeAndConfigPathNotSpecified {
        get {
            return ResourceManager.GetString("ImageBuilderError_CodeAndConfigPathNotSpecified", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The upgrade is not allowed due to exception {0}. CurrentFabricVersion:{1}, TargetFabricVersion:{2}
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidConfigFabricUpgrade {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidConfigFabricUpgrade", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The file name '{0}' is invalid. File should be Microsoft Azure Service Fabric.<MajorVersion>.<MinorVersion>.<BuildNumber>.<HotfixVersion>.msi
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidMSIFileName {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidMSIFileName", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The cluster manifest version must be a non-empty string and cannot contain ":".
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidClusterManifestVersion {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidClusterManifestVersion", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Path {0} is not valid
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidPath {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidPath", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    NameUri has to be an absolute URI
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidNameUri {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidNameUri", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The InstanceCount value '{0}' is invalid. InstanceCount should be a positive integer or -1.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidInstanceCountValue {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidInstanceCountValue", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Folder '{0}' has assembly with name '{1}' which is not allowed. ApplicationPackage cannot package Fabric assemblies or use the same name.
    ///  
    /// </summary>
    internal static string ImageBuilderError_FolderContentHasFabricBinaries {
        get {
            return ResourceManager.GetString("ImageBuilderError_FolderContentHasFabricBinaries", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Reliable session not found
    ///  
    /// </summary>
    internal static string Error_ReliableSessionNotFound {
        get {
            return ResourceManager.GetString("Error_ReliableSessionNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Reliable session queue empty
    ///  
    /// </summary>
    internal static string Error_ReliableSessionQueueEmpty {
        get {
            return ResourceManager.GetString("Error_ReliableSessionQueueEmpty", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Reliable session quota exceeded
    ///  
    /// </summary>
    internal static string Error_ReliableSessionQuotaExceeded {
        get {
            return ResourceManager.GetString("Error_ReliableSessionQuotaExceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Reliable session service faulted
    ///  
    /// </summary>
    internal static string Error_ReliableSessionServiceFaulted {
        get {
            return ResourceManager.GetString("Error_ReliableSessionServiceFaulted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Reliable session already exists
    ///  
    /// </summary>
    internal static string Error_ReliableSessionAlreadyExists {
        get {
            return ResourceManager.GetString("Error_ReliableSessionAlreadyExists", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Reliable session cannot connect
    ///  
    /// </summary>
    internal static string Error_ReliableSessionCannotConnect {
        get {
            return ResourceManager.GetString("Error_ReliableSessionCannotConnect", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Reliable session manager already listening
    ///  
    /// </summary>
    internal static string Error_ReliableSessionManagerAlreadyListening {
        get {
            return ResourceManager.GetString("Error_ReliableSessionManagerAlreadyListening", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Reliable session manager exists
    ///  
    /// </summary>
    internal static string Error_ReliableSessionManagerExists {
        get {
            return ResourceManager.GetString("Error_ReliableSessionManagerExists", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Reliable session manager not found
    ///  
    /// </summary>
    internal static string Error_ReliableSessionManagerNotFound {
        get {
            return ResourceManager.GetString("Error_ReliableSessionManagerNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Reliable session manager not listening
    ///  
    /// </summary>
    internal static string Error_ReliableSessionManagerNotListening {
        get {
            return ResourceManager.GetString("Error_ReliableSessionManagerNotListening", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Reliable session invalid target partition provided
    ///  
    /// </summary>
    internal static string Error_ReliableSessionInvalidTargetPartition {
        get {
            return ResourceManager.GetString("Error_ReliableSessionInvalidTargetPartition", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Reliable session rejected
    ///  
    /// </summary>
    internal static string Error_ReliableSessionRejected {
        get {
            return ResourceManager.GetString("Error_ReliableSessionRejected", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Reliable session transport startup failure
    ///  
    /// </summary>
    internal static string Error_ReliableSessionTransportStartupFailure {
        get {
            return ResourceManager.GetString("Error_ReliableSessionTransportStartupFailure", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Only one affinity service is supported.
    ///  
    /// </summary>
    internal static string ImageBuilderError_MoreThanOneAffinity {
        get {
            return ResourceManager.GetString("ImageBuilderError_MoreThanOneAffinity", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The affinity service name is not valid.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidAffinityServiceName {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidAffinityServiceName", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Every node service should not has affinity.
    ///  
    /// </summary>
    internal static string ImageBuilderError_EveryNodeServiceShouldNotHasAffinity {
        get {
            return ResourceManager.GetString("ImageBuilderError_EveryNodeServiceShouldNotHasAffinity", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The UniformInt64Partition with LowKey:{0}, HighKey:{1} and PartitionCount:{2} is invalid.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidUniformInt64Partition {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidUniformInt64Partition", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid correlation, the input should follow the pattern @("<correlationString1>","<correlationString2>",...), but currently only one correlation is supported. Each <correlationString> is <serviceUri>,<correlationType>. correlationType should be one of the following: AlignedAffinity, or NonAlignedAffinity. One example is @(“fabric:/MyApp/AnotherService,AlignedAffinity”).
    ///  
    /// </summary>
    internal static string Error_InvalidCorrelationSpecification {
        get {
            return ResourceManager.GetString("Error_InvalidCorrelationSpecification", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid load metric, the input should follow the pattern @("<metricString1>","<metricString2>",...), each <metricString> is <metricName>,<metricWeight>,<PrimaryDefaultLoad>,<SecondaryDefaultLoad> for stateful services, or <metricName>,<metricWeight>,<DefaultLoad> for stateless services. metricWeight should be one of the following: High, Medium, Low, or Zero. One example is @(“Memory,High,10,5”,”Disk,Low,5,2”).
    ///  
    /// </summary>
    internal static string Error_InvalidMetricSpecification {
        get {
            return ResourceManager.GetString("Error_InvalidMetricSpecification", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid scaling policy for service specified.
    ///  
    /// </summary>
    internal static string Error_InvalidServiceScalingPolicy {
        get {
            return ResourceManager.GetString("Error_InvalidServiceScalingPolicy", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid placement policy, the input should follow the pattern @("<policyString1>","<policyString2>",...), each <policyString> is <policyType>,<faultDomainPrefix>. policyType should be one of the following: InvalidDomain, RequiredDomain, PreferedPrimaryDomain, or RequiredDomainDistribution. faultDomainPrefix is a URI representing one or more fault domain IDs. And when RequiredDomainDistribution is the policy type, no faultDomainPrefix is needed. One example is @(“RequiredDomain,fd:/dc/rack”, “InvalidDomain,fd:/dc2/rack2”,"RequiredDomainDistribution").
    ///  
    /// </summary>
    internal static string Error_InvalidPlacementPolicySpecification {
        get {
            return ResourceManager.GetString("Error_InvalidPlacementPolicySpecification", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Failed to test path {0}
    ///  
    /// </summary>
    internal static string Error_TestPathFailed {
        get {
            return ResourceManager.GetString("Error_TestPathFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Failed to join path {0} with {1}
    ///  
    /// </summary>
    internal static string Error_JoinPathFailed {
        get {
            return ResourceManager.GetString("Error_JoinPathFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Failed to read registry key under path {0} with name {1}
    ///  
    /// </summary>
    internal static string Error_ReadRegistryKeyFailed {
        get {
            return ResourceManager.GetString("Error_ReadRegistryKeyFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Negative time duration '{0}'.specified
    ///  
    /// </summary>
    internal static string ImageBuilderError_NegativeTimeDuration {
        get {
            return ResourceManager.GetString("ImageBuilderError_NegativeTimeDuration", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Non-server cluster manifest validation is not supported in PowerShell. Please use AzureValidator tool.
    ///  
    /// </summary>
    internal static string Error_NonServerClusterManifestValidationNotSupport {
        get {
            return ResourceManager.GetString("Error_NonServerClusterManifestValidationNotSupport", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Interactive logon and user profile loading is not supported for specified account type {0}
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidLogonOption {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidLogonOption", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    NTLMAuthenticationPolicy cannot be enabled for user '{0}'. The policy can be enabled only for account type '{1}'.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidNTLMAuthenticationEnabled {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidNTLMAuthenticationEnabled", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid Service Type health policy, the input should follow the pattern "<MaxPercentUnhealthyPartitionsPerService>,<MaxPercentUnhealthyReplicasPerPartition>,<MaxPercentUnhealthyServices>". And each value is byte. One example is “5,10,5”.
    ///  
    /// </summary>
    internal static string Error_InvalidServiceTypeHealthPolicySpecification {
        get {
            return ResourceManager.GetString("Error_InvalidServiceTypeHealthPolicySpecification", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid application health policy, the input should follow the pattern "<ConsiderWarningAsError(bool)>;<MaxPercentUnhealthyDeployedApplications(byte)>;<DefaultServiceTypeHealthPolicy>;<ServiceTypeHealthPolicyMap>;". To specify Service Type health policy, use format "<MaxPercentUnhealthyPartitionsPerService>,<MaxPercentUnhealthyReplicasPerPartition>,<MaxPercentUnhealthyServices>". To Service Type health policy map, use format "<ServiceTypeName>=<ServiceTypePolicy>" for each Service Type, and separate entries with ";". One example is “true;0;5,10,5;ServiceType1=10,10,10;ServiceType2=0,0,10”.
    ///  
    /// </summary>
    internal static string Error_InvalidApplicationHealthPolicySpecification {
        get {
            return ResourceManager.GetString("Error_InvalidApplicationHealthPolicySpecification", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Fabric setup operation failed with exit code {0}, run with -Verbose to see details
    ///  
    /// </summary>
    internal static string Error_FabricSetupOperationFailed {
        get {
            return ResourceManager.GetString("Error_FabricSetupOperationFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    dSTS option not supported in the current configuration
    ///  
    /// </summary>
    internal static string Error_dSTSOptionNotSupported {
        get {
            return ResourceManager.GetString("Error_dSTSOptionNotSupported", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Getting security token from dSTS failed
    ///  
    /// </summary>
    internal static string Error_GetSecurityTokenFailed {
        get {
            return ResourceManager.GetString("Error_GetSecurityTokenFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Getting metadata for dSTS failed
    ///  
    /// </summary>
    internal static string Error_GetMetadataFailed {
        get {
            return ResourceManager.GetString("Error_GetMetadataFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cannot serialize the security token
    ///  
    /// </summary>
    internal static string Error_SecurityTokenSerializationFailure {
        get {
            return ResourceManager.GetString("Error_SecurityTokenSerializationFailure", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The path '{0}' is not allowed since it is an absolute path. Only relative path is allowed.
    ///  
    /// </summary>
    internal static string ImageBuilderError_AbsolutePathNotAllowed {
        get {
            return ResourceManager.GetString("ImageBuilderError_AbsolutePathNotAllowed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The path '{0}' is not allowed since it has '..'.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidRelativePath {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidRelativePath", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Successfully accepted request for disabling node '{0}'
    ///  
    /// </summary>
    internal static string Info_DisableNodeSucceeded {
        get {
            return ResourceManager.GetString("Info_DisableNodeSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Successfully accepted request for enabling node '{0}'
    ///  
    /// </summary>
    internal static string Info_EnableNodeSucceeded {
        get {
            return ResourceManager.GetString("Info_EnableNodeSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Successfully accepted request for repairing all partitions
    ///  
    /// </summary>
    internal static string Info_RepairPartitionsSucceeded {
        get {
            return ResourceManager.GetString("Info_RepairPartitionsSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Successfully accepted request for repairing partition '{0}'
    ///  
    /// </summary>
    internal static string Info_RepairPartitionSucceeded {
        get {
            return ResourceManager.GetString("Info_RepairPartitionSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Successfully accepted request for repairing partitions for service '{0}'
    ///  
    /// </summary>
    internal static string Info_RepairServicePartitionsSucceeded {
        get {
            return ResourceManager.GetString("Info_RepairServicePartitionsSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Successfully accepted request for repairing system services partitions
    ///  
    /// </summary>
    internal static string Info_RepairSystemPartitionsSucceeded {
        get {
            return ResourceManager.GetString("Info_RepairSystemPartitionsSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Successfully accepted request for resetting partition load
    ///  
    /// </summary>
    internal static string Info_ResetPartitionLoadSucceeded {
        get {
            return ResourceManager.GetString("Info_ResetPartitionLoadSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Successfully accepted request to toggle verbosity for health reporting on the service.
    ///  
    /// </summary>
    internal static string Info_ToggleVerboseServicePlacementHealthReportingSucceeded {
        get {
            return ResourceManager.GetString("Info_ToggleVerboseServicePlacementHealthReportingSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unknown parameter set '{0}'
    ///  
    /// </summary>
    internal static string Error_ReplicaHealthReportUnknownParamSet {
        get {
            return ResourceManager.GetString("Error_ReplicaHealthReportUnknownParamSet", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid MemberDescription, the input should follow the pattern @(@{"ServiceName"=<serviceName>;"ServiceTypeName"=<serviceType>;"LoadMetrics"=<metrics>). ServiceName and ServiceType are required. Example: @(@{"ServiceName"="fabric:/myapp/calculator/svc1;"ServiceTypeName"="CalculatorServiceType"}).
    ///  
    /// </summary>
    internal static string Error_InvalidMemberDescriptionSpecification {
        get {
            return ResourceManager.GetString("Error_InvalidMemberDescriptionSpecification", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Update service group succeeded
    ///  
    /// </summary>
    internal static string Info_UpdateServiceGroupSucceeded {
        get {
            return ResourceManager.GetString("Info_UpdateServiceGroupSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Remove service group succeeded
    ///  
    /// </summary>
    internal static string Info_RemoveServiceGroupSucceeded {
        get {
            return ResourceManager.GetString("Info_RemoveServiceGroupSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The MSI file is invalid.
    ///  
    /// </summary>
    internal static string Error_ImageBuilderInvalidMsiFile {
        get {
            return ResourceManager.GetString("Error_ImageBuilderInvalidMsiFile", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Health reports are batched and sent every '{0}' seconds. To change, create new ClusterConnection with parameter SendHealthReportIntervalInSeconds to desired value.
    ///  
    /// </summary>
    internal static string Warn_SendHealthReportIntervalNotZero {
        get {
            return ResourceManager.GetString("Warn_SendHealthReportIntervalNotZero", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The service cannot process the request because it is too busy. Please retry.
    ///  
    /// </summary>
    internal static string Error_ServiceTooBusy {
        get {
            return ResourceManager.GetString("Error_ServiceTooBusy", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Another Fabric Deployer has abandoned mutex by exiting without releasing it
    ///  
    /// </summary>
    internal static string Error_FabricDeployer_AbandonedMutex_Formatted {
        get {
            return ResourceManager.GetString("Error_FabricDeployer_AbandonedMutex_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Current package file not found
    ///  
    /// </summary>
    internal static string Error_FabricDeployer_CurrentPackageFileNotFound_Formatted {
        get {
            return ResourceManager.GetString("Error_FabricDeployer_CurrentPackageFileNotFound_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Target Installation is null
    ///  
    /// </summary>
    internal static string Error_FabricDeployer_InvalidTargetInstallation_Formatted {
        get {
            return ResourceManager.GetString("Error_FabricDeployer_InvalidTargetInstallation_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Failing deployment as test hook is found
    ///  
    /// </summary>
    internal static string Error_FabricDeployer_TestHookFound_Formatted {
        get {
            return ResourceManager.GetString("Error_FabricDeployer_TestHookFound_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cluster manifest location is null
    ///  
    /// </summary>
    internal static string Error_FabricDeployer_ClusterManifestNotFound_Formatted {
        get {
            return ResourceManager.GetString("Error_FabricDeployer_ClusterManifestNotFound_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Version is not valid
    ///  
    /// </summary>
    internal static string Error_FabricDeployer_InvalidVersion_Formatted {
        get {
            return ResourceManager.GetString("Error_FabricDeployer_InvalidVersion_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Node name and OldClusterManifestLocation can't  be null at the same time.
    ///  
    /// </summary>
    internal static string Error_FabricDeployer_NodeNameAndOldCMNotFound_Formatted {
        get {
            return ResourceManager.GetString("Error_FabricDeployer_NodeNameAndOldCMNotFound_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Node name is null
    ///  
    /// </summary>
    internal static string Error_FabricDeployer_NodeNameNotFound_Formatted {
        get {
            return ResourceManager.GetString("Error_FabricDeployer_NodeNameNotFound_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cleanup deployment cannot continue due to Fabric Host service is still running on machine {0}
    ///  
    /// </summary>
    internal static string Error_FabricDeployer_FabricHostStillRunning_Formatted {
        get {
            return ResourceManager.GetString("Error_FabricDeployer_FabricHostStillRunning_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Fabric Deployer rollback operation failed with error code {0}
    ///  
    /// </summary>
    internal static string Error_FabricDeployer_RollbackFailed_Formatted {
        get {
            return ResourceManager.GetString("Error_FabricDeployer_RollbackFailed_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Enabling firewall settings failed when creating or updating deployment
    ///  
    /// </summary>
    internal static string Error_FabricDeployer_EnableFirewallSettingsFailed_Formatted {
        get {
            return ResourceManager.GetString("Error_FabricDeployer_EnableFirewallSettingsFailed_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Failed to start performance counter collection when creating or updating deployment
    ///  
    /// </summary>
    internal static string Error_FabricDeployer_StartCounterCollectionFailed_Formatted {
        get {
            return ResourceManager.GetString("Error_FabricDeployer_StartCounterCollectionFailed_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Failed to install managed counters when creating or updating deployment
    ///  
    /// </summary>
    internal static string Error_FabricDeployer_InstallManagedCountersFailed_Formatted {
        get {
            return ResourceManager.GetString("Error_FabricDeployer_InstallManagedCountersFailed_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cluster manifest validation failed with exception {0}
    ///  
    /// </summary>
    internal static string Error_FabricDeployer_InvalidClusterManifest_Formatted {
        get {
            return ResourceManager.GetString("Error_FabricDeployer_InvalidClusterManifest_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cannot continue creating or updating deployment without infrastructure information
    ///  
    /// </summary>
    internal static string Error_FabricDeployer_InvalidInfrastructure_Formatted {
        get {
            return ResourceManager.GetString("Error_FabricDeployer_InvalidInfrastructure_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Enabling WIF failed when creating or updating deployment with claims authentication
    ///  
    /// </summary>
    internal static string Error_FabricDeployer_TVSSetupFailed_Formatted {
        get {
            return ResourceManager.GetString("Error_FabricDeployer_TVSSetupFailed_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Failed to register SPN for local machine account
    ///  
    /// </summary>
    internal static string Error_FabricDeployer_FailedToRegisterSpn_Formatted {
        get {
            return ResourceManager.GetString("Error_FabricDeployer_FailedToRegisterSpn_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Fabric Deployer failed to compare and analyze cluster manifest
    ///  
    /// </summary>
    internal static string Error_FabricDeployer_CompareAndAnalyzeFailed_Formatted {
        get {
            return ResourceManager.GetString("Error_FabricDeployer_CompareAndAnalyzeFailed_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Create service group from template succeeded
    ///  
    /// </summary>
    internal static string Info_CreateServiceGroupFromTemplateSucceeded {
        get {
            return ResourceManager.GetString("Info_CreateServiceGroupFromTemplateSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Partition {0}, replica {1}. An operation was unexpectedly received while pumping copy/replication stream.
    ///  
    /// </summary>
    internal static string Error_Unexpected_Replication {
        get {
            return ResourceManager.GetString("Error_Unexpected_Replication", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} {1} node {2} for replica {3} of partition {4}.
    ///  
    /// </summary>
    internal static string Info_ReplicaControlOperationSucceeded {
        get {
            return ResourceManager.GetString("Info_ReplicaControlOperationSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    No Replica or Instance ID provided
    ///  
    /// </summary>
    internal static string Error_InvalidReplicaOrInstanceId {
        get {
            return ResourceManager.GetString("Error_InvalidReplicaOrInstanceId", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The repair task already exists.
    ///  
    /// </summary>
    internal static string Error_RepairTaskAlreadyExists {
        get {
            return ResourceManager.GetString("Error_RepairTaskAlreadyExists", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The provided InstanceId did not match.
    ///  
    /// </summary>
    internal static string Error_InstanceIdMismatch {
        get {
            return ResourceManager.GetString("Error_InstanceIdMismatch", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The cluster did not have enough resources to perform the requested operation.
    ///  
    /// </summary>
    internal static string Error_InsufficientClusterCapacity {
        get {
            return ResourceManager.GetString("Error_InsufficientClusterCapacity", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The repair task could not be found.
    ///  
    /// </summary>
    internal static string Error_RepairTaskNotFound {
        get {
            return ResourceManager.GetString("Error_RepairTaskNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Transaction data exceeds the configured replication message size limit - ReplicatorSettings.MaxReplicationMessageSize
    ///  
    /// </summary>
    internal static string Error_TransactionTooLarge {
        get {
            return ResourceManager.GetString("Error_TransactionTooLarge", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Multithreaded usage of transactions is not allowed.
    ///  
    /// </summary>
    internal static string Error_MultithreadedTransactionsNotAllowed {
        get {
            return ResourceManager.GetString("Error_MultithreadedTransactionsNotAllowed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The replication operation is larger than the configured limit - MaxReplicationMessageSize
    ///  
    /// </summary>
    internal static string Error_ReplicationOperationTooLarge {
        get {
            return ResourceManager.GetString("Error_ReplicationOperationTooLarge", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} {1} node {2} with instance ID '{3}'
    ///  
    /// </summary>
    internal static string Info_NodeControlOperationSucceeded {
        get {
            return ResourceManager.GetString("Info_NodeControlOperationSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} request accepted for code package {4} with instance '{5}' at node {1} with Application Manifest {2}, Service Manifest {3}
    ///  
    /// </summary>
    internal static string Info_CodePackageControlOperationSucceededWithoutReplicaSelector {
        get {
            return ResourceManager.GetString("Info_CodePackageControlOperationSucceededWithoutReplicaSelector", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} {1} node {2} with instance ID '{3}', IpAddressOrFQDN '{4}' and ClusterConnectionPort '{5}'.
    ///  
    /// </summary>
    internal static string Info_StartNodeSucceeded {
        get {
            return ResourceManager.GetString("Info_StartNodeSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Modifying 'Store' or 'WindowsFabricStore' could cause deployment failures
    ///  
    /// </summary>
    internal static string Warning_ModifyingStoreContent {
        get {
            return ResourceManager.GetString("Warning_ModifyingStoreContent", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Arguments '{0}' and '{1}' both cannot be null
    ///  
    /// </summary>
    internal static string Error_TwoArgumentsNull {
        get {
            return ResourceManager.GetString("Error_TwoArgumentsNull", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Working folder for '{0}', service manifest '{1}' cannot be CodePackage or CodeBase since the package is shared.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidSharingWorkFolder {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidSharingWorkFolder", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Node has not stopped yet - a previous StopNode is still pending
    ///  
    /// </summary>
    internal static string Error_NodeHasNotStoppedYet {
        get {
            return ResourceManager.GetString("Error_NodeHasNotStoppedYet", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    DCA settings validator failed
    ///  
    /// </summary>
    internal static string Error_FabricValidator_DCASettingsValidatorFailed {
        get {
            return ResourceManager.GetString("Error_FabricValidator_DCASettingsValidatorFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Double value should be greater than or equal to {0}
    ///  
    /// </summary>
    internal static string Error_FabricValidator_DoubleValueGreaterThanEqualToInput {
        get {
            return ResourceManager.GetString("Error_FabricValidator_DoubleValueGreaterThanEqualToInput", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Double value must be in range [{0}, {1}]
    ///  
    /// </summary>
    internal static string Error_FabricValidator_DoubleValueInRange {
        get {
            return ResourceManager.GetString("Error_FabricValidator_DoubleValueInRange", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Double value should be equal to {0} or greater than or equal to {1}
    ///  
    /// </summary>
    internal static string Error_FabricValidator_DoubleValueEqualToInputOrGreaterThanEqualToInput {
        get {
            return ResourceManager.GetString("Error_FabricValidator_DoubleValueEqualToInputOrGreaterThanEqualToInput", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Duplicate parameter name {0} found in section {1} in configuration CSV
    ///  
    /// </summary>
    internal static string Error_FabricValidator_DuplicateParameterConfiguration {
        get {
            return ResourceManager.GetString("Error_FabricValidator_DuplicateParameterConfiguration", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Duplicate parameter name {0} in section {1} found in cluster manifest
    ///  
    /// </summary>
    internal static string Error_FabricValidator_DuplicateParameterManifest {
        get {
            return ResourceManager.GetString("Error_FabricValidator_DuplicateParameterManifest", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Duplicate section name {0} found in cluster manifest
    ///  
    /// </summary>
    internal static string Error_FabricValidator_DuplicateSectionManifest {
        get {
            return ResourceManager.GetString("Error_FabricValidator_DuplicateSectionManifest", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Int value {0} should be greater than or equal to Int value {1}
    ///  
    /// </summary>
    internal static string Error_FabricValidator_FirstIntParameterGreaterThanOrEqualToSecondIntParameter {
        get {
            return ResourceManager.GetString("Error_FabricValidator_FirstIntParameterGreaterThanOrEqualToSecondIntParameter", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Int value should be greater than or equal to {0}
    ///  
    /// </summary>
    internal static string Error_FabricValidator_IntValueGreaterThanEqualToInput {
        get {
            return ResourceManager.GetString("Error_FabricValidator_IntValueGreaterThanEqualToInput", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Int value should be greater than {0}
    ///  
    /// </summary>
    internal static string Error_FabricValidator_IntValueGreaterThanInput {
        get {
            return ResourceManager.GetString("Error_FabricValidator_IntValueGreaterThanInput", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Int value should be less than or equal to {0}
    ///  
    /// </summary>
    internal static string Error_FabricValidator_IntValueLessThanEqualToInput {
        get {
            return ResourceManager.GetString("Error_FabricValidator_IntValueLessThanEqualToInput", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Section {0} is not a valid configuration
    ///  
    /// </summary>
    internal static string Error_FabricValidator_InvalidSection {
        get {
            return ResourceManager.GetString("Error_FabricValidator_InvalidSection", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Not supported type {0} for property group section {1}
    ///  
    /// </summary>
    internal static string Error_FabricValidator_InvalidSectionPropertyGroupType {
        get {
            return ResourceManager.GetString("Error_FabricValidator_InvalidSectionPropertyGroupType", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Section {0} name {1} type {2} value {3} is not a valid type
    ///  
    /// </summary>
    internal static string Error_FabricValidator_InvalidType {
        get {
            return ResourceManager.GetString("Error_FabricValidator_InvalidType", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Section {0} name {1} type {2} value {3} parsing failed with exception {4}
    ///  
    /// </summary>
    internal static string Error_FabricValidator_InvalidValue {
        get {
            return ResourceManager.GetString("Error_FabricValidator_InvalidValue", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Section {0} parameter {1} found in cluster manifest but not Configurations.csv in system.fabric.management.dll.
    ///  
    /// </summary>
    internal static string Error_FabricValidator_ParamterNotFound {
        get {
            return ResourceManager.GetString("Error_FabricValidator_ParamterNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Section {0} found in cluster manifest but not Configurations.csv in system.fabric.management.dll.
    ///  
    /// </summary>
    internal static string Error_FabricValidator_SectionNotFound {
        get {
            return ResourceManager.GetString("Error_FabricValidator_SectionNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Section {0} parameter {1} value {2} validation failed with error {3}
    ///  
    /// </summary>
    internal static string Error_FabricValidator_ValueValidatorFailed {
        get {
            return ResourceManager.GetString("Error_FabricValidator_ValueValidatorFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0}:'{1}' specified by the user did not match with the value returned from the cluster '{2}'
    ///  
    /// </summary>
    internal static string Error_dSTSMismatchInMetadata {
        get {
            return ResourceManager.GetString("Error_dSTSMismatchInMetadata", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Successfully copied packages for Service Manifest {0} to node {1}
    ///  
    /// </summary>
    internal static string Info_ServicePackageDeployToNodeSucceeded {
        get {
            return ResourceManager.GetString("Info_ServicePackageDeployToNodeSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    PackageSharingPolicy must contain a valid PackageName or Scope
    ///  
    /// </summary>
    internal static string Error_InvalidPackageSharingPolicy {
        get {
            return ResourceManager.GetString("Error_InvalidPackageSharingPolicy", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Service Manifest packages could not be deployed to node because Image Cache is disabled
    ///  
    /// </summary>
    internal static string Error_PredeploymentNotAllowed {
        get {
            return ResourceManager.GetString("Error_PredeploymentNotAllowed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Double {0} = {1} must be in range [{2}, {3}]
    ///  
    /// </summary>
    internal static string Error_FabricValidator_NamedDoubleValueInRange {
        get {
            return ResourceManager.GetString("Error_FabricValidator_NamedDoubleValueInRange", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Int {0} = {1} must be in range [{2}, {3})
    ///  
    /// </summary>
    internal static string Error_FabricValidator_NamedIntValueInRangeExcludingRight {
        get {
            return ResourceManager.GetString("Error_FabricValidator_NamedIntValueInRangeExcludingRight", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid backup setting. E.g. incremental backup option is not set upfront
    ///  
    /// </summary>
    internal static string Error_InvalidBackupSetting {
        get {
            return ResourceManager.GetString("Error_InvalidBackupSetting", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Incremental backups can only be done after an initial full backup
    ///  
    /// </summary>
    internal static string Error_MissingFullBackup {
        get {
            return ResourceManager.GetString("Error_MissingFullBackup", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    A previously initiated backup is currently in progress
    ///  
    /// </summary>
    internal static string Error_BackupInProgress {
        get {
            return ResourceManager.GetString("Error_BackupInProgress", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The backup directory is not empty
    ///  
    /// </summary>
    internal static string Error_BackupDirectoryNotEmpty {
        get {
            return ResourceManager.GetString("Error_BackupDirectoryNotEmpty", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Service notification filter has already been registered at the specified name.
    ///  
    /// </summary>
    internal static string Error_DuplicateServiceNotificationFilterName {
        get {
            return ResourceManager.GetString("Error_DuplicateServiceNotificationFilterName", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The referenced Package '{0}' in PackageSharingPolicy for service manifest '{1}' does not match the specified Scope {2}.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidPackageSharingScope {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidPackageSharingScope", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Skipping ports validation as it is empty.
    ///  
    /// </summary>
    internal static string Info_FabricValidatorNodeTypeNull {
        get {
            return ResourceManager.GetString("Info_FabricValidatorNodeTypeNull", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    In node {0}, port range is invalid. StartPort number should not be greater 1024  and EndPort number should not exceed 65535.
    ///  
    /// </summary>
    internal static string Warning_FabricValidatorPortRangeInvalid {
        get {
            return ResourceManager.GetString("Warning_FabricValidatorPortRangeInvalid", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    In node {0}, {1} port number is negative.
    ///  
    /// </summary>
    internal static string Warning_FabricValidatorPortsNegative {
        get {
            return ResourceManager.GetString("Warning_FabricValidatorPortsNegative", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    In node {0}, {1} port number is not a sequence of digit. Error: {2}
    ///  
    /// </summary>
    internal static string Warning_FabricValidatorPortsNotDigit {
        get {
            return ResourceManager.GetString("Warning_FabricValidatorPortsNotDigit", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    In node {0}, {1} port number doesn't fit in an Int32. Error: {2}
    ///  
    /// </summary>
    internal static string Warning_FabricValidatorPortsNotInt32 {
        get {
            return ResourceManager.GetString("Warning_FabricValidatorPortsNotInt32", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    In node {0}, StartPort or EndPort is invalid. Port number should not be negative.
    ///  
    /// </summary>
    internal static string Warning_FabricValidatorStartEndPortNegative {
        get {
            return ResourceManager.GetString("Warning_FabricValidatorStartEndPortNegative", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    In node {0}, port range is overlapping. ApplicationEndpoints and EphemeralEndpoints should not overlap.
    ///  
    /// </summary>
    internal static string Warning_FabricValidatorPortRangeOverlapping {
        get {
            return ResourceManager.GetString("Warning_FabricValidatorPortRangeOverlapping", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    One or more ports don't have values in cluster manifest.
    ///  
    /// </summary>
    internal static string Info_FabricValidatorPortsNull {
        get {
            return ResourceManager.GetString("Info_FabricValidatorPortsNull", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    For scale min deployment, the first node in the infrastructure section of cluster manifest has to have the same IP address as the machine where the deployment is created.
    ///  
    /// </summary>
    internal static string Warning_FirstNodeAndMachineHaveDifferentIP {
        get {
            return ResourceManager.GetString("Warning_FirstNodeAndMachineHaveDifferentIP", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Seed node count can only change by one in each upgrade.
    ///  
    /// </summary>
    internal static string Warning_SeedNodeCountCanOnlyChangeByOne {
        get {
            return ResourceManager.GetString("Warning_SeedNodeCountCanOnlyChangeByOne", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Deprecated configuration is used in a cluster manifest, with SectionName: {0} and SettingName: {1}
    ///  
    /// </summary>
    internal static string Warning_DeprecatedConfigIsUsed {
        get {
            return ResourceManager.GetString("Warning_DeprecatedConfigIsUsed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ExpectedClusterSize is not a sequence of digits. Error: {1}
    ///  
    /// </summary>
    internal static string Warning_ExceptedClusterSizeIsNotDigits {
        get {
            return ResourceManager.GetString("Warning_ExceptedClusterSizeIsNotDigits", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    In cluster manifest, the value of ExpectedClusterSize must be greater than zero.
    ///  
    /// </summary>
    internal static string Warning_ExpectedClusterSizeMustBeGreaterThanZero {
        get {
            return ResourceManager.GetString("Warning_ExpectedClusterSizeMustBeGreaterThanZero", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    In cluster manifest/infrastructure manifest, the value of ExpectedClusterSize must be smaller than the number of nodes. Currently, the ExpectedClusterSize is {0} while the node count is {1}.
    ///  
    /// </summary>
    internal static string Warning_ExpectedClusterSizeSmallerThanNodeCount {
        get {
            return ResourceManager.GetString("Warning_ExpectedClusterSizeSmallerThanNodeCount", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    This operation may cause availability loss if the repair is still in progress. Are you sure that execution of this repair has completed?
    ///  
    /// </summary>
    internal static string Warning_CompleteRepairExecutionNotManual {
        get {
            return ResourceManager.GetString("Warning_CompleteRepairExecutionNotManual", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Parameter 'SecondaryAccountType' is not specified in the 'FileStoreService' section. This parameter is required unless parameter 'PrimaryAccountType' is set to 'ManagedServiceAccount'.
    ///  
    /// </summary>
    internal static string Error_FileStoreService_SecondaryAccountTypeNotFound {
        get {
            return ResourceManager.GetString("Error_FileStoreService_SecondaryAccountTypeNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Parameter 'SecondaryAccountType' cannot be specified in the 'FileStoreService' section when parameter 'PrimaryAccountType' is not set.
    ///  
    /// </summary>
    internal static string Error_FileStoreService_SecondaryAccountTypeFoundWithoutPrimary {
        get {
            return ResourceManager.GetString("Error_FileStoreService_SecondaryAccountTypeFoundWithoutPrimary", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Parameter 'AnonymousAccessEnabled' cannot be set to false in the 'FileStoreService' section when parameter 'PrimaryAccountType' is not set.
    ///  
    /// </summary>
    internal static string Error_FileStoreService_AnonymousDisabledWithoutPrimary {
        get {
            return ResourceManager.GetString("Error_FileStoreService_AnonymousDisabledWithoutPrimary", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Value '{0}' in parameter '{1}' and section 'FileStoreService' is not valid. Valid values are {2}, {3} and {4}.
    ///  
    /// </summary>
    internal static string Error_FileStoreService_InvalidAccountType {
        get {
            return ResourceManager.GetString("Error_FileStoreService_InvalidAccountType", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    CommonName1Ntlmx509CommonName and CommonName2Ntlmx509CommonName must be both defined or both undefined.
    ///  
    /// </summary>
    internal static string Error_FileStoreService_InvalidCn {
        get {
            return ResourceManager.GetString("Error_FileStoreService_InvalidCn", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    CommonNameNtlmPasswordSecret must be defined or undefined together with CommonName1Ntlmx509CommonName and CommonName2Ntlmx509CommonName.
    ///  
    /// </summary>
    internal static string Error_FileStoreService_InvalidCnAndSecret {
        get {
            return ResourceManager.GetString("Error_FileStoreService_InvalidCnAndSecret", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    CommonName1Ntlmx509CommonName and CommonName2Ntlmx509CommonName are not allowed to be upgraded together in a single upgrade iteration.
    ///  
    /// </summary>
    internal static string Error_FileStoreService_InvalidCnUpgrade {
        get {
            return ResourceManager.GetString("Error_FileStoreService_InvalidCnUpgrade", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    CommonNameNtlmPasswordSecret is not allowed to be changed.
    ///  
    /// </summary>
    internal static string Error_FileStoreService_InvalidCnSecretUpgrade {
        get {
            return ResourceManager.GetString("Error_FileStoreService_InvalidCnSecretUpgrade", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Parameter '{0}' in section 'FileStoreService' should be set when parameter '{1}' is set to '{2}'.
    ///  
    /// </summary>
    internal static string Error_FileStoreService_RequiredParameterNotSpecified {
        get {
            return ResourceManager.GetString("Error_FileStoreService_RequiredParameterNotSpecified", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Parameter '{0}' in section 'FileStoreService' is not expected when parameter '{1}' is set to '{2}'.
    ///  
    /// </summary>
    internal static string Error_FileStoreService_ParameterUnexpected {
        get {
            return ResourceManager.GetString("Error_FileStoreService_ParameterUnexpected", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Restart can only be performed on persisted services. For volatile or stateless services use Remove.
    ///  
    /// </summary>
    internal static string Error_InvalidReplicaOperation {
        get {
            return ResourceManager.GetString("Error_InvalidReplicaOperation", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    This operation cannot be performed in the current replica state. 
    ///  
    /// </summary>
    internal static string Error_InvalidReplicaState {
        get {
            return ResourceManager.GetString("Error_InvalidReplicaState", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} request accepted for {1} from {2} to {3}.
    ///  
    /// </summary>
    internal static string Info_MoveSecondaryReplicaOperationSucceeded {
        get {
            return ResourceManager.GetString("Info_MoveSecondaryReplicaOperationSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} request accepted for {1} to {2}.
    ///  
    /// </summary>
    internal static string Info_PromoteToPrimaryReplicaOperationSucceeded {
        get {
            return ResourceManager.GetString("Info_PromoteToPrimaryReplicaOperationSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Error in Fabric code package validation. The code package does not have Fabric.exe.
    ///  
    /// </summary>
    internal static string ImageStoreError_FabricExeNotFound {
        get {
            return ResourceManager.GetString("ImageStoreError_FabricExeNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid product version '{0}' found
    ///  
    /// </summary>
    internal static string ImageStoreError_InvalidProductVersion {
        get {
            return ResourceManager.GetString("ImageStoreError_InvalidProductVersion", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The file '{0}' was not found in the Image Store
    ///  
    /// </summary>
    internal static string ImageStoreError_FileNotFound {
        get {
            return ResourceManager.GetString("ImageStoreError_FileNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    This command is supported in testability mode only. Please connect with -enableTestability to enable this command.
    ///  
    /// </summary>
    internal static string Powershell_CommandIsSupportedInTestModeOnly {
        get {
            return ResourceManager.GetString("Powershell_CommandIsSupportedInTestModeOnly", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Provide both the operation timeout (-OperationTimeoutSec) and request timeout (-TimeoutSec), or neither.
    ///  
    /// </summary>
    internal static string Powershell_ProvideBothTimeouts {
        get {
            return ResourceManager.GetString("Powershell_ProvideBothTimeouts", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    These are preview APIs, please provide the -UsePreviewAPIs parameter.
    ///  
    /// </summary>
    internal static string Powershell_UsePreviewAPIs {
        get {
            return ResourceManager.GetString("Powershell_UsePreviewAPIs", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    VerifyCompetion is not supported for this option.
    ///  
    /// </summary>
    internal static string Powershell_VerifyCompletionNotSupported {
        get {
            return ResourceManager.GetString("Powershell_VerifyCompletionNotSupported", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    MaxResults is ignored because the current configuration is to return all pages.
    ///  
    /// </summary>
    internal static string Powershell_MaxResultsIgnored {
        get {
            return ResourceManager.GetString("Powershell_MaxResultsIgnored", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} request succeeded with replica selector {1}
    ///  
    /// </summary>
    internal static string Info_ReplicaControlOperationWithReplicaSelectorSucceeded {
        get {
            return ResourceManager.GetString("Info_ReplicaControlOperationWithReplicaSelectorSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    RestartNode request succeeded with replica selector {0}
    ///  
    /// </summary>
    internal static string Info_RestartNodeWithReplicaSelectorSucceeded {
        get {
            return ResourceManager.GetString("Info_RestartNodeWithReplicaSelectorSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} {1} with ReplicaSelector {2}.
    ///  
    /// </summary>
    internal static string Info_ReplicaSelectorCommandSucceded {
        get {
            return ResourceManager.GetString("Info_ReplicaSelectorCommandSucceded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} succeeded with PartitionSelector {1} and {2}.
    ///  
    /// </summary>
    internal static string Info_PartitionSelectorCommandSucceded {
        get {
            return ResourceManager.GetString("Info_PartitionSelectorCommandSucceded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Application {0} is healthy.
    ///  
    /// </summary>
    internal static string Info_TestApplicationSucceeded {
        get {
            return ResourceManager.GetString("Info_TestApplicationSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Service {0} is healthy.
    ///  
    /// </summary>
    internal static string Info_TestServiceSucceeded {
        get {
            return ResourceManager.GetString("Info_TestServiceSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///     code package in application {0} restarted
    ///  
    /// </summary>
    internal static string Info_CodePackageControlOperationWithReplicaSelectorsSucceeded {
        get {
            return ResourceManager.GetString("Info_CodePackageControlOperationWithReplicaSelectorsSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    This parameter set for the API is being deprecated. Please use the other parameter sets available.
    ///  
    /// </summary>
    internal static string Powershell_DeprecatedParameterSetWarning {
        get {
            return ResourceManager.GetString("Powershell_DeprecatedParameterSetWarning", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Failed to contact Naming Service. Attempting to contact Failover Manager Service...
    ///  
    /// </summary>
    internal static string Powershell_NamingServiceTestFailed {
        get {
            return ResourceManager.GetString("Powershell_NamingServiceTestFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Error occurs in section {0}, setting {1}. The error message is {2}
    ///  
    /// </summary>
    internal static string Warning_ThrowErrorWithParameterName1 {
        get {
            return ResourceManager.GetString("Warning_ThrowErrorWithParameterName1", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Error occurs in section {0}, parameter {1}. The error message is {2}
    ///  
    /// </summary>
    internal static string Warning_ThrowErrorWithParameterName2 {
        get {
            return ResourceManager.GetString("Warning_ThrowErrorWithParameterName2", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Error occurs in section {0}, entry {1}. The error message is {2}
    ///  
    /// </summary>
    internal static string Warning_ThrowErrorWithParameterName3 {
        get {
            return ResourceManager.GetString("Warning_ThrowErrorWithParameterName3", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Load Balancer is currently busy. 
    ///  
    /// </summary>
    internal static string Error_LoadBalancerNotReady {
        get {
            return ResourceManager.GetString("Error_LoadBalancerNotReady", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    MovePrimary or MoveSecondary operation can be only be performed on stateful Service Type. 
    ///  
    /// </summary>
    internal static string Error_InvalidPartitionOperation {
        get {
            return ResourceManager.GetString("Error_InvalidPartitionOperation", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Replica is already primary role.
    ///  
    /// </summary>
    internal static string Error_AlreadyPrimaryReplica {
        get {
            return ResourceManager.GetString("Error_AlreadyPrimaryReplica", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Replica is already secondary role.
    ///  
    /// </summary>
    internal static string Error_AlreadySecondaryReplica {
        get {
            return ResourceManager.GetString("Error_AlreadySecondaryReplica", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ChaosTestScenario completed successfully.
    ///  
    /// </summary>
    internal static string Info_ChaosTestScenarioSucceeded {
        get {
            return ResourceManager.GetString("Info_ChaosTestScenarioSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    FailoverTestScenario completed successfully.
    ///  
    /// </summary>
    internal static string Info_FailoverTestScenarioSucceeded {
        get {
            return ResourceManager.GetString("Info_FailoverTestScenarioSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Abnormal process exit found for {0}.
    ///  
    /// </summary>
    internal static string Testability_AbnormalProcessExit {
        get {
            return ResourceManager.GetString("Testability_AbnormalProcessExit", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0}:{1} should be smaller than {2}:{3}
    ///  
    /// </summary>
    internal static string Warning_ShouldBeSmaller {
        get {
            return ResourceManager.GetString("Warning_ShouldBeSmaller", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    CleanTestState operation succeeded
    ///  
    /// </summary>
    internal static string Info_CleanTestStateSucceeded {
        get {
            return ResourceManager.GetString("Info_CleanTestStateSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Old data is cleaned up in FabricDataRoot. A new development environment is generated. 
    ///  
    /// </summary>
    internal static string Info_OldDataCleanup {
        get {
            return ResourceManager.GetString("Info_OldDataCleanup", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ChildFolder '{0}' is not found inside Fabric package '{1}'
    ///  
    /// </summary>
    internal static string ImageStoreError_ChildFolderDoesNotExist_Formatted {
        get {
            return ResourceManager.GetString("ImageStoreError_ChildFolderDoesNotExist_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Can't find ClusterManifest.current.xml in Fabric data root or its subfolders.
    ///  
    /// </summary>
    internal static string Warning_CantFindCMinDataRoot {
        get {
            return ResourceManager.GetString("Warning_CantFindCMinDataRoot", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Deployment terminated because deployment operation can't be null.
    ///  
    /// </summary>
    internal static string Warning_DeploymentOperationCantBeNull {
        get {
            return ResourceManager.GetString("Warning_DeploymentOperationCantBeNull", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Could not parse PartitionSelector. Please check the input provided
    ///  
    /// </summary>
    internal static string Error_CouldNotParsePartitionSelector {
        get {
            return ResourceManager.GetString("Error_CouldNotParsePartitionSelector", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Could not parse ReplicaSelector. Please check the input provided
    ///  
    /// </summary>
    internal static string Error_CouldNotParseReplicaSelector {
        get {
            return ResourceManager.GetString("Error_CouldNotParseReplicaSelector", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid namespace property value kind: {0}
    ///  
    /// </summary>
    internal static string Error_NamespacePropertyValueKindInvalid_Formatted {
        get {
            return ResourceManager.GetString("Error_NamespacePropertyValueKindInvalid_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Replicas hosted in Fabric.exe or in processes not managed by Microsoft Azure Service Fabric cannot be force removed.
    ///  
    /// </summary>
    internal static string Error_ForceNotSupportedForReplicaControlOperation {
        get {
            return ResourceManager.GetString("Error_ForceNotSupportedForReplicaControlOperation", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Multiple deployment IDs available; you have to choose one.
    ///  
    /// </summary>
    internal static string EventStoreError_AmbiguousDeploymentId {
        get {
            return ResourceManager.GetString("EventStoreError_AmbiguousDeploymentId", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Please call ConnectToEventStore first.
    ///  
    /// </summary>
    internal static string EventStoreError_ConnectionRequired {
        get {
            return ResourceManager.GetString("EventStoreError_ConnectionRequired", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Provided deployment ID does not match with any of the available ones.
    ///  
    /// </summary>
    internal static string EventStoreError_DeploymentIdDoesNotMatch {
        get {
            return ResourceManager.GetString("EventStoreError_DeploymentIdDoesNotMatch", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Please provide (at least) first {0} characters of the deployment ID.
    ///  
    /// </summary>
    internal static string EventStoreError_DeploymentIdNotLongEnough {
        get {
            return ResourceManager.GetString("EventStoreError_DeploymentIdNotLongEnough", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Incomplete connection information.
    ///  
    /// </summary>
    internal static string EventStoreError_IncompleteConnectionInformation {
        get {
            return ResourceManager.GetString("EventStoreError_IncompleteConnectionInformation", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    On Azure, yet neither Azure table, nor MDS table.
    ///  
    /// </summary>
    internal static string EventStoreError_UnexpectedConnectionType {
        get {
            return ResourceManager.GetString("EventStoreError_UnexpectedConnectionType", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Failed to load manifest file: {0}
    ///  
    /// </summary>
    internal static string EventStoreError_EventManifestLoadFailure {
        get {
            return ResourceManager.GetString("EventStoreError_EventManifestLoadFailure", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Could not find LogRoot.
    ///  
    /// </summary>
    internal static string EventStoreError_LogrootNotFound {
        get {
            return ResourceManager.GetString("EventStoreError_LogrootNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cannot connect to the Azure table provided in cluster manifest
    ///  
    /// </summary>
    internal static string Error_CouldNotConnectToAzureTable {
        get {
            return ResourceManager.GetString("Error_CouldNotConnectToAzureTable", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cannot find diagnostics table name in cluster manifest
    ///  
    /// </summary>
    internal static string Error_NoDiagnosticsTableNameFound {
        get {
            return ResourceManager.GetString("Error_NoDiagnosticsTableNameFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Could not get table connection string from cluster manifest. Please ensure it enabled and correctly set
    ///  
    /// </summary>
    internal static string Error_NoStorageCredentialsFound {
        get {
            return ResourceManager.GetString("Error_NoStorageCredentialsFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Could not find enough nodes in the ring for operation '{0}'
    ///  
    /// </summary>
    internal static string Error_NotEnoughNodesForTestabilityAction {
        get {
            return ResourceManager.GetString("Error_NotEnoughNodesForTestabilityAction", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Primary for service {0} not found. Please ensure the service is stable before calling API
    ///  
    /// </summary>
    internal static string Error_PartitionPrimaryNotReady {
        get {
            return ResourceManager.GetString("Error_PartitionPrimaryNotReady", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid node {0} provided to operation {1}. Reason '{2}'
    ///  
    /// </summary>
    internal static string Error_InvalidNodeNameProvided {
        get {
            return ResourceManager.GetString("Error_InvalidNodeNameProvided", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    No secondaries in current replica set
    ///  
    /// </summary>
    internal static string Error_NoSecondariesInReplicaSet {
        get {
            return ResourceManager.GetString("Error_NoSecondariesInReplicaSet", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} for {1} did not complete in alloted time
    ///  
    /// </summary>
    internal static string Error_TestabilityActionTimeout {
        get {
            return ResourceManager.GetString("Error_TestabilityActionTimeout", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Did not find a deployed replica for {0} on node {1}
    ///  
    /// </summary>
    internal static string Error_DidNotFindDeployedReplicaOnNode {
        get {
            return ResourceManager.GetString("Error_DidNotFindDeployedReplicaOnNode", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    No partitions found for service {0}
    ///  
    /// </summary>
    internal static string Error_NoPartitionsFoundForService {
        get {
            return ResourceManager.GetString("Error_NoPartitionsFoundForService", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    No replicas found for service {0}
    ///  
    /// </summary>
    internal static string Error_NoReplicasFoundForService {
        get {
            return ResourceManager.GetString("Error_NoReplicasFoundForService", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} partition kind selected but actual kind is {1}
    ///  
    /// </summary>
    internal static string Error_InvalidPartitionKind {
        get {
            return ResourceManager.GetString("Error_InvalidPartitionKind", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Requested Replica/Instance {0} with Id '{1}' not found
    ///  
    /// </summary>
    internal static string Error_ReplicaNotFoundForSelector {
        get {
            return ResourceManager.GetString("Error_ReplicaNotFoundForSelector", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Did not find deployed code package for {0}:{1} on node {2}
    ///  
    /// </summary>
    internal static string Error_CodePackageNotDeployedOnNode {
        get {
            return ResourceManager.GetString("Error_CodePackageNotDeployedOnNode", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Neither entry point is in started state. Cannot restart code package
    ///  
    /// </summary>
    internal static string Error_CodePackageCannotBeRestarted {
        get {
            return ResourceManager.GetString("Error_CodePackageCannotBeRestarted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    SkipFirewallSettings is set to be true. Skipping firewall management.
    ///  
    /// </summary>
    internal static string Warning_SkipFirewallSettingsIsSetToTrue {
        get {
            return ResourceManager.GetString("Warning_SkipFirewallSettingsIsSetToTrue", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Can't find InfrastructureManifest.xml in Fabric data root or its subfolders.
    ///  
    /// </summary>
    internal static string Warning_CantFindIMinDataRoot {
        get {
            return ResourceManager.GetString("Warning_CantFindIMinDataRoot", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Upgrade cluster manifest validation requires the deployed cluster manifest. Can't find ClusterManifest.current.xml in Fabric data root or its subfolders. If you don't intend to do upgrade validation, please remove -isUpgradeValidation parameter. 
    ///  
    /// </summary>
    internal static string Warning_UpgradeValidationCantFindCMinDataRoot {
        get {
            return ResourceManager.GetString("Warning_UpgradeValidationCantFindCMinDataRoot", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Non upgrade cluster manifest validation succeeded.
    ///  
    /// </summary>
    internal static string PowerShell_NonUpgradeCMValidationSucceeded {
        get {
            return ResourceManager.GetString("PowerShell_NonUpgradeCMValidationSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Upgrade cluster manifest validation succeeded. Fabric Host restart won't be required during deployment.
    ///  
    /// </summary>
    internal static string PowerShell_UpgradeCMValidationSucceededDoesNotNeedRestart {
        get {
            return ResourceManager.GetString("PowerShell_UpgradeCMValidationSucceededDoesNotNeedRestart", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Upgrade cluster manifest validation succeeded. Fabric Host restart will be required during deployment.
    ///  
    /// </summary>
    internal static string PowerShell_UpgradeCMValidationSucceededNeedRestart {
        get {
            return ResourceManager.GetString("PowerShell_UpgradeCMValidationSucceededNeedRestart", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    FabricPackageRoot was not specified. Using default fabric package root - '{0}'
    ///  
    /// </summary>
    internal static string Warning_PowerShell_UsingDefaultRoot {
        get {
            return ResourceManager.GetString("Warning_PowerShell_UsingDefaultRoot", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Parameter {0} with value {1} must be greater than {2}
    ///  
    /// </summary>
    internal static string Error_FabricValidator_NamedDoubleValueGreaterThan {
        get {
            return ResourceManager.GetString("Error_FabricValidator_NamedDoubleValueGreaterThan", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Parameter {0} with value {1} must be greater than or equal to {2}
    ///  
    /// </summary>
    internal static string Error_FabricValidator_NamedDoubleValueGreaterThanOrEqualTo {
        get {
            return ResourceManager.GetString("Error_FabricValidator_NamedDoubleValueGreaterThanOrEqualTo", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Can't define PLBRefreshInterval and other timers (MinPlacementInterval or MinConstraintCheckInterval) at the same time.
    ///  
    /// </summary>
    internal static string Error_Fabric_Validator_LoadBalancingMultipleTimersError {
        get {
            return ResourceManager.GetString("Error_Fabric_Validator_LoadBalancingMultipleTimersError", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Not authorized to connect
    ///  
    /// </summary>
    internal static string Error_ConnectionDenied {
        get {
            return ResourceManager.GetString("Error_ConnectionDenied", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Failed to authenticate server identity
    ///  
    /// </summary>
    internal static string Error_ServerAuthenticationFailed {
        get {
            return ResourceManager.GetString("Error_ServerAuthenticationFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    No cluster endpoint is reachable, please check if there is connectivity/firewall/DNS issue.
    ///  
    /// </summary>
    internal static string PowerShell_NoClusterEndpointIsReachable {
        get {
            return ResourceManager.GetString("PowerShell_NoClusterEndpointIsReachable", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Overflow: The level in the log filter '{0}' in the '{1}' section cannot be represented by a 32-bit integer.
    ///  
    /// </summary>
    internal static string Error_LevelInLogFilterOverflow {
        get {
            return ResourceManager.GetString("Error_LevelInLogFilterOverflow", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The level in the log filter '{0}' in the '{1}' section must be an integer.
    ///  
    /// </summary>
    internal static string Error_LevelMustBeInteger {
        get {
            return ResourceManager.GetString("Error_LevelMustBeInteger", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The log filter '{0}' in the '{1}' section is not in the correct format. The correct format is <TaskName>.<EventType>:<Level>. Multiple filters should be comma separated.
    ///  
    /// </summary>
    internal static string Error_LogFilterNotInCorrectFormat {
        get {
            return ResourceManager.GetString("Error_LogFilterNotInCorrectFormat", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The log filter '{0}' in the '{1}' section is not in the correct format. The format *.<EventType>:<Level> is not supported.
    ///  
    /// </summary>
    internal static string Error_LogFilterNotInCorrectFormat2 {
        get {
            return ResourceManager.GetString("Error_LogFilterNotInCorrectFormat2", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The '{0}' parameter in the '{1}' section does not include the default DCA filter string representation ({2}). Therefore, the DCA's default filters will not apply.
    ///  
    /// </summary>
    internal static string Error_NotIncludeDefaultDCAFilterString {
        get {
            return ResourceManager.GetString("Error_NotIncludeDefaultDCAFilterString", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Parameter {0} in section {1} cannot be specified when section {2} is specified.
    ///  
    /// </summary>
    internal static string Error_ParameterInSectionCannotBeSpecified {
        get {
            return ResourceManager.GetString("Error_ParameterInSectionCannotBeSpecified", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Section {0} cannot be specified when section {1} is specified.
    ///  
    /// </summary>
    internal static string Error_SectionCantBeSpecified {
        get {
            return ResourceManager.GetString("Error_SectionCantBeSpecified", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Section '{0}' parameter '{1}' value should be greater than or equal to zero
    ///  
    /// </summary>
    internal static string Error_SectionParameterShouldBeGreaterThanZero {
        get {
            return ResourceManager.GetString("Error_SectionParameterShouldBeGreaterThanZero", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The task/event pair '{0}' appears more than once in the list of filters in section {1}. A given task/event pair can appear no more than once in the filter list.
    ///  
    /// </summary>
    internal static string Error_TaskEventPairMoreThanOnce {
        get {
            return ResourceManager.GetString("Error_TaskEventPairMoreThanOnce", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Value should be greater than or equal to {0}
    ///  
    /// </summary>
    internal static string Error_ValueGreaterThanOrEqualToZero {
        get {
            return ResourceManager.GetString("Error_ValueGreaterThanOrEqualToZero", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Value should be greater than {0}
    ///  
    /// </summary>
    internal static string Error_ValueShouldBeGreaterThanInputValue {
        get {
            return ResourceManager.GetString("Error_ValueShouldBeGreaterThanInputValue", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Value should be less than or equal to {0}
    ///  
    /// </summary>
    internal static string Error_ValueShouldBeLessThanOrEqualToZero {
        get {
            return ResourceManager.GetString("Error_ValueShouldBeLessThanOrEqualToZero", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    One or more placement constraints on the service are undefined on all nodes that are currently up.
    ///  
    /// </summary>
    internal static string Error_ConstraintKeyUndefined {
        get {
            return ResourceManager.GetString("Error_ConstraintKeyUndefined", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Partitions {0} for service {1} stuck in quorum loss
    ///  
    /// </summary>
    internal static string Error_PartitionsInQuorumLoss {
        get {
            return ResourceManager.GetString("Error_PartitionsInQuorumLoss", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} did not become available within timeout of {1}. Failure Reason: {2}
    ///  
    /// </summary>
    internal static string Error_ServiceNotStable {
        get {
            return ResourceManager.GetString("Error_ServiceNotStable", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} did not become healthy within timeout of {1}. Service Health events: {2}
    ///  
    /// </summary>
    internal static string Error_ServiceNotHealthy {
        get {
            return ResourceManager.GetString("Error_ServiceNotHealthy", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Failed to contact Failover Manager Service, Attempting to contact FMM...
    ///  
    /// </summary>
    internal static string Powershell_FailoverManagerServiceTestFailed {
        get {
            return ResourceManager.GetString("Powershell_FailoverManagerServiceTestFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Failed to contact FMM, Testing TCP connections...
    ///  
    /// </summary>
    internal static string Powershell_FMMServiceTestFailed {
        get {
            return ResourceManager.GetString("Powershell_FMMServiceTestFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} is not a valid NodeName
    ///  
    /// </summary>
    internal static string Error_PowerShell_InvalidNodeName {
        get {
            return ResourceManager.GetString("Error_PowerShell_InvalidNodeName", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Node {0} is not Up
    ///  
    /// </summary>
    internal static string Error_PowerShell_NodeNotUp {
        get {
            return ResourceManager.GetString("Error_PowerShell_NodeNotUp", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    There are encrypted configuration parameters in Settings.xml and Users defined in this Application. However, the SecretsCertificate is not provided in the ApplicationManifest. Please provide the certificate used to encrypt the secrets in the Application.
    ///  
    /// </summary>
    internal static string ImageBuilderError_EncryptedSettingsNoCertInAppManifest {
        get {
            return ResourceManager.GetString("ImageBuilderError_EncryptedSettingsNoCertInAppManifest", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Fabric Root has to be defined if you are using fabric package.
    ///  
    /// </summary>
    internal static string Warning_Powershell_FabricRoot {
        get {
            return ResourceManager.GetString("Warning_Powershell_FabricRoot", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid value encountered for move cost. Valid values are Zero, Low, Medium or High
    ///  
    /// </summary>
    internal static string Error_InvalidMoveCostSpecification {
        get {
            return ResourceManager.GetString("Error_InvalidMoveCostSpecification", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Element not found
    ///  
    /// </summary>
    internal static string Error_NotFound {
        get {
            return ResourceManager.GetString("Error_NotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Remote configuration is not supported in Managed API when credentials are specified. Please use Powershell.
    ///  
    /// </summary>
    internal static string Error_RemoteNodeConfigNotSupportedWithCredential {
        get {
            return ResourceManager.GetString("Error_RemoteNodeConfigNotSupportedWithCredential", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Neither TargetInformation.xml nor ClusterManifest.Current.xml found. FabricHost started without configuring the node. Nothing to do.
    ///  
    /// </summary>
    internal static string Error_FabricHostStartedWithoutConfiguringTheNode {
        get {
            return ResourceManager.GetString("Error_FabricHostStartedWithoutConfiguringTheNode", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Deployer is not run as Administrator. Skipping Firewall Management and Performance Counter Management.
    ///  
    /// </summary>
    internal static string Warning_DeployerNotRunAsAdminSkipFirewallAndPerformanceCounter {
        get {
            return ResourceManager.GetString("Warning_DeployerNotRunAsAdminSkipFirewallAndPerformanceCounter", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    In node {0}, Brackets[] around IPV6 addresses are mandatory.
    ///  
    /// </summary>
    internal static string Error_BracketsAroundIPV6AddressAreMandatory {
        get {
            return ResourceManager.GetString("Error_BracketsAroundIPV6AddressAreMandatory", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Certificate for UserRole FabricClient is not configured.
    ///  
    /// </summary>
    internal static string Error_UserRoleClientCertificateNotConfigured {
        get {
            return ResourceManager.GetString("Error_UserRoleClientCertificateNotConfigured", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    An error occurred.
    ///  
    /// </summary>
    internal static string InternalServerError {
        get {
            return ResourceManager.GetString("InternalServerError", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Operation was canceled.
    ///  
    /// </summary>
    internal static string Canceled {
        get {
            return ResourceManager.GetString("Canceled", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Resource {0} not found.
    ///  
    /// </summary>
    internal static string NotFound {
        get {
            return ResourceManager.GetString("NotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    There was a conflict when modifying key {0}.
    ///  
    /// </summary>
    internal static string WriteConflict {
        get {
            return ResourceManager.GetString("WriteConflict", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Request is invalid.
    ///  
    /// </summary>
    internal static string BadRequest {
        get {
            return ResourceManager.GetString("BadRequest", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    A retryable error occurred.
    ///  
    /// </summary>
    internal static string RetryableError {
        get {
            return ResourceManager.GetString("RetryableError", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Api-version query parameter is not provided.
    ///  
    /// </summary>
    internal static string ApiVersionMissing {
        get {
            return ResourceManager.GetString("ApiVersionMissing", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid api-version specified in the request url.
    ///  
    /// </summary>
    internal static string InvalidApiVersion {
        get {
            return ResourceManager.GetString("InvalidApiVersion", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Etag provided in if-match header {0} does not match etag in the store {1}.
    ///  
    /// </summary>
    internal static string PreconditionFailed {
        get {
            return ResourceManager.GetString("PreconditionFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cannot parse the request.
    ///  
    /// </summary>
    internal static string InvalidRequestFormat {
        get {
            return ResourceManager.GetString("InvalidRequestFormat", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Errors encountered while parsing the request body.
    ///  
    /// </summary>
    internal static string InvalidJson {
        get {
            return ResourceManager.GetString("InvalidJson", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} operation on resource {1} is not supported.
    ///  
    /// </summary>
    internal static string OperationNotSupported {
        get {
            return ResourceManager.GetString("OperationNotSupported", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unauthorized operation.
    ///  
    /// </summary>
    internal static string UnauthorizedOperation {
        get {
            return ResourceManager.GetString("UnauthorizedOperation", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Resource name {0} is invalid. The name can be up to 80 characters long. It must begin with a word character, and it must end with a word character or with '_'. The name may contain word characters or '.', '-', '_'.
    ///  
    /// </summary>
    internal static string InvalidResourceName {
        get {
            return ResourceManager.GetString("InvalidResourceName", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cluster size: {0} is not supported. Total node count needs to be either one node for testing/demo purpose or at least {1} and maximum {2}.
    ///  
    /// </summary>
    internal static string ClusterSizeNotSupported {
        get {
            return ResourceManager.GetString("ClusterSizeNotSupported", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Role {0} has NodeTypeRef {1}. This NodeType is not defined.
    ///  
    /// </summary>
    internal static string NodeTypeNotDefined {
        get {
            return ResourceManager.GetString("NodeTypeNotDefined", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    NodeTypes cannot be null. At least one NodeType should be defined.
    ///  
    /// </summary>
    internal static string NodeTypesCannotBeNull {
        get {
            return ResourceManager.GetString("NodeTypesCannotBeNull", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Primary NodeType '{0}' has only {1} VM instances. At least {2} VM instances required for {3} reliability level.
    ///  
    /// </summary>
    internal static string VMInstanceCountNotSufficientForReliability {
        get {
            return ResourceManager.GetString("VMInstanceCountNotSufficientForReliability", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Section '{0}' is required.
    ///  
    /// </summary>
    internal static string RequiredSectionNotFound {
        get {
            return ResourceManager.GetString("RequiredSectionNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Node name {0} contains invalid characters.
    ///  
    /// </summary>
    internal static string NodeNameContainsInvalidChars {
        get {
            return ResourceManager.GetString("NodeNameContainsInvalidChars", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cluster name {0} contains invalid characters.
    ///  
    /// </summary>
    internal static string ClusterNameContainsInvalidChars {
        get {
            return ResourceManager.GetString("ClusterNameContainsInvalidChars", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Diagnostics Store is not a file share. Please consider using a file share accessible from all cluster machines, collecting logs in a local folder is inconvenient.
    ///  
    /// </summary>
    internal static string MultiMachineClusterDCALocalFileWarning {
        get {
            return ResourceManager.GetString("MultiMachineClusterDCALocalFileWarning", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Section '{0}' and Parameter '{1}' is required.
    ///  
    /// </summary>
    internal static string RequiredParameterNotFound {
        get {
            return ResourceManager.GetString("RequiredParameterNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Section '{0}' is not allowed.
    ///  
    /// </summary>
    internal static string SectionNotAllowed {
        get {
            return ResourceManager.GetString("SectionNotAllowed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Section '{0}' and Parameter '{1}' is not allowed.
    ///  
    /// </summary>
    internal static string ParameterNotAllowed {
        get {
            return ResourceManager.GetString("ParameterNotAllowed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Endpoint '{0}' is not specified in NodeType '{1}'
    ///  
    /// </summary>
    internal static string EndpointNotSpecified {
        get {
            return ResourceManager.GetString("EndpointNotSpecified", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Resource {0} is not ready.
    ///  
    /// </summary>
    internal static string ResourceNotReady {
        get {
            return ResourceManager.GetString("ResourceNotReady", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    They MSI file is not found or is invalid.
    ///  
    /// </summary>
    internal static string InvalidMsi {
        get {
            return ResourceManager.GetString("InvalidMsi", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    '{0}' has invalid port value of '{1}'. The value should be between {2} and {3}.
    ///  
    /// </summary>
    internal static string PortOutOfRange {
        get {
            return ResourceManager.GetString("PortOutOfRange", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    '{0}' port value of '{1}' falls within Service Fabric reserved port range. Port value should be outside '{2}' and '{3}'.
    ///  
    /// </summary>
    internal static string PortInReservedRange {
        get {
            return ResourceManager.GetString("PortInReservedRange", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The StartPort of '{0}' is greater than EndPort.
    ///  
    /// </summary>
    internal static string StartPortGreaterThanEnd {
        get {
            return ResourceManager.GetString("StartPortGreaterThanEnd", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The DynamicPorts provided is insufficient. There should be atleast {0} ports.
    ///  
    /// </summary>
    internal static string InsufficientDynamicPorts {
        get {
            return ResourceManager.GetString("InsufficientDynamicPorts", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid Partition Load Distribution Weight - (valid values 0 to 1).
    ///  
    /// </summary>
    internal static string InvalidLdw {
        get {
            return ResourceManager.GetString("InvalidLdw", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The HttpGatewayEnpoint protocol '{0}' is not valid. Valid values are '{1}' and '{2}'.
    ///  
    /// </summary>
    internal static string InvalidHttpGatewayProtocol {
        get {
            return ResourceManager.GetString("InvalidHttpGatewayProtocol", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The ClientConnectionEnpoint protocol '{0}' is not valid. Valid value is '{1}'.
    ///  
    /// </summary>
    internal static string InvalidClientConnectionProtocol {
        get {
            return ResourceManager.GetString("InvalidClientConnectionProtocol", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Current cluster manifest at '{0}' was invalid; deleting to mitigate. Contents:{1}
    ///  
    /// </summary>
    internal static string ClusterManifestInvalidDeleting_Formatted {
        get {
            return ResourceManager.GetString("ClusterManifestInvalidDeleting_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The update of '{0}' is not allowed.
    ///  
    /// </summary>
    internal static string UpdateNotAllowed {
        get {
            return ResourceManager.GetString("UpdateNotAllowed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The update of the cluster is currently unavailable. Please ensure that the cluster is up and system services are healthy.
    ///  
    /// </summary>
    internal static string ClusterUpdateUnavailable {
        get {
            return ResourceManager.GetString("ClusterUpdateUnavailable", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Subscription {0} is not registered with the RP.
    ///  
    /// </summary>
    internal static string SubscriptionNotRegistered {
        get {
            return ResourceManager.GetString("SubscriptionNotRegistered", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Server Certificate must be defined if client certificate is defined.
    ///  
    /// </summary>
    internal static string ClientCertDefinedWithoutServerCert {
        get {
            return ResourceManager.GetString("ClientCertDefinedWithoutServerCert", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Client issuer thumbprints must be defined if client common names are defined in the cluster config.
    ///  
    /// </summary>
    internal static string ClientCommonNameDefinedWithoutIssuerThumbprint {
        get {
            return ResourceManager.GetString("ClientCommonNameDefinedWithoutIssuerThumbprint", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Certificate {0} is not installed under {1}. Check the node availability, certificate installation, and the remote certificate store read permission on the nodes.
    ///  
    /// </summary>
    internal static string CertificateNotInstalled {
        get {
            return ResourceManager.GetString("CertificateNotInstalled", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Certificate {0} is not installed on node {1} under {2}. Check the node availability, certificate installation, and the remote certificate store read permission on the nodes.
    ///  
    /// </summary>
    internal static string CertificateNotInstalledOnNode {
        get {
            return ResourceManager.GetString("CertificateNotInstalledOnNode", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Certificate {0} is either not effective yet, or expired.
    ///  
    /// </summary>
    internal static string CertificateInvalid {
        get {
            return ResourceManager.GetString("CertificateInvalid", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Upgrading from 2 different certificates to 2 different certificates is not allowed.
    ///  
    /// </summary>
    internal static string TwoCertificatesToTwoCertificatesNotAllowed {
        get {
            return ResourceManager.GetString("TwoCertificatesToTwoCertificatesNotAllowed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Certificate issuer thumbprints {0} are either invalid or contain duplicated entries.
    ///  
    /// </summary>
    internal static string InvalidCertificateIssuerThumbprints {
        get {
            return ResourceManager.GetString("InvalidCertificateIssuerThumbprints", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Common name must not be empty.
    ///  
    /// </summary>
    internal static string InvalidCommonName {
        get {
            return ResourceManager.GetString("InvalidCommonName", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Issuer thumbprint is not supported for this particular certificate type yet.
    ///  
    /// </summary>
    internal static string UnsupportedIssuerThumbprintPair {
        get {
            return ResourceManager.GetString("UnsupportedIssuerThumbprintPair", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Up to 2 common names are supported for certificates except the client certificates.
    ///  
    /// </summary>
    internal static string InvalidCommonNameCount {
        get {
            return ResourceManager.GetString("InvalidCommonNameCount", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Client Certificate Thumbprint contains invalid characters
    ///  
    /// </summary>
    internal static string InvalidClientCertificateThumbprint {
        get {
            return ResourceManager.GetString("InvalidClientCertificateThumbprint", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Server Certificate Thumbprint contains invalid characters
    ///  
    /// </summary>
    internal static string InvalidServerCertificateThumbprint {
        get {
            return ResourceManager.GetString("InvalidServerCertificateThumbprint", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cluster Certificate Thumbprint contains invalid characters
    ///  
    /// </summary>
    internal static string InvalidClusterCertificateThumbprint {
        get {
            return ResourceManager.GetString("InvalidClusterCertificateThumbprint", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Reverse Proxy Certificate Thumbprint contains invalid characters
    ///  
    /// </summary>
    internal static string InvalidReverseProxyCertificateThumbprint {
        get {
            return ResourceManager.GetString("InvalidReverseProxyCertificateThumbprint", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Common names and issuer thumbprints should not be both defined for a particular certificate.
    ///  
    /// </summary>
    internal static string InvalidCommonNameThumbprintPair {
        get {
            return ResourceManager.GetString("InvalidCommonNameThumbprintPair", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The current and updated issuer thumbprint collections must have an intersection.
    ///  
    /// </summary>
    internal static string IssuerThumbprintUpgradeWithNoIntersection {
        get {
            return ResourceManager.GetString("IssuerThumbprintUpgradeWithNoIntersection", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Duplicated common names for the cluster certificate type is not supported.
    ///  
    /// </summary>
    internal static string DupeCommonNameNotAllowedForClusterCert {
        get {
            return ResourceManager.GetString("DupeCommonNameNotAllowedForClusterCert", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cluster certificate {0} issued by {1} is installed. Please uninstall it from all nodes before cluster config upgrade.
    ///  
    /// </summary>
    internal static string CertIssuedByIssuerInstalled {
        get {
            return ResourceManager.GetString("CertIssuedByIssuerInstalled", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Upgrading from 1 certificate to 2 certificates or 2 to 1 is not allowed if there is no thumbprint or common name intersection.
    ///  
    /// </summary>
    internal static string CertificateUpgradeWithNoIntersectionNotAllowed {
        get {
            return ResourceManager.GetString("CertificateUpgradeWithNoIntersectionNotAllowed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cluster configuration upgrade failed.
    ///  
    /// </summary>
    internal static string Error_ConfigUpgradeGeneric {
        get {
            return ResourceManager.GetString("Error_ConfigUpgradeGeneric", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    No diagnostics storage account is available to be assigned to subscription {0}.
    ///  
    /// </summary>
    internal static string DiagnosticsStorageAccountOutOfInventory {
        get {
            return ResourceManager.GetString("DiagnosticsStorageAccountOutOfInventory", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Subscription {0} is not permitted to use resources in this region.
    ///  
    /// </summary>
    internal static string SubscriptionNotAllowed {
        get {
            return ResourceManager.GetString("SubscriptionNotAllowed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Resource {0} cannot be updated since it is marked to be moved.
    ///  
    /// </summary>
    internal static string MovingResourceCannotBeUpdated {
        get {
            return ResourceManager.GetString("MovingResourceCannotBeUpdated", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Version {0} is not found.
    ///  
    /// </summary>
    internal static string VersionNotFound {
        get {
            return ResourceManager.GetString("VersionNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The request timed out.
    ///  
    /// </summary>
    internal static string RequestTimeout {
        get {
            return ResourceManager.GetString("RequestTimeout", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The new certificate cannot be added since the authentication type of the cluster cannot be modified.
    ///  
    /// </summary>
    internal static string AuthenticationTypeCannotBeChangedByAddingCertificate {
        get {
            return ResourceManager.GetString("AuthenticationTypeCannotBeChangedByAddingCertificate", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The certificate cannot be removed since the authentication type of the cluster cannot be modified.
    ///  
    /// </summary>
    internal static string AuthenticationTypeCannotBeChangedByRemovingCertificate {
        get {
            return ResourceManager.GetString("AuthenticationTypeCannotBeChangedByRemovingCertificate", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Certificates have to be rolled over one at a time. All existing certificates cannot be modified at the same time.
    ///  
    /// </summary>
    internal static string CertificateUpdateNotRolling {
        get {
            return ResourceManager.GetString("CertificateUpdateNotRolling", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Certificates cannot be added and removed at the same time. Remove a certificate first before adding a new one.
    ///  
    /// </summary>
    internal static string AddAndRemoveCertificateNotAllowed {
        get {
            return ResourceManager.GetString("AddAndRemoveCertificateNotAllowed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The certificate upgrade and scale upgrade are not allowed at same time. Please try one at a time.
    ///  
    /// </summary>
    internal static string CertificateAndScaleUpgradeTogetherNotAllowed {
        get {
            return ResourceManager.GetString("CertificateAndScaleUpgradeTogetherNotAllowed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The scale up upgrade and scale down upgrade are not allowed for this cluster resource. Please create new cluster.
    ///  
    /// </summary>
    internal static string ScaleUpAndScaleDownUpgradeNotAllowedForOlderClusters {
        get {
            return ResourceManager.GetString("ScaleUpAndScaleDownUpgradeNotAllowedForOlderClusters", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    NodeType '{0}' is specified more than once. Duplicate NodeTypes are not allowed.
    ///  
    /// </summary>
    internal static string DuplicateNodeTypeNotAllowed {
        get {
            return ResourceManager.GetString("DuplicateNodeTypeNotAllowed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    There should be exactly one NodeType marked as primary. Currently there are {0} primary NodeTypes.
    ///  
    /// </summary>
    internal static string InvalidNumberofPrimaryNodeTypes {
        get {
            return ResourceManager.GetString("InvalidNumberofPrimaryNodeTypes", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    In KTL Logger section, if sharedLogFilePath is not null, sharedLogFileId must have value.
    ///  
    /// </summary>
    internal static string SharedLogFileIdCannotBeNull {
        get {
            return ResourceManager.GetString("SharedLogFileIdCannotBeNull", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    In KTL Logger section, if sharedLogFileId is not null, sharedLogFilePath must have value.
    ///  
    /// </summary>
    internal static string SharedLogFilePathCannotBeNull {
        get {
            return ResourceManager.GetString("SharedLogFilePathCannotBeNull", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    NodeType '{0}' is a primary NodeType and cannot be deleted.
    ///  
    /// </summary>
    internal static string PrimaryNodeTypeDeletionNotAllowed {
        get {
            return ResourceManager.GetString("PrimaryNodeTypeDeletionNotAllowed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    NodeType '{0}' is set as the primary NodeType. Primary NodeType cannot be modified once cluster is created.
    ///  
    /// </summary>
    internal static string PrimaryNodeTypeModificationNotAllowed {
        get {
            return ResourceManager.GetString("PrimaryNodeTypeModificationNotAllowed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    VMInstance count cannot be modified on cluster resource.
    ///  
    /// </summary>
    internal static string ManualScaleUpOrDownNotAllowed {
        get {
            return ResourceManager.GetString("ManualScaleUpOrDownNotAllowed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Encryption is not supported for file share diagnostics store type.
    ///  
    /// </summary>
    internal static string EncryptionForFileShareStoreTypeNotSupported {
        get {
            return ResourceManager.GetString("EncryptionForFileShareStoreTypeNotSupported", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unprotected account keys for diagnostics storage accounts are not supported. Please provide diagnostics storage account keys via ProtectedAccountKeyName in DiagnosticsStorageAccountConfig. It can be StorageAccountKey1 or StorageAccountKey2 which refers to the protected settings of Service Fabric VM extensions with the same names where the real account keys are provided.
    ///  
    /// </summary>
    internal static string UnprotectedDiagnosticsStorageAccountKeysNotAllowed {
        get {
            return ResourceManager.GetString("UnprotectedDiagnosticsStorageAccountKeysNotAllowed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Please provide diagnostics storage account keys via ProtectedAccountKeyName in DiagnosticsStorageAccountConfig. It can be StorageAccountKey1 or StorageAccountKey2 which refers to the protected settings of Service Fabric VM extensions with the same names where the real account keys are provided.
    ///  
    /// </summary>
    internal static string InvalidProtectedDiagnosticsStorageAccountKeyName {
        get {
            return ResourceManager.GetString("InvalidProtectedDiagnosticsStorageAccountKeyName", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Please provide either protected account key (protectedAccountKeyName) or unprotected account keys (primaryAccessKey and secondaryAccessKey) in cluster resource property diagnosticsStorageAccountConfig, but not both. ProtectedAccountKeyName can be StorageAccountKey1 or StorageAccountKey2 which refers to the protected settings of Service Fabric VM extensions with the same names where the real account keys are provided.
    ///  
    /// </summary>
    internal static string ProtectedAndUnprotectedDiagnosticsStorageAccountKeysNotCompatible {
        get {
            return ResourceManager.GetString("ProtectedAndUnprotectedDiagnosticsStorageAccountKeysNotCompatible", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Please provide diagnostics storage account keys via ProtectedAccountKeyName in DiagnosticsStorageAccountConfig. It can be StorageAccountKey1 or StorageAccountKey2 which refers to the protected settings of Service Fabric VM extensions with the same names where the real account keys are provided.
    ///  
    /// </summary>
    internal static string ProtectedDiagnosticsStorageAccountKeyNotSpecified {
        get {
            return ResourceManager.GetString("ProtectedDiagnosticsStorageAccountKeyNotSpecified", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Blob endpoint {0} is not a valid https blob service endpoint for storage account {1}. Note that custom domain names are not supported.
    ///  
    /// </summary>
    internal static string InvalidDiagnosticsStorageAccountBlobEndpoint {
        get {
            return ResourceManager.GetString("InvalidDiagnosticsStorageAccountBlobEndpoint", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Table endpoint {0} is not a valid https table service endpoint for storage account {1}. Note that custom domain names are not supported.
    ///  
    /// </summary>
    internal static string InvalidDiagnosticsStorageAccountTableEndpoint {
        get {
            return ResourceManager.GetString("InvalidDiagnosticsStorageAccountTableEndpoint", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    'Server AUTH Credential Type' parameter is required.
    ///  
    /// </summary>
    internal static string ServerAuthCredentialTypeRequired {
        get {
            return ResourceManager.GetString("ServerAuthCredentialTypeRequired", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Model validation error. {0}
    ///  
    /// </summary>
    internal static string BestPracticesAnalyzerModelInvalid {
        get {
            return ResourceManager.GetString("BestPracticesAnalyzerModelInvalid", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    A configuration upgrade with identical configuration version is not allowed.
    ///  
    /// </summary>
    internal static string UpgradeWithIdenticalConfigVersionNotAllowed {
        get {
            return ResourceManager.GetString("UpgradeWithIdenticalConfigVersionNotAllowed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The current state is inconsistent with the state machine: {0}.
    ///  
    /// </summary>
    internal static string OperationInconsistentWithStateMachine {
        get {
            return ResourceManager.GetString("OperationInconsistentWithStateMachine", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The Endpoint resource {0} associated specified in EndpointBindingPolicy must have https protocol
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidEndpointBinding {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidEndpointBinding", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unable to install FabricInstallerService from path {0} because file was not found.
    ///  
    /// </summary>
    internal static string Error_UnableToInstallFabricInstallerSvcFNF {
        get {
            return ResourceManager.GetString("Error_UnableToInstallFabricInstallerSvcFNF", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    While creating FabricInstallerService on machine {0}, OpenSCManager returned errorCode {1}
    ///  
    /// </summary>
    internal static string Error_OpenSCManagerReturnsErrorWhileCreating {
        get {
            return ResourceManager.GetString("Error_OpenSCManagerReturnsErrorWhileCreating", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unable to stop fabric host service because {0}
    ///  
    /// </summary>
    internal static string Error_UnableToStopFabricHostService {
        get {
            return ResourceManager.GetString("Error_UnableToStopFabricHostService", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unable to start fabric host service because {0}
    ///  
    /// </summary>
    internal static string Error_UnableToStartFabricHostService {
        get {
            return ResourceManager.GetString("Error_UnableToStartFabricHostService", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unable to check state of fabric host service because {0}
    ///  
    /// </summary>
    internal static string Error_UnableToCheckStateOfFabricHostService {
        get {
            return ResourceManager.GetString("Error_UnableToCheckStateOfFabricHostService", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unable to change open service manager handle because {0}
    ///  
    /// </summary>
    internal static string Error_UnableToChangeOpenServiceManagerHandle {
        get {
            return ResourceManager.GetString("Error_UnableToChangeOpenServiceManagerHandle", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unable to change open service handle because {0}
    ///  
    /// </summary>
    internal static string Error_UnableToChangeOpenServiceHandle {
        get {
            return ResourceManager.GetString("Error_UnableToChangeOpenServiceHandle", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unable to change service configuration because {0}
    ///  
    /// </summary>
    internal static string Error_UnableToChangeServiceConfiguration {
        get {
            return ResourceManager.GetString("Error_UnableToChangeServiceConfiguration", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Checking if FabricInstallerService already exists on machine {0}
    ///  
    /// </summary>
    internal static string Info_CheckIfFabricInstallerServiceAlreadyExists {
        get {
            return ResourceManager.GetString("Info_CheckIfFabricInstallerServiceAlreadyExists", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Installing FabricInstallerService on machine {0}
    ///  
    /// </summary>
    internal static string Info_InstallFabricInstallerServiceOnMachine {
        get {
            return ResourceManager.GetString("Info_InstallFabricInstallerServiceOnMachine", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    FabricInstallerService is detected as already installed on machine {0}. Skipping.
    ///  
    /// </summary>
    internal static string Info_FabricInstallerSvcAlreadyInstalled {
        get {
            return ResourceManager.GetString("Info_FabricInstallerSvcAlreadyInstalled", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    While creating FabricInstallerService on machine {0}, OpenSCManager returned errorCode {1}
    ///  
    /// </summary>
    internal static string Error_OpenSCManagerReturnsErrorCodeWhileCreatingFabricInstallerService {
        get {
            return ResourceManager.GetString("Error_OpenSCManagerReturnsErrorCodeWhileCreatingFabricInstallerService", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Deleting FabricInstallerService from machine {0}
    ///  
    /// </summary>
    internal static string Info_DeletingFabricInstallerService {
        get {
            return ResourceManager.GetString("Info_DeletingFabricInstallerService", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    While deleting FabricInstallerService on machine {0}, OpenSCManager returned errorCode {1}
    ///  
    /// </summary>
    internal static string Error_OpenSCManagerReturnsErrorWhileDeleting {
        get {
            return ResourceManager.GetString("Error_OpenSCManagerReturnsErrorWhileDeleting", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    While deleting FabricInstallerService on machine {0}, DeleteService returned errorCode {1}
    ///  
    /// </summary>
    internal static string Error_DeleteServiceReturnsErrorCodeWhileDeletingFabricInstallerService {
        get {
            return ResourceManager.GetString("Error_DeleteServiceReturnsErrorCodeWhileDeletingFabricInstallerService", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unable to parse the service startup type {0}
    ///  
    /// </summary>
    internal static string Error_UnableToParseTheServiceStartupType {
        get {
            return ResourceManager.GetString("Error_UnableToParseTheServiceStartupType", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unable to set fabric host service startup type delayed auto because {0}
    ///  
    /// </summary>
    internal static string Error_UnableToSetFabricHostServiceStartupTypeDelayedAuto {
        get {
            return ResourceManager.GetString("Error_UnableToSetFabricHostServiceStartupTypeDelayedAuto", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unable to set fabric host service startup type to {0} because {1}
    ///  
    /// </summary>
    internal static string Error_UnableToSetFabricHostServiceStartupType {
        get {
            return ResourceManager.GetString("Error_UnableToSetFabricHostServiceStartupType", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unable to query service configuration because {0}
    ///  
    /// </summary>
    internal static string Error_UnableToQueryServiceConfiguration {
        get {
            return ResourceManager.GetString("Error_UnableToQueryServiceConfiguration", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    At most one of ApplicationNameFilter, ApplicationTypeNameFilter, or ApplicationDefinitionKindFilter can be specified.
    ///  
    /// </summary>
    internal static string Error_ApplicationQueryDescriptionIncompatibleSettings {
        get {
            return ResourceManager.GetString("Error_ApplicationQueryDescriptionIncompatibleSettings", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ApplicationTypeNameFilter and ApplicationTypeDefinitionKindFilter can not be specified together.
    ///  
    /// </summary>
    internal static string Error_ApplicationTypeQueryDescriptionIncompatibleSettings {
        get {
            return ResourceManager.GetString("Error_ApplicationTypeQueryDescriptionIncompatibleSettings", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    MaxResults must be a positive integer less than the value of max of int64.
    ///  
    /// </summary>
    internal static string Error_InvalidMaxResults {
        get {
            return ResourceManager.GetString("Error_InvalidMaxResults", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ServiceQueryDescription can not have both ServiceNameFilter and ServiceTypeNameFilter specified.
    ///  
    /// </summary>
    internal static string Error_ServiceQueryDescriptionIncompatibleSettings {
        get {
            return ResourceManager.GetString("Error_ServiceQueryDescriptionIncompatibleSettings", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} called with null svcHandle.
    ///  
    /// </summary>
    internal static string Error_SvcConfigChangeNullSvcHandle {
        get {
            return ResourceManager.GetString("Error_SvcConfigChangeNullSvcHandle", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unable to allocate memory for {0}, error was: 0x{1:X}
    ///  
    /// </summary>
    internal static string Error_UpdateServiceConfigOOM {
        get {
            return ResourceManager.GetString("Error_UpdateServiceConfigOOM", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Error setting service config {0}, error was: 0x{1:X}
    ///  
    /// </summary>
    internal static string Error_UpdateServiceConfigNativeCall {
        get {
            return ResourceManager.GetString("Error_UpdateServiceConfigNativeCall", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Could not load type '{0}' from assembly '{1}'
    ///  
    /// </summary>
    internal static string Error_TypeLoadAssembly {
        get {
            return ResourceManager.GetString("Error_TypeLoadAssembly", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    FciContext is null. Called {0} without calling CreateFciContext
    ///  
    /// </summary>
    internal static string Error_FciContext_Null {
        get {
            return ResourceManager.GetString("Error_FciContext_Null", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Error in Connection during ServiceCommunication
    ///  
    /// </summary>
    internal static string Error_FabricCannotConnect {
        get {
            return ResourceManager.GetString("Error_FabricCannotConnect", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Fabric Message is too large
    ///  
    /// </summary>
    internal static string Error_FabricMessageTooLarge {
        get {
            return ResourceManager.GetString("Error_FabricMessageTooLarge", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The attempted move would have resulted in replica placements that violate one or more constraints. The move was not executed.
    ///  
    /// </summary>
    internal static string Error_ConstraintNotSatisfied {
        get {
            return ResourceManager.GetString("Error_ConstraintNotSatisfied", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Fabric Endpoint not found during connection
    ///  
    /// </summary>
    internal static string Error_FabricEndpointNotFound {
        get {
            return ResourceManager.GetString("Error_FabricEndpointNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Failed to lookup the {0} method.
    ///  
    /// </summary>
    internal static string Error_MethodLookupFailed {
        get {
            return ResourceManager.GetString("Error_MethodLookupFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid application metric, the input should follow the pattern @("&lt;metricString1&gt;","&lt;metricString2&gt;",...), each &lt;metricString&gt; is &lt;metricName&gt;,&lt;nodeReservationCapacity&gt;,&lt;maximumNodeCapacity&gt;,&lt;totalApplicationCapacity&gt; or @("&lt;metricName&gt;","&lt;parameterName:parameterValue&gt;",...); each &lt;parameterName&gt; is &lt;nodeReservationCapacity&gt;,&lt;maximumNodeCapacity&gt;,&lt;totalApplicationCapacity&gt; and &lt;parameterValue&gt; is the parameter value; each parameter can appear at most once; where maximum node capacity must be greater than or equal to reservation capacity and total application capacity must be greater than maximum node capacity multiplied by maximum number of nodes. One example is @(“Memory,512,1024,4096”,”CPU,0,100,1200”) or @(“Memory,MaximumNodeCapacity:100,TotalApplicationCapacity:400”).
    ///  
    /// </summary>
    internal static string Error_InvalidApplicationMetricSpecification {
        get {
            return ResourceManager.GetString("Error_InvalidApplicationMetricSpecification", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Value of MinimumNodes is greater than value of MaximumNodes. MinimumNodes: {0}, MaximumNodes:{1}
    ///  
    /// </summary>
    internal static string Error_MinimumNodesGreaterThanMaximumNodes {
        get {
            return ResourceManager.GetString("Error_MinimumNodesGreaterThanMaximumNodes", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    RemoveApplicationCapacity cannot be specified together with other parameters.
    ///  
    /// </summary>
    internal static string Error_RemoveApplicationCapacity {
        get {
            return ResourceManager.GetString("Error_RemoveApplicationCapacity", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Value of Reservation Capacity is greater than Maximum Node Capacity. ReservationCapacity: {0}, MaximumNodeCapacity:{1}
    ///  
    /// </summary>
    internal static string Error_ReservationCapacityGreaterThanMaximumNodeCapacity {
        get {
            return ResourceManager.GetString("Error_ReservationCapacityGreaterThanMaximumNodeCapacity", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Value of MaximumCapacity ({0}) multiplied by Maximum Nodes ({1}) is greater than Total Capacity ({2}).
    ///  
    /// </summary>
    internal static string Error_MaximumCapacityGreaterThanTotalCapacity {
        get {
            return ResourceManager.GetString("Error_MaximumCapacityGreaterThanTotalCapacity", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Application is currently being updated
    ///  
    /// </summary>
    internal static string Error_ApplicationUpdateInProgress {
        get {
            return ResourceManager.GetString("Error_ApplicationUpdateInProgress", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Failed to delete file/folder during a backup operation.
    ///  
    /// </summary>
    internal static string Error_DeleteBackupFileFailed {
        get {
            return ResourceManager.GetString("Error_DeleteBackupFileFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Creating Service Fabric Cluster...
    ///  
    /// </summary>
    internal static string Info_CreatingServiceFabricCluster {
        get {
            return ResourceManager.GetString("Info_CreatingServiceFabricCluster", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    If it's taking too long, please check in Task Manager details and see if Fabric.exe for each node is running. If not, please look at: 1. traces in DeploymentTraces directory and 2. traces in FabricLogRoot configured in ClusterConfig.json.
    ///  
    /// </summary>
    internal static string Info_CreatingServiceFabricClusterDebugDetails {
        get {
            return ResourceManager.GetString("Info_CreatingServiceFabricClusterDebugDetails", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Your cluster is successfully created! You can connect and manage your cluster using Microsoft Azure Service Fabric Explorer or Powershell. To connect through Powershell, use any machine client connection endpoint, for example: 'Connect-ServiceFabricCluster {0}:{1}'.
    ///  
    /// </summary>
    internal static string Info_CreateServiceFabricClusterSucceeded {
        get {
            return ResourceManager.GetString("Info_CreateServiceFabricClusterSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The cluster is successfully removed.
    ///  
    /// </summary>
    internal static string Info_RemoveServiceFabricClusterSucceeded {
        get {
            return ResourceManager.GetString("Info_RemoveServiceFabricClusterSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Removing Microsoft Azure Service Fabric Cluster...
    ///  
    /// </summary>
    internal static string Info_RemovingServiceFabricCluster {
        get {
            return ResourceManager.GetString("Info_RemovingServiceFabricCluster", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Remove Cluster failed. Please make sure there is an existing cluster to remove. For more information please check traces in FabricLogRoot.
    ///  
    /// </summary>
    internal static string Error_RemoveServiceFabricClusterFailed {
        get {
            return ResourceManager.GetString("Error_RemoveServiceFabricClusterFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Create Cluster failed. For more information please look at traces in FabricLogRoot.
    ///  
    /// </summary>
    internal static string Error_CreateServiceFabricClusterFailed {
        get {
            return ResourceManager.GetString("Error_CreateServiceFabricClusterFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The system has a counter with the same category and counter name, but its counter type is not what we expect.
    ///  
    /// </summary>
    internal static string UnexpectedCounterType {
        get {
            return ResourceManager.GetString("UnexpectedCounterType", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cert store open failed. Error:{0}
    ///  
    /// </summary>
    internal static string Error_CertOpenStoreReturnsError {
        get {
            return ResourceManager.GetString("Error_CertOpenStoreReturnsError", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Decryption failed. Error:{0}
    ///  
    /// </summary>
    internal static string Error_CryptDecryptMessageReturnsError {
        get {
            return ResourceManager.GetString("Error_CryptDecryptMessageReturnsError", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Using ImageStoreConnectionString='{0}'
    ///  
    /// </summary>
    internal static string PowerShell_Using_ImageStoreConnectionString {
        get {
            return ResourceManager.GetString("PowerShell_Using_ImageStoreConnectionString", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    EventsHealthStateFilter is deprecated - use EventsFilter.
    ///  
    /// </summary>
    internal static string PowerShell_EventsHealthStateFilter_Deprecated {
        get {
            return ResourceManager.GetString("PowerShell_EventsHealthStateFilter_Deprecated", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ApplicationsHealthStateFilter is deprecated - use ApplicationsFilter.
    ///  
    /// </summary>
    internal static string PowerShell_ApplicationsHealthStateFilter_Deprecated {
        get {
            return ResourceManager.GetString("PowerShell_ApplicationsHealthStateFilter_Deprecated", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    DeployedApplicationsHealthStateFilter is deprecated - use DeployedApplicationsFilter.
    ///  
    /// </summary>
    internal static string PowerShell_DeployedApplicationsHealthStateFilter_Deprecated {
        get {
            return ResourceManager.GetString("PowerShell_DeployedApplicationsHealthStateFilter_Deprecated", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    DeployedServicePackagesHealthStateFilter is deprecated - use DeployedServicePackagesFilter.
    ///  
    /// </summary>
    internal static string PowerShell_DeployedServicePackagesHealthStateFilter_Deprecated {
        get {
            return ResourceManager.GetString("PowerShell_DeployedServicePackagesHealthStateFilter_Deprecated", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    NodesHealthStateFilter is deprecated - use NodesFilter.
    ///  
    /// </summary>
    internal static string PowerShell_NodesHealthStateFilter_Deprecated {
        get {
            return ResourceManager.GetString("PowerShell_NodesHealthStateFilter_Deprecated", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    PartitionsHealthStateFilter is deprecated - use PartitionsFilter.
    ///  
    /// </summary>
    internal static string PowerShell_PartitionsHealthStateFilter_Deprecated {
        get {
            return ResourceManager.GetString("PowerShell_PartitionsHealthStateFilter_Deprecated", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ReplicasHealthStateFilter is deprecated - use ReplicasFilter.
    ///  
    /// </summary>
    internal static string PowerShell_ReplicasHealthStateFilter_Deprecated {
        get {
            return ResourceManager.GetString("PowerShell_ReplicasHealthStateFilter_Deprecated", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ServicesHealthStateFilter is deprecated - use ServicesFilter.
    ///  
    /// </summary>
    internal static string PowerShell_ServicesHealthStateFilter_Deprecated {
        get {
            return ResourceManager.GetString("PowerShell_ServicesHealthStateFilter_Deprecated", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ShowProgress is not supported for XStore or file Image Store.
    ///  
    /// </summary>
    internal static string Powershell_ShowProgressNotSupported {
        get {
            return ResourceManager.GetString("Powershell_ShowProgressNotSupported", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    File count cannnot be verified. TotalLocalFileCount: '{0}', CompletedFileCount: '{1}', TotalRemoteFileCount: '{2}'.
    ///  
    /// </summary>
    internal static string Powershell_FileCountCannotBeVerified {
        get {
            return ResourceManager.GetString("Powershell_FileCountCannotBeVerified", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Copying application package from '{0}' to '{1}'
    ///  
    /// </summary>
    internal static string Powershell_Activity_Copying {
        get {
            return ResourceManager.GetString("Powershell_Activity_Copying", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Copying {0} bytes ...
    ///  
    /// </summary>
    internal static string Powershell_Status_Copying {
        get {
            return ResourceManager.GetString("Powershell_Status_Copying", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Compressing application package at {0}
    ///  
    /// </summary>
    internal static string Powershell_Activity_Compressing {
        get {
            return ResourceManager.GetString("Powershell_Activity_Compressing", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Compressing {0} bytes ...
    ///  
    /// </summary>
    internal static string Powershell_Status_Compressing {
        get {
            return ResourceManager.GetString("Powershell_Status_Compressing", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Uncompressing application package at {0}
    ///  
    /// </summary>
    internal static string Powershell_Activity_Uncompressing {
        get {
            return ResourceManager.GetString("Powershell_Activity_Uncompressing", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Uncompressing {0} bytes ...
    ///  
    /// </summary>
    internal static string Powershell_Status_Uncompressing {
        get {
            return ResourceManager.GetString("Powershell_Status_Uncompressing", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Calculating package and manifest checksums
    ///  
    /// </summary>
    internal static string Powershell_Activity_Checksum {
        get {
            return ResourceManager.GetString("Powershell_Activity_Checksum", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Uploading application package from {0}
    ///  
    /// </summary>
    internal static string Powershell_Activity_Uploading {
        get {
            return ResourceManager.GetString("Powershell_Activity_Uploading", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Uploading {0} bytes ...
    ///  
    /// </summary>
    internal static string Powershell_Status_Uploading {
        get {
            return ResourceManager.GetString("Powershell_Status_Uploading", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Estimating application package size at {0}
    ///  
    /// </summary>
    internal static string Powershell_Activity_Estimating {
        get {
            return ResourceManager.GetString("Powershell_Activity_Estimating", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Estimating {0} bytes ...
    ///  
    /// </summary>
    internal static string Powershell_Status_Estimating {
        get {
            return ResourceManager.GetString("Powershell_Status_Estimating", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Compressed {0}/{1} {2} ({3:P1} complete)
    ///  
    /// </summary>
    internal static string Powershell_Status_Compressing_Details {
        get {
            return ResourceManager.GetString("Powershell_Status_Compressing_Details", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Uncompressed {0}/{1} {2} ({3:P1} complete)
    ///  
    /// </summary>
    internal static string Powershell_Status_Uncompressing_Details {
        get {
            return ResourceManager.GetString("Powershell_Status_Uncompressing_Details", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Generated {0}/{1} checksum {2} ({3:P1} complete)
    ///  
    /// </summary>
    internal static string Powershell_Status_Checksum_Details {
        get {
            return ResourceManager.GetString("Powershell_Status_Checksum_Details", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Uploaded {0}/{1} {2} ({3:P1} complete)
    ///  
    /// </summary>
    internal static string Powershell_Status_Uploading_Details {
        get {
            return ResourceManager.GetString("Powershell_Status_Uploading_Details", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Transferred {0}/{1} {2} ({3:P1} complete)
    ///  
    /// </summary>
    internal static string Powershell_Status_Transferring_Details {
        get {
            return ResourceManager.GetString("Powershell_Status_Transferring_Details", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Replicated {0}/{1} {2} ({3:P1} complete)
    ///  
    /// </summary>
    internal static string Powershell_Status_Replication_Details {
        get {
            return ResourceManager.GetString("Powershell_Status_Replication_Details", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ExtractInstallerService failed to extract {0}.
    ///  
    /// </summary>
    internal static string Error_ExtractInstallerService {
        get {
            return ResourceManager.GetString("Error_ExtractInstallerService", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid value {0} for parameter {1}. Value should be between {2} and {3}.
    ///  
    /// </summary>
    internal static string Error_ValueShouldBeBetweenTwoValues {
        get {
            return ResourceManager.GetString("Error_ValueShouldBeBetweenTwoValues", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Counter path string \"{0}\" could not be parsed.
    ///  
    /// </summary>
    internal static string Error_PerformanceCounterBadCounterName {
        get {
            return ResourceManager.GetString("Error_PerformanceCounterBadCounterName", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unable to allocate required temporary buffer!
    ///  
    /// </summary>
    internal static string Error_PerformanceCounterOutOfMemory {
        get {
            return ResourceManager.GetString("Error_PerformanceCounterOutOfMemory", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Counter {0} doesn't exist on this system!
    ///  
    /// </summary>
    internal static string Error_PerformanceCounterUnavailable {
        get {
            return ResourceManager.GetString("Error_PerformanceCounterUnavailable", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid default load metric value, for stateful service the input should follow "PrimaryCount,<Weight>,1,0","SecondaryCount,<Weight>,0,1","ReplicaCount,<Weight>,1,1","Count,<Weight>,1,1" and for stateless service the input should follow "InstanceCount,<Weight>,1","Count,<Weight>,1".
    ///  
    /// </summary>
    internal static string Error_InvalidDefaultMetricValue {
        get {
            return ResourceManager.GetString("Error_InvalidDefaultMetricValue", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    This test command operation is not valid for the current state of the test command.
    ///  
    /// </summary>
    internal static string Error_InvalidTestCommandState {
        get {
            return ResourceManager.GetString("Error_InvalidTestCommandState", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    This test command operation already exists.
    ///  
    /// </summary>
    internal static string Error_TestCommandAlreadyExists {
        get {
            return ResourceManager.GetString("Error_TestCommandAlreadyExists", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Creation or deletion was terminated due to persistent failures.
    ///  
    /// </summary>
    internal static string Error_CMOperationFailed {
        get {
            return ResourceManager.GetString("Error_CMOperationFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    RemoveNodeConfig operation is not supported on remote machine for MSI deployment.
    ///  
    /// </summary>
    internal static string Error_RemoveNodeConfigOperationNotSupportedRemovelyWithMSI {
        get {
            return ResourceManager.GetString("Error_RemoveNodeConfigOperationNotSupportedRemovelyWithMSI", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The Data Collection Agent (DCA) had an unhandled configuration exception and will be stopped. Diagnostics information will be left uncollected if this continues to happen. {0}
    ///  
    /// </summary>
    internal static string DCAError_ConfigurationUnhandledExceptionHealthDescription {
        get {
            return ResourceManager.GetString("DCAError_ConfigurationUnhandledExceptionHealthDescription", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The Data Collection Agent (DCA) had an unhandled exception and will be stopped. Diagnostics information will be left uncollected if this continues to happen. {0}
    ///  
    /// </summary>
    internal static string DCAError_UnhandledExceptionHealthDescription {
        get {
            return ResourceManager.GetString("DCAError_UnhandledExceptionHealthDescription", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    DCA is running.
    ///  
    /// </summary>
    internal static string DCAOk_Running {
        get {
            return ResourceManager.GetString("DCAOk_Running", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Passed-in DataLossMode is unsupported. This is likely because the client has a newer version than the service.
    ///  
    /// </summary>
    internal static string Error_UnsupportedDataLossMode {
        get {
            return ResourceManager.GetString("Error_UnsupportedDataLossMode", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Passed-in QuorumLossMode is unsupported. This is likely because the client has a newer version than the service.
    ///  
    /// </summary>
    internal static string Error_UnsupportedQuorumLossMode {
        get {
            return ResourceManager.GetString("Error_UnsupportedQuorumLossMode", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Passed-in RestartPartitionMode is unsupported. This is likely because the client has a newer version than the service.
    ///  
    /// </summary>
    internal static string Error_UnsupportedRestartPartitionMode {
        get {
            return ResourceManager.GetString("Error_UnsupportedRestartPartitionMode", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Waiting for upgrade to complete...
    ///  
    /// </summary>
    internal static string Info_WaitingForUpgradeToComplete {
        get {
            return ResourceManager.GetString("Info_WaitingForUpgradeToComplete", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Upgrade has completed...
    ///  
    /// </summary>
    internal static string Info_UpgradeHasCompleted {
        get {
            return ResourceManager.GetString("Info_UpgradeHasCompleted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Upgrade has failed...
    ///  
    /// </summary>
    internal static string Error_UpgradeHasFailed {
        get {
            return ResourceManager.GetString("Error_UpgradeHasFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Upgrade has failed. Rollback has completed...
    ///  
    /// </summary>
    internal static string Error_UpgradeHasFailedRollbackCompleted {
        get {
            return ResourceManager.GetString("Error_UpgradeHasFailedRollbackCompleted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Removing package from Image Store...
    ///  
    /// </summary>
    internal static string Info_RemovingPackageFromImageStore {
        get {
            return ResourceManager.GetString("Info_RemovingPackageFromImageStore", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cluster size: {0} is not supported. Total node count needs to be either one node for testing/demo purpose or at least {1} and maximum {2}.
    ///  
    /// </summary>
    internal static string Error_ClusterSizeNotSupported {
        get {
            return ResourceManager.GetString("Error_ClusterSizeNotSupported", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    NodeTypes cannot be null.
    ///  
    /// </summary>
    internal static string Error_NodeTypesCannotBeNull {
        get {
            return ResourceManager.GetString("Error_NodeTypesCannotBeNull", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Nodes on same machine cannot use the same NodeType. {0} and {1} are sharing the same nodeType.
    ///  
    /// </summary>
    internal static string Error_NodesOnSameMachineCannotUseTheSameNodeType {
        get {
            return ResourceManager.GetString("Error_NodesOnSameMachineCannotUseTheSameNodeType", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Processing and validating cluster config.
    ///  
    /// </summary>
    internal static string Info_SFProcessingClusterConfig {
        get {
            return ResourceManager.GetString("Info_SFProcessingClusterConfig", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Writing cluster manifest to {0}.
    ///  
    /// </summary>
    internal static string Info_SFWritingClusterManifest {
        get {
            return ResourceManager.GetString("Info_SFWritingClusterManifest", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Configuring nodes.
    ///  
    /// </summary>
    internal static string Info_SFConfiguringNodes {
        get {
            return ResourceManager.GetString("Info_SFConfiguringNodes", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    CreateCluster completed.
    ///  
    /// </summary>
    internal static string Info_SFCreateClusterCompleted {
        get {
            return ResourceManager.GetString("Info_SFCreateClusterCompleted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    RemoveCluster completed.
    ///  
    /// </summary>
    internal static string Info_SFRemoveClusterCompleted {
        get {
            return ResourceManager.GetString("Info_SFRemoveClusterCompleted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cleaning up faulted installation.
    ///  
    /// </summary>
    internal static string Info_SFRollbackCleanup {
        get {
            return ResourceManager.GetString("Info_SFRollbackCleanup", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Running Fabric service installation.
    ///  
    /// </summary>
    internal static string Info_SFServiceInstallation {
        get {
            return ResourceManager.GetString("Info_SFServiceInstallation", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Starting FabricInstallerSvc on machine {0}
    ///  
    /// </summary>
    internal static string Info_SFInstallerServiceStarting {
        get {
            return ResourceManager.GetString("Info_SFInstallerServiceStarting", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Successfully started FabricInstallerSvc on machine {0}
    ///  
    /// </summary>
    internal static string Info_SFInstallerServiceStarted {
        get {
            return ResourceManager.GetString("Info_SFInstallerServiceStarted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    FabricInstallerSvc completed on machine {0}
    ///  
    /// </summary>
    internal static string Info_SFInstallerServiceCompleted {
        get {
            return ResourceManager.GetString("Info_SFInstallerServiceCompleted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Waiting for the FabricHostSvc to be in Running state on machine {0}
    ///  
    /// </summary>
    internal static string Info_SFWaitingFabricHostRunning {
        get {
            return ResourceManager.GetString("Info_SFWaitingFabricHostRunning", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Successfully started FabricHostSvc on machine {0}
    ///  
    /// </summary>
    internal static string Info_SFFabricHostStarted {
        get {
            return ResourceManager.GetString("Info_SFFabricHostStarted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Starting FabricHostSvc on machine {0}
    ///  
    /// </summary>
    internal static string Info_SFFabricHostStarting {
        get {
            return ResourceManager.GetString("Info_SFFabricHostStarting", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Verifying remote procedure call access against cluster machines.
    ///  
    /// </summary>
    internal static string Info_SFRpcInfo {
        get {
            return ResourceManager.GetString("Info_SFRpcInfo", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Default installation directory chosen based on system drive of machine '{0}'.
    ///  
    /// </summary>
    internal static string Info_SFDefaultFabricRoot {
        get {
            return ResourceManager.GetString("Info_SFDefaultFabricRoot", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Installation directory on target machines: {0}
    ///  
    /// </summary>
    internal static string Info_SFInstallationDirectory {
        get {
            return ResourceManager.GetString("Info_SFInstallationDirectory", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Extracting Installer Service files to "{0}".
    ///  
    /// </summary>
    internal static string Info_SFExtractingServiceFiles {
        get {
            return ResourceManager.GetString("Info_SFExtractingServiceFiles", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Copying installer to all machines.
    ///  
    /// </summary>
    internal static string Info_SFCopyingInstallerAndPackage {
        get {
            return ResourceManager.GetString("Info_SFCopyingInstallerAndPackage", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Failed to clean directory: {0}. Best effort, continuing.
    ///  
    /// </summary>
    internal static string Info_CleanTempDirectoryFailed {
        get {
            return ResourceManager.GetString("Info_CleanTempDirectoryFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Configuring machine '{0}'.
    ///  
    /// </summary>
    internal static string Info_SFConfiguringMachine {
        get {
            return ResourceManager.GetString("Info_SFConfiguringMachine", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Machine {0} configured.
    ///  
    /// </summary>
    internal static string Info_SFMachineConfigured {
        get {
            return ResourceManager.GetString("Info_SFMachineConfigured", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Removing configuration from machine {0}
    ///  
    /// </summary>
    internal static string Info_SFRemovingConfiguration {
        get {
            return ResourceManager.GetString("Info_SFRemovingConfiguration", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Configuration removed from machine {0}
    ///  
    /// </summary>
    internal static string Info_SFConfigurationRemoved {
        get {
            return ResourceManager.GetString("Info_SFConfigurationRemoved", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Copying Installer Service file "{0}"
    ///  
    /// </summary>
    internal static string Info_SFCopyingInstallerFile {
        get {
            return ResourceManager.GetString("Info_SFCopyingInstallerFile", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Deleting Fabric package {0} on machine {1}.
    ///  
    /// </summary>
    internal static string Info_SFDeletingFabricPackage {
        get {
            return ResourceManager.GetString("Info_SFDeletingFabricPackage", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    DeleteFabricPackage threw {0} on machine {1}. Best effort, continuing.
    ///  
    /// </summary>
    internal static string Info_SFDeleteFabricPackageFailed {
        get {
            return ResourceManager.GetString("Info_SFDeleteFabricPackageFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Done deleting {0} on machine {1}.
    ///  
    /// </summary>
    internal static string Info_SFDeleteFabricPackageCompleted {
        get {
            return ResourceManager.GetString("Info_SFDeleteFabricPackageCompleted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Exception {0} deleting temporary manifest: {1}
    ///  
    /// </summary>
    internal static string Error_SFDeletingTempManifest {
        get {
            return ResourceManager.GetString("Error_SFDeletingTempManifest", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    CreateCluster Error: {0}
    ///  
    /// </summary>
    internal static string Error_SFCreateClusterAsyncGeneric {
        get {
            return ResourceManager.GetString("Error_SFCreateClusterAsyncGeneric", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Errors occurred during cluster creation.
    ///  
    /// </summary>
    internal static string Error_SFCreateClusterErrorsPrompt {
        get {
            return ResourceManager.GetString("Error_SFCreateClusterErrorsPrompt", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    CreateCluster Exception {0}: {1}
    ///  
    /// </summary>
    internal static string Error_SFCreateClusterExList {
        get {
            return ResourceManager.GetString("Error_SFCreateClusterExList", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Rollback failed with {0}
    ///  
    /// </summary>
    internal static string Error_SFRollbackFailed {
        get {
            return ResourceManager.GetString("Error_SFRollbackFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    RemoveCluster Exception: {0}
    ///  
    /// </summary>
    internal static string Error_SFCreateClusterEx {
        get {
            return ResourceManager.GetString("Error_SFCreateClusterEx", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    "Unable to find {0} on machine {1}"
    ///  
    /// </summary>
    internal static string Error_SFServiceNotFound {
        get {
            return ResourceManager.GetString("Error_SFServiceNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unable to successfully stop {0} on machine {1}.
    ///  
    /// </summary>
    internal static string Error_SFServiceCannotBeStopped {
        get {
            return ResourceManager.GetString("Error_SFServiceCannotBeStopped", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Timed out waiting for Installer Service to start for machine {0}.
    ///  
    /// </summary>
    internal static string Error_SFInstallerServiceStartTimeout {
        get {
            return ResourceManager.GetString("Error_SFInstallerServiceStartTimeout", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Timed out waiting for Installer Service to complete for machine {0}. Investigation order: FabricInstallerService -> FabricSetup -> FabricDeployer -> Fabric
    ///  
    /// </summary>
    internal static string Error_SFInstallerServiceTimeoutDetails {
        get {
            return ResourceManager.GetString("Error_SFInstallerServiceTimeoutDetails", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    FabricHostSvc was not installed by FabricInstallerSvc on machine {0}. FabricSetup may have failed.
    ///  
    /// </summary>
    internal static string Error_SFFabricHostNotInstalled {
        get {
            return ResourceManager.GetString("Error_SFFabricHostNotInstalled", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    FabricHostSvc is not running after installation on machine {0}. May need to reinstall.
    ///  
    /// </summary>
    internal static string Error_SFFabricHostNotRunning {
        get {
            return ResourceManager.GetString("Error_SFFabricHostNotRunning", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Timed out {0}
    ///  
    /// </summary>
    internal static string Error_SFTimedOut {
        get {
            return ResourceManager.GetString("Error_SFTimedOut", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    VerifyPreconditions: clusterConfigPath is invalid.
    ///  
    /// </summary>
    internal static string Error_SFPreconditionsConfigPathInvalid {
        get {
            return ResourceManager.GetString("Error_SFPreconditionsConfigPathInvalid", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    VerifyPreconditions: fabricPackageSourcePath must be a CAB file.
    ///  
    /// </summary>
    internal static string Error_SFPreconditionsPackageSrcMustBeCab {
        get {
            return ResourceManager.GetString("Error_SFPreconditionsPackageSrcMustBeCab", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    VerifyPreconditions: fabricPackageSourcePath file does not exist.
    ///  
    /// </summary>
    internal static string Error_SFPreconditionsPackageNotExist {
        get {
            return ResourceManager.GetString("Error_SFPreconditionsPackageNotExist", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    This API requires administrator privileges on the local machine.
    ///  
    /// </summary>
    internal static string Error_SFPreconditionsAdminUserRequired {
        get {
            return ResourceManager.GetString("Error_SFPreconditionsAdminUserRequired", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    VerifyPreconditions: 'fabricPackageSourcePath' and 'fabricPackageDestinationPath' are only supported when 'fabricPackageType' is set to XCopyPackage
    ///  
    /// </summary>
    internal static string Error_SFPreconditionsMsiPackageUnexpected {
        get {
            return ResourceManager.GetString("Error_SFPreconditionsMsiPackageUnexpected", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    VerifyPreconditions: Supplied runtime package version doesn't match the code version specified in the cluster configuration field [codeVersion].
    ///  
    /// </summary>
    internal static string Error_SFPreconditionsVersionMismatch {
        get {
            return ResourceManager.GetString("Error_SFPreconditionsVersionMismatch", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Machine {0} encountered error for CheckRPCAccess. HRESULT={0}
    ///  
    /// </summary>
    internal static string Error_SFRpcGenericNoInner {
        get {
            return ResourceManager.GetString("Error_SFRpcGenericNoInner", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Machine {0} could not be reached for RPC. Check network connectivity. HRESULT={1} ERROR_BAD_NETPATH
    ///  
    /// </summary>
    internal static string Error_SFRpcIoNetpath {
        get {
            return ResourceManager.GetString("Error_SFRpcIoNetpath", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Machine {0} was too busy to complete the RPC operation. Check machine performance counters for Connections Active/Failures/Reset. HRESULT={1} RPC_S_SERVER_TOO_BUSY
    ///  
    /// </summary>
    internal static string Error_SFRpcIoTooBusy {
        get {
            return ResourceManager.GetString("Error_SFRpcIoTooBusy", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Machine {0} RPC policy is preventing execution. The remote procedure call failed and did not execute. HRESULT={1} RPC_S_CALL_FAILED_DNE
    ///  
    /// </summary>
    internal static string Error_SFRpcIoFailedDne {
        get {
            return ResourceManager.GetString("Error_SFRpcIoFailedDne", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Machine {0} failed RPC check with IOException. HRESULT={1}
    ///  
    /// </summary>
    internal static string Error_SFRpcIoGeneric {
        get {
            return ResourceManager.GetString("Error_SFRpcIoGeneric", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Machine {0} access is not allowed. HRESULT={1} COR_E_SECURITY
    ///  
    /// </summary>
    internal static string Error_SFRpcSecAccess {
        get {
            return ResourceManager.GetString("Error_SFRpcSecAccess", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Machine {0} failed RPC check with SecurityException. HRESULT={1}
    ///  
    /// </summary>
    internal static string Error_SFRpcSecGeneric {
        get {
            return ResourceManager.GetString("Error_SFRpcSecGeneric", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Machine {0} cannot open the key. Check registry permissions/access. HRESULT={1}
    ///  
    /// </summary>
    internal static string Error_SFRpcNullRegAccess {
        get {
            return ResourceManager.GetString("Error_SFRpcNullRegAccess", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Machine {0} failed RPC check with NullReferenceException. HRESULT={1}
    ///  
    /// </summary>
    internal static string Error_SFRpcNullGeneric {
        get {
            return ResourceManager.GetString("Error_SFRpcNullGeneric", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Machine {0} failed CheckRPCAccess. HRESULT={0}
    ///  
    /// </summary>
    internal static string Error_SFRpcGeneric {
        get {
            return ResourceManager.GetString("Error_SFRpcGeneric", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Opening RemoteRegistry named pipe for machine {0}.
    ///  
    /// </summary>
    internal static string Info_SFOpenRegNamedPipe {
        get {
            return ResourceManager.GetString("Info_SFOpenRegNamedPipe", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    RemoteRegistry named pipe opened for machine {0}.
    ///  
    /// </summary>
    internal static string Info_SFOpenRegNamedPipeSuccess {
        get {
            return ResourceManager.GetString("Info_SFOpenRegNamedPipeSuccess", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    RemoteRegistry Named pipe connection timed out for machine {0}: {1}
    ///  
    /// </summary>
    internal static string Error_SFOpenRegNamedPipeTimeout {
        get {
            return ResourceManager.GetString("Error_SFOpenRegNamedPipeTimeout", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    RemoteRegistry Named pipe client is already connected for machine {0}: {1}
    ///  
    /// </summary>
    internal static string Error_SFOpenRegNamedPipeAlreadyConnected {
        get {
            return ResourceManager.GetString("Error_SFOpenRegNamedPipeAlreadyConnected", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    RemoteRegistry Named pipe server is already connected to another client for machine {0}: {1}
    ///  
    /// </summary>
    internal static string Error_SFOpenRegNamedPipeAnotherClientAlreadyConnected {
        get {
            return ResourceManager.GetString("Error_SFOpenRegNamedPipeAnotherClientAlreadyConnected", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Machine {0} failed CheckRPCAccess with unexpected error. HRESULT={0}
    ///  
    /// </summary>
    internal static string Error_SFRpcUnexpectedCodeError {
        get {
            return ResourceManager.GetString("Error_SFRpcUnexpectedCodeError", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Source package path invalid: {0}.
    ///  
    /// </summary>
    internal static string Error_SFSourcePackageInvalidPath {
        get {
            return ResourceManager.GetString("Error_SFSourcePackageInvalidPath", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    RemoveNodeConfiguration did not complete successfully on machine {0}. Error: {1}
    ///  
    /// </summary>
    internal static string Error_SFRemoveConfigurationFailed {
        get {
            return ResourceManager.GetString("Error_SFRemoveConfigurationFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Error creating installer directory on machine {0}.
    ///  
    /// </summary>
    internal static string Error_SFCreateInstallerDirectoryFailure {
        get {
            return ResourceManager.GetString("Error_SFCreateInstallerDirectoryFailure", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Error creating file {0} on machine {1}.
    ///  
    /// </summary>
    internal static string Error_SFErrorCreatingFile {
        get {
            return ResourceManager.GetString("Error_SFErrorCreatingFile", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Error creating CAB file {0} on machine {1}.
    ///  
    /// </summary>
    internal static string Error_SFErrorCreatingCab {
        get {
            return ResourceManager.GetString("Error_SFErrorCreatingCab", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Service {0} is in state {1} on machine {2} and hence trying to stop it
    ///  
    /// </summary>
    internal static string Warning_SFServiceNotStoppedStopping {
        get {
            return ResourceManager.GetString("Warning_SFServiceNotStoppedStopping", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    FabricRoot not found in registry of target machine {0}.
    ///  
    /// </summary>
    internal static string Warning_SFFabricRootNotFoundReg {
        get {
            return ResourceManager.GetString("Warning_SFFabricRootNotFoundReg", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Duplicate NodeTypes are not allowed. NodeType: {0} has a duplicate.
    ///  
    /// </summary>
    internal static string Error_DuplicateNodeTypesNotAllowed {
        get {
            return ResourceManager.GetString("Error_DuplicateNodeTypesNotAllowed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    HttpGatewayEndpoint port is out of range. MinAllowedPortNumber: {0}; MaxAllowedPortNumber: {1}.
    ///  
    /// </summary>
    internal static string Error_HttpGatewayEndpointOutOfRange {
        get {
            return ResourceManager.GetString("Error_HttpGatewayEndpointOutOfRange", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ClientConnectionEndpoint port is out of range. MinAllowedPortNumber: {0}; MaxAllowedPortNumber: {1}.
    ///  
    /// </summary>
    internal static string Error_ClientConnectionEndpointOutOfRange {
        get {
            return ResourceManager.GetString("Error_ClientConnectionEndpointOutOfRange", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    HttpApplicationGatewayEndpoint port is out of range. MinAllowedPortNumber: {0}; MaxAllowedPortNumber: {1}.
    ///  
    /// </summary>
    internal static string Error_HttpApplicationGatewayEndpointOutOfRange {
        get {
            return ResourceManager.GetString("Error_HttpApplicationGatewayEndpointOutOfRange", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cluster size is not supported. Total nodes: {0}; MaxClusterSize: {1}.
    ///  
    /// </summary>
    internal static string Error_ClusterSizeIsNotSupported {
        get {
            return ResourceManager.GetString("Error_ClusterSizeIsNotSupported", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid number of primary nodeTypes. For non-ScaleMin deployment, there must be exactly one primary node type.
    ///  
    /// </summary>
    internal static string Error_InvalidNumberOfPrimaryNodeTypes {
        get {
            return ResourceManager.GetString("Error_InvalidNumberOfPrimaryNodeTypes", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Primary node type node count is not sufficient for reliability level {0}; You have total primary node type nodes: {1}; the required seed node count for this reliability level is {2}.
    ///  
    /// </summary>
    internal static string Error_PrimaryNodeTypeNodeCountIsNotSufficient {
        get {
            return ResourceManager.GetString("Error_PrimaryNodeTypeNodeCountIsNotSufficient", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} Port out of range. Start port: {1}; MinAllowedPortNumber: {2};  MaxAllowedPortNumber: {3}.
    ///  
    /// </summary>
    internal static string Error_StartPortOutOfRange {
        get {
            return ResourceManager.GetString("Error_StartPortOutOfRange", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} Port out of range. End port: {1}; MinAllowedPortNumber: {2};  MaxAllowedPortNumber: {3}.
    ///  
    /// </summary>
    internal static string Error_EndPortOutOfRange {
        get {
            return ResourceManager.GetString("Error_EndPortOutOfRange", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Start port is greater than end port.
    ///  
    /// </summary>
    internal static string Error_StartPortIsGreaterThanEndPort {
        get {
            return ResourceManager.GetString("Error_StartPortIsGreaterThanEndPort", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The specified CodePackage {0} does not have ContainerHost specified. RepositoryCredentials are only valid for ContainerHosts.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidRepositoryCredentials {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidRepositoryCredentials", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    VerifyPreconditions: Add NodeName is invalid.
    ///  
    /// </summary>
    internal static string Error_SFPreconditionsNodeNameInvalid {
        get {
            return ResourceManager.GetString("Error_SFPreconditionsNodeNameInvalid", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    VerifyPreconditions: Add NodeType is invalid.
    ///  
    /// </summary>
    internal static string Error_SFPreconditionsNodeTypeInvalid {
        get {
            return ResourceManager.GetString("Error_SFPreconditionsNodeTypeInvalid", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    VerifyPreconditions: Add FaultDomain is invalid.
    ///  
    /// </summary>
    internal static string Error_SFPreconditionsFaultDomainInvalid {
        get {
            return ResourceManager.GetString("Error_SFPreconditionsFaultDomainInvalid", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    VerifyPreconditions: Add UpgradeDomain is invalid.
    ///  
    /// </summary>
    internal static string Error_SFPreconditionsUpgradeDomainInvalid {
        get {
            return ResourceManager.GetString("Error_SFPreconditionsUpgradeDomainInvalid", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    VerifyPreconditions: Add Node ipaddress is invalid.
    ///  
    /// </summary>
    internal static string Error_SFPreconditionsNodeIPAddressInvalid {
        get {
            return ResourceManager.GetString("Error_SFPreconditionsNodeIPAddressInvalid", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Adding Service Fabric Node...
    ///  
    /// </summary>
    internal static string Info_AddServiceFabricNode {
        get {
            return ResourceManager.GetString("Info_AddServiceFabricNode", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Removing Service Fabric Node...
    ///  
    /// </summary>
    internal static string Info_RemoveServiceFabricNode {
        get {
            return ResourceManager.GetString("Info_RemoveServiceFabricNode", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    AddNode completed.
    ///  
    /// </summary>
    internal static string Info_SFAddNodeCompleted {
        get {
            return ResourceManager.GetString("Info_SFAddNodeCompleted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    RemoveNode completed.
    ///  
    /// </summary>
    internal static string Info_SFRemoveNodeCompleted {
        get {
            return ResourceManager.GetString("Info_SFRemoveNodeCompleted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Removing node {0}.
    ///  
    /// </summary>
    internal static string Info_SFRemovingNode_Formatted {
        get {
            return ResourceManager.GetString("Info_SFRemovingNode_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cannot remove Node {0} because it is a seed node. Seed nodes are chosen from the primary node type at time of deployment.
    ///  
    /// </summary>
    internal static string Error_SFRemoveNodeCannotRemoveSeed_Formatted {
        get {
            return ResourceManager.GetString("Error_SFRemoveNodeCannotRemoveSeed_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    AddNode Exception {0}: {1}
    ///  
    /// </summary>
    internal static string Error_SFAddNodeExList {
        get {
            return ResourceManager.GetString("Error_SFAddNodeExList", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Node is not found in the cluster.
    ///  
    /// </summary>
    internal static string Error_SFRemoveNodeNotFound {
        get {
            return ResourceManager.GetString("Error_SFRemoveNodeNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Retrying Remove Node because of retryable exception {0}.
    ///  
    /// </summary>
    internal static string Error_SFRemoveNodeRetrying_Formatted {
        get {
            return ResourceManager.GetString("Error_SFRemoveNodeRetrying_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    RemoveNode Exception: {0}
    ///  
    /// </summary>
    internal static string Error_SFRemoveNodeExList {
        get {
            return ResourceManager.GetString("Error_SFRemoveNodeExList", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Errors occurred during Add Node.
    ///  
    /// </summary>
    internal static string Error_SFAddNodeErrorsPrompt {
        get {
            return ResourceManager.GetString("Error_SFAddNodeErrorsPrompt", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    JSON config is invalid. Check syntax/model.
    ///  
    /// </summary>
    internal static string Error_SFJsonConfigInvalid {
        get {
            return ResourceManager.GetString("Error_SFJsonConfigInvalid", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    IsUriReachableAsync for '{0}' failed with: {1}.
    ///  
    /// </summary>
    internal static string Error_SFUriUnreachable_Formatted {
        get {
            return ResourceManager.GetString("Error_SFUriUnreachable_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The Data Collection Agent (DCA) had an unhandled exception loading the plugin for section {0} in the cluster manifest. Some diagnostics information will be left uncollected if this continues to happen. {1}
    ///  
    /// </summary>
    internal static string DCAError_UnhandledPluginExceptionHealthDescription {
        get {
            return ResourceManager.GetString("DCAError_UnhandledPluginExceptionHealthDescription", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The Data Collection Agent (DCA) does not have enough disk space to operate. Diagnostics information will be left uncollected if this continues to happen.
    ///  
    /// </summary>
    internal static string DCAWarning_InsufficientDiskSpaceHealthDescription {
        get {
            return ResourceManager.GetString("DCAWarning_InsufficientDiskSpaceHealthDescription", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The Data Collection Agent (DCA) is unauthorized while accessing {0}. Diagnostics functionality will be diminished without access to folder.
    ///  
    /// </summary>
    internal static string DCAWarning_UnauthorizedAccessHealthDescription {
        get {
            return ResourceManager.GetString("DCAWarning_UnauthorizedAccessHealthDescription", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Chaos has not been started; please call StartChaos with appropriate parameters.
    ///  
    /// </summary>
    internal static string ChaosError_ChaosEngineNotReady {
        get {
            return ResourceManager.GetString("ChaosError_ChaosEngineNotReady", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Chaos is already running; to run Chaos with a different set of parameters, please first stop Choas and then start with the new parameters.
    ///  
    /// </summary>
    internal static string ChaosError_ChaosAlreadyRunning {
        get {
            return ResourceManager.GetString("ChaosError_ChaosAlreadyRunning", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The cluster is going through upgrade, Chaos is waiting for the upgrade to complete before moving on with the next set of faults.
    ///  
    /// </summary>
    internal static string ChaosInfo_WaitingForQuiescentCluster {
        get {
            return ResourceManager.GetString("ChaosInfo_WaitingForQuiescentCluster", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The context dictionary in StartChaos must not have more than 100 entries.
    ///  
    /// </summary>
    internal static string ChaosError_ContextTooLarge {
        get {
            return ResourceManager.GetString("ChaosError_ContextTooLarge", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Chaos is stopped, because TimeToRun specified in ChaosParameters is up.
    ///  
    /// </summary>
    internal static string ChaosInfo_TimeToRunIsUp {
        get {
            return ResourceManager.GetString("ChaosInfo_TimeToRunIsUp", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Chaos is stopped, because user issued StopChaosAsync API.
    ///  
    /// </summary>
    internal static string ChaosInfo_UserInitiatedStop {
        get {
            return ResourceManager.GetString("ChaosInfo_UserInitiatedStop", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Chaos is stopped because the system is unable to restart Chaos.
    ///  
    /// </summary>
    internal static string ChaosInfo_SystemCannotRestartChaos {
        get {
            return ResourceManager.GetString("ChaosInfo_SystemCannotRestartChaos", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The status for the Chaos Scheduler has been reset due to error during recovery of saved state while restarting the service.
    ///  
    /// </summary>
    internal static string ChaosScheduler_ResetStateDueToError {
        get {
            return ResourceManager.GetString("ChaosScheduler_ResetStateDueToError", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Inconsistent state after state change. Expected: {0} Got: {1}.
    ///  
    /// </summary>
    internal static string ChaosScheduler_InconsistentState {
        get {
            return ResourceManager.GetString("ChaosScheduler_InconsistentState", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cannot set schedule when Chaos is running. Call StopChaos and try again.
    ///  
    /// </summary>
    internal static string ChaosScheduler_ChaosAlreadyRunning {
        get {
            return ResourceManager.GetString("ChaosScheduler_ChaosAlreadyRunning", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The provided schedule has a version mismatch with the existing schedule. Expected: {0} Got: {1}.
    ///  
    /// </summary>
    internal static string ChaosScheduler_ScheduleVersionMismatch {
        get {
            return ResourceManager.GetString("ChaosScheduler_ScheduleVersionMismatch", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    One or more schedule items reference a nonexistent ChaosParameter.\n
    ///  
    /// </summary>
    internal static string ChaosScheduler_NonExistentChaosParameter {
        get {
            return ResourceManager.GetString("ChaosScheduler_NonExistentChaosParameter", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    One or more conflicts have been found in the schedule.
    ///  
    /// </summary>
    internal static string ChaosScheduler_ScheduleConflict {
        get {
            return ResourceManager.GetString("ChaosScheduler_ScheduleConflict", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Fix the existing conflicts to view the remaining conflicts.
    ///  
    /// </summary>
    internal static string ChaosScheduler_MoreScheduleConflicts {
        get {
            return ResourceManager.GetString("ChaosScheduler_MoreScheduleConflicts", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    StartDate with value {0} is prior to the minimum DateTime requirement of 1601-01-01T00:00:00.000Z.
    ///  
    /// </summary>
    internal static string ChaosScheduler_ScheduleStartDateBeforeFileTimeEpoch {
        get {
            return ResourceManager.GetString("ChaosScheduler_ScheduleStartDateBeforeFileTimeEpoch", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ExpiryDate with value {0} is prior to the minimum DateTime requirement of 1601-01-01T00:00:00.000Z.
    ///  
    /// </summary>
    internal static string ChaosScheduler_ScheduleExpiryDateBeforeFileTimeEpoch {
        get {
            return ResourceManager.GetString("ChaosScheduler_ScheduleExpiryDateBeforeFileTimeEpoch", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ExpiryDate with value {0} is prior to the StartDate {1}.
    ///  
    /// </summary>
    internal static string ChaosScheduler_ScheduleExpiryDateBeforeStartDate {
        get {
            return ResourceManager.GetString("ChaosScheduler_ScheduleExpiryDateBeforeStartDate", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Time cannot be null in a schedule's job's time range.
    ///  
    /// </summary>
    internal static string ChaosScheduler_ScheduleJobTimeIsNull {
        get {
            return ResourceManager.GetString("ChaosScheduler_ScheduleJobTimeIsNull", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ChaosParameters cannot be null in a schedule's job.
    ///  
    /// </summary>
    internal static string ChaosScheduler_ScheduleJobParametersIsNull {
        get {
            return ResourceManager.GetString("ChaosScheduler_ScheduleJobParametersIsNull", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Days cannot be null in a schedule's job.
    ///  
    /// </summary>
    internal static string ChaosScheduler_ScheduleJobDaysIsNull {
        get {
            return ResourceManager.GetString("ChaosScheduler_ScheduleJobDaysIsNull", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Times list cannot be null in a schedule's job.
    ///  
    /// </summary>
    internal static string ChaosScheduler_ScheduleJobTimesIsNull {
        get {
            return ResourceManager.GetString("ChaosScheduler_ScheduleJobTimesIsNull", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Jobs list cannot be null in a schedule.
    ///  
    /// </summary>
    internal static string ChaosScheduler_ScheduleJobsIsNull {
        get {
            return ResourceManager.GetString("ChaosScheduler_ScheduleJobsIsNull", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    EndDate of a schedule cannot be null.
    ///  
    /// </summary>
    internal static string ChaosScheduler_ScheduleExpiryDateIsNull {
        get {
            return ResourceManager.GetString("ChaosScheduler_ScheduleExpiryDateIsNull", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    StartDate of a schedule cannot be null.
    ///  
    /// </summary>
    internal static string ChaosScheduler_ScheduleStartDateIsNull {
        get {
            return ResourceManager.GetString("ChaosScheduler_ScheduleStartDateIsNull", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ChaosParametersDictionary cannot be null in a schedule.
    ///  
    /// </summary>
    internal static string ChaosScheduler_ScheduleParametersDictionaryIsNull {
        get {
            return ResourceManager.GetString("ChaosScheduler_ScheduleParametersDictionaryIsNull", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Schedule object cannot be null.
    ///  
    /// </summary>
    internal static string ChaosScheduler_ScheduleIsNull {
        get {
            return ResourceManager.GetString("ChaosScheduler_ScheduleIsNull", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Value represents hour of a day in a 24 hour clock. Value must be between 0 to 23 inclusive.
    ///  
    /// </summary>
    internal static string ChaosScheduler_TimeHourNotInLimit {
        get {
            return ResourceManager.GetString("ChaosScheduler_TimeHourNotInLimit", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Value represents minute of a an hour. Value must be between 0 to 59 inclusive.
    ///  
    /// </summary>
    internal static string ChaosScheduler_TimeMinuteNotInLimit {
        get {
            return ResourceManager.GetString("ChaosScheduler_TimeMinuteNotInLimit", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Expected value greater or equal to 0. Received {0}.
    ///  
    /// </summary>
    internal static string ChaosScheduler_TimeHourUnderLimit {
        get {
            return ResourceManager.GetString("ChaosScheduler_TimeHourUnderLimit", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Expected value lesser or equal to 23. Received {0}.
    ///  
    /// </summary>
    internal static string ChaosScheduler_TimeHourOverLimit {
        get {
            return ResourceManager.GetString("ChaosScheduler_TimeHourOverLimit", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Expected value greater or equal to 0. Received {0}.
    ///  
    /// </summary>
    internal static string ChaosScheduler_TimeMinuteUnderLimit {
        get {
            return ResourceManager.GetString("ChaosScheduler_TimeMinuteUnderLimit", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Expected value lesser or equal to 59. Received {0}.
    ///  
    /// </summary>
    internal static string ChaosScheduler_TimeMinuteOverLimit {
        get {
            return ResourceManager.GetString("ChaosScheduler_TimeMinuteOverLimit", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    StartTime {0} does not come before EndTime {1}.
    ///  
    /// </summary>
    internal static string ChaosScheduler_ScheduleJobStartTimeAfterEndTime {
        get {
            return ResourceManager.GetString("ChaosScheduler_ScheduleJobStartTimeAfterEndTime", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    StartTime {0} does not come after the start of the day at {1}.
    ///  
    /// </summary>
    internal static string ChaosScheduler_ScheduleJobStartTimeBeforeStartOfDay {
        get {
            return ResourceManager.GetString("ChaosScheduler_ScheduleJobStartTimeBeforeStartOfDay", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    StartTime {0} does not come before the end of the day at {1}.
    ///  
    /// </summary>
    internal static string ChaosScheduler_ScheduleJobStartTimeAfterEndOfDay {
        get {
            return ResourceManager.GetString("ChaosScheduler_ScheduleJobStartTimeAfterEndOfDay", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    EndTime {0} does not come after start of the day at {1}.
    ///  
    /// </summary>
    internal static string ChaosScheduler_ScheduleJobEndTimeBeforeStartOfDay {
        get {
            return ResourceManager.GetString("ChaosScheduler_ScheduleJobEndTimeBeforeStartOfDay", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    EndTime {0} does not come before end of the day at {1}.
    ///  
    /// </summary>
    internal static string ChaosScheduler_ScheduleJobEndTimeAfterEndOfDay {
        get {
            return ResourceManager.GetString("ChaosScheduler_ScheduleJobEndTimeAfterEndOfDay", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Job has no days of the week specified to run for.
    ///  
    /// </summary>
    internal static string ChaosScheduler_ScheduleJobNoDaysSet {
        get {
            return ResourceManager.GetString("ChaosScheduler_ScheduleJobNoDaysSet", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Job has no times of the day specified to run for.
    ///  
    /// </summary>
    internal static string ChaosScheduler_ScheduleJobNoTimesSet {
        get {
            return ResourceManager.GetString("ChaosScheduler_ScheduleJobNoTimesSet", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Value of version is below allowable value. Received {0}. Expected: value greater or equal to 0.
    ///  
    /// </summary>
    internal static string ChaosScheduler_ScheduleDescriptionVersionIsNegative {
        get {
            return ResourceManager.GetString("ChaosScheduler_ScheduleDescriptionVersionIsNegative", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    JSON config path {0} is invalid.
    ///  
    /// </summary>
    internal static string Error_BPAJsonPathInvalid {
        get {
            return ResourceManager.GetString("Error_BPAJsonPathInvalid", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Security with ClusterCredentialType 'Windows' must be set if ClustergMSAIdentity is configured.
    ///  
    /// </summary>
    internal static string Error_BPAWindowsGMSAWithNoneSecurity {
        get {
            return ResourceManager.GetString("Error_BPAWindowsGMSAWithNoneSecurity", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cluster manifest was not processed. Check JSON config criteria.
    ///  
    /// </summary>
    internal static string Error_CannotConvertJsonConfig {
        get {
            return ResourceManager.GetString("Error_CannotConvertJsonConfig", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    CAB file at {0} is invalid.
    ///  
    /// </summary>
    internal static string Error_SFCabInvalid {
        get {
            return ResourceManager.GetString("Error_SFCabInvalid", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cluster Setup cancelled due to validation error(s) found by Best Practices Analyzer. Inspect details in DeploymentTraces log folder local to executing location.
    ///  
    /// </summary>
    internal static string Error_BPAClusterSetupCancelled {
        get {
            return ResourceManager.GetString("Error_BPAClusterSetupCancelled", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cluster Removal cancelled due to validation error(s) found by Best Practices Analyzer. Inspect details in DeploymentTraces log folder local to executing location.
    ///  
    /// </summary>
    internal static string Error_BPAClusterRemovalCancelled {
        get {
            return ResourceManager.GetString("Error_BPAClusterRemovalCancelled", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Add Node cancelled due to validation error(s) found by Best Practices Analyzer. Inspect details in DeploymentTraces log folder local to executing location.
    ///  
    /// </summary>
    internal static string Error_BPAAddNodeCancelled {
        get {
            return ResourceManager.GetString("Error_BPAAddNodeCancelled", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Remove Node cancelled due to validation error(s) found by Best Practices Analyzer. Inspect details in DeploymentTraces log folder local to executing location.
    ///  
    /// </summary>
    internal static string Error_BPARemoveNodeCancelled {
        get {
            return ResourceManager.GetString("Error_BPARemoveNodeCancelled", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Best Practices Analyzer determined environment has an issue. Please see additional BPA log output in DeploymentTraces folder.
    ///  
    /// </summary>
    internal static string Error_BPABailing {
        get {
            return ResourceManager.GetString("Error_BPABailing", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Machine '{0}' is not reachable. Check if FQDN is correct.
    ///  
    /// </summary>
    internal static string Error_BPAMachineNotPingable {
        get {
            return ResourceManager.GetString("Error_BPAMachineNotPingable", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Remote registry service on machine {0} is disabled.
    ///  
    /// </summary>
    internal static string Error_BPARemoteRegistryServiceDisabled {
        get {
            return ResourceManager.GetString("Error_BPARemoteRegistryServiceDisabled", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Querying remote registry service on machine {0} resulted in exception: {1}. Iteration: {2}.
    ///  
    /// </summary>
    internal static string Error_BPARemoteRegistryQueryException {
        get {
            return ResourceManager.GetString("Error_BPARemoteRegistryQueryException", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Windows Firewall service MpsSvc on machine {0} is disabled.
    ///  
    /// </summary>
    internal static string Error_BPAFirewallServiceDisabled {
        get {
            return ResourceManager.GetString("Error_BPAFirewallServiceDisabled", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Querying Windows Firewall service on machine {0} resulted in exception: {1}.
    ///  
    /// </summary>
    internal static string Error_BPAFirewallServiceQueryException {
        get {
            return ResourceManager.GetString("Error_BPAFirewallServiceQueryException", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Windows Firewall service MpsSvc must be running on machine {0}. Current status: {1}.
    ///  
    /// </summary>
    internal static string Error_BPAFirewallServiceNotRunning {
        get {
            return ResourceManager.GetString("Error_BPAFirewallServiceNotRunning", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Querying Windows Firewall service status on machine {0} resulted in exception: {1}.
    ///  
    /// </summary>
    internal static string Error_BPAFirewallServiceStatusException {
        get {
            return ResourceManager.GetString("Error_BPAFirewallServiceStatusException", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Machine '{0}' is not reachable on port {1}. Check connectivity/open ports. Error: {2}. 
    ///  
    /// </summary>
    internal static string Error_BPAPortConnectFailed {
        get {
            return ResourceManager.GetString("Error_BPAPortConnectFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unexpected runtime MSI installed: '{0}' on machine {1}. This cannot be installed for Standalone deployments.
    ///  
    /// </summary>
    internal static string Error_BPAMsiIsInstalled {
        get {
            return ResourceManager.GetString("Error_BPAMsiIsInstalled", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Remove Node requires Fabric to be installed on machine {0}.
    ///  
    /// </summary>
    internal static string Error_BPARemoveNodeNeedsFabric {
        get {
            return ResourceManager.GetString("Error_BPARemoveNodeNeedsFabric", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Previous Fabric installation detected on machine {0}. Please clean the machine.
    ///  
    /// </summary>
    internal static string Error_BPAPreviousFabricExists {
        get {
            return ResourceManager.GetString("Error_BPAPreviousFabricExists", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Data Root node {0} exists on machine {1} in {2}. This is an artifact from a previous installation - please delete the directory corresponding to this node.
    ///  
    /// </summary>
    internal static string Error_BPADataRootNodeExists {
        get {
            return ResourceManager.GetString("Error_BPADataRootNodeExists", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    None of the machines have Fabric installed.
    ///  
    /// </summary>
    internal static string Error_BPANoMachinesHaveFabricInstalled {
        get {
            return ResourceManager.GetString("Error_BPANoMachinesHaveFabricInstalled", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    BPA JSON config: model was not built. Nothing to validate.
    ///  
    /// </summary>
    internal static string Error_BPAJsonModelInvalid {
        get {
            return ResourceManager.GetString("Error_BPAJsonModelInvalid", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Node list was empty.
    ///  
    /// </summary>
    internal static string Error_BPAJsonEmptyNodeList {
        get {
            return ResourceManager.GetString("Error_BPAJsonEmptyNodeList", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    One or more nodes had an empty IPAddress. All nodes must have an explicitly set IPAddress.
    ///  
    /// </summary>
    internal static string Error_BPAJsonNodesMustHaveIp {
        get {
            return ResourceManager.GetString("Error_BPAJsonNodesMustHaveIp", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Some nodes are using the same name. Each node must have a distinct NodeName.
    ///  
    /// </summary>
    internal static string Error_BPANodesHaveSameName {
        get {
            return ResourceManager.GetString("Error_BPANodesHaveSameName", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cluster configuration must have a 'properties' element.
    ///  
    /// </summary>
    internal static string Error_BPAPropertiesElementMissing {
        get {
            return ResourceManager.GetString("Error_BPAPropertiesElementMissing", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cluster configuration element 'nodeTypes' must exist under properties and must contain at least one NodeType.
    ///  
    /// </summary>
    internal static string Error_BPANodeTypesElementMissing {
        get {
            return ResourceManager.GetString("Error_BPANodeTypesElementMissing", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cluster configuration contains NodeType with empty name.
    ///  
    /// </summary>
    internal static string Error_BPANodeTypeEmptyName {
        get {
            return ResourceManager.GetString("Error_BPANodeTypeEmptyName", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    NodeType name {0} is found multiple times. Ensure Node Type names are unique.
    ///  
    /// </summary>
    internal static string Error_BPANodeTypeNamesOverlapping {
        get {
            return ResourceManager.GetString("Error_BPANodeTypeNamesOverlapping", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Node NodeTypeRef doesn't reference a valid NodeType.
    ///  
    /// </summary>
    internal static string Error_BPANodeTypeRefIncorrect {
        get {
            return ResourceManager.GetString("Error_BPANodeTypeRefIncorrect", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Multiple nodes on same machine cannot reference the same Node Type.
    ///  
    /// </summary>
    internal static string Error_BPAJsonNodesCannotReferenceSameNodeType {
        get {
            return ResourceManager.GetString("Error_BPAJsonNodesCannotReferenceSameNodeType", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    FabricSetting {0} must be an absolute path.
    ///  
    /// </summary>
    internal static string Error_BPAJsonDataRootMustBeAbsolutePath {
        get {
            return ResourceManager.GetString("Error_BPAJsonDataRootMustBeAbsolutePath", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    FabricSetting {0} must be a non-UNC path.
    ///  
    /// </summary>
    internal static string Error_BPAJsonDataRootMustNotBeUnc {
        get {
            return ResourceManager.GetString("Error_BPAJsonDataRootMustNotBeUnc", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    FabricSettings {0} system drive could not be confirmed for machine {1}.
    ///  
    /// </summary>
    internal static string Error_BPAJsonDataRootRootDriveDoesNotExist {
        get {
            return ResourceManager.GetString("Error_BPAJsonDataRootRootDriveDoesNotExist", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    System drive for {0} could not be confirmed for a machine in the configuration. See DeploymentTraces for details.
    ///  
    /// </summary>
    internal static string Error_BPAJsonDataRootRootDriveDoesNotExistGeneric {
        get {
            return ResourceManager.GetString("Error_BPAJsonDataRootRootDriveDoesNotExistGeneric", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    System drive check for {0} failed with exception: {1}.
    ///  
    /// </summary>
    internal static string Error_BPAJsonDataRootRootDriveQueryException {
        get {
            return ResourceManager.GetString("Error_BPAJsonDataRootRootDriveQueryException", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Setting {0} is too long (max charcount: {1}).
    ///  
    /// </summary>
    internal static string Error_BPAJsonDataRootLongPath {
        get {
            return ResourceManager.GetString("Error_BPAJsonDataRootLongPath", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Security with ClusterCredentialType 'Windows' must have 'WindowsIdentities' configured.
    ///  
    /// </summary>
    internal static string Error_BPAWindowsSecurityNeedsIdentities {
        get {
            return ResourceManager.GetString("Error_BPAWindowsSecurityNeedsIdentities", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Security with ClusterCredentialType 'Windows' cannot specify gMSA Identity without a Cluster SPN.
    ///  
    /// </summary>
    internal static string Error_BPAWindowsSecurityNoSpnFoundWithgMSAIdentity {
        get {
            return ResourceManager.GetString("Error_BPAWindowsSecurityNoSpnFoundWithgMSAIdentity", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Standalone package dependent files not found. Check package structure. Error: {0}.
    ///  
    /// </summary>
    internal static string Error_BPAPackageFileNotFound {
        get {
            return ResourceManager.GetString("Error_BPAPackageFileNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Config validation: {0}
    ///  
    /// </summary>
    internal static string Error_BPAModelSettingsValidationFailed {
        get {
            return ResourceManager.GetString("Error_BPAModelSettingsValidationFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cannot find Fabric resource file {0}.
    ///  
    /// </summary>
    internal static string Error_CannotFindFabricResource {
        get {
            return ResourceManager.GetString("Error_CannotFindFabricResource", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Diagnostics section 'DiagnosticsStore' was not found under configuration 'Properties'. This must be configured for cluster configuration to be supported.
    ///  
    /// </summary>
    internal static string Warning_BPADiagnosticsNotEnabledWhenTelemetryEnabled {
        get {
            return ResourceManager.GetString("Warning_BPADiagnosticsNotEnabledWhenTelemetryEnabled", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Converting JSON config to model.
    ///  
    /// </summary>
    internal static string Info_BPAConvertingJsonToModel {
        get {
            return ResourceManager.GetString("Info_BPAConvertingJsonToModel", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Validating executing user is an Administrator.
    ///  
    /// </summary>
    internal static string Info_BPAValidatingAdmin {
        get {
            return ResourceManager.GetString("Info_BPAValidatingAdmin", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Validating CAB file is valid at {0}.
    ///  
    /// </summary>
    internal static string Info_BPAValidatingCab {
        get {
            return ResourceManager.GetString("Info_BPAValidatingCab", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Validating each machine has RemoteRegistry service enabled.
    ///  
    /// </summary>
    internal static string Info_BPARemoteRegistry {
        get {
            return ResourceManager.GetString("Info_BPARemoteRegistry", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Validating each machine has Windows Firewall MpsSvc service enabled.
    ///  
    /// </summary>
    internal static string Info_BPAWindowsFirewall {
        get {
            return ResourceManager.GetString("Info_BPAWindowsFirewall", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Validating machines are reachable and have opened required ports.
    ///  
    /// </summary>
    internal static string Info_BPARequiredPorts {
        get {
            return ResourceManager.GetString("Info_BPARequiredPorts", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Validating against installation conflicts on each machine.
    ///  
    /// </summary>
    internal static string Info_BPAConflictingInstallations {
        get {
            return ResourceManager.GetString("Info_BPAConflictingInstallations", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Validating Fabric is not already set up on target machines.
    ///  
    /// </summary>
    internal static string Info_BPANoFabric {
        get {
            return ResourceManager.GetString("Info_BPANoFabric", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Running Best Practices Analyzer...
    ///  
    /// </summary>
    internal static string Info_BPAStart {
        get {
            return ResourceManager.GetString("Info_BPAStart", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Running Best Practices Upgrade Analyzer. Please make sure you are validating against the current cluster json config in your cluster. Cluster configuration in the system may change after you add or remove node which means the original cluster json config can't represent the cluster state anymore. You can get the latest configuration by Get-ServiceFabricClusterConfiguration in Powershell.
    ///  
    /// </summary>
    internal static string Info_BPAUpgradeValidationStart {
        get {
            return ResourceManager.GetString("Info_BPAUpgradeValidationStart", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Best Practices Analyzer completed successfully.
    ///  
    /// </summary>
    internal static string Info_BPAEndSuccess {
        get {
            return ResourceManager.GetString("Info_BPAEndSuccess", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Run Test-ServiceFabricConfiguration or TestConfiguration.ps1 to validate configuration & environment state. Best Practices Analyzer hit validation error(s).
    ///  
    /// </summary>
    internal static string Info_BPAEndFail {
        get {
            return ResourceManager.GetString("Info_BPAEndFail", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Fabric is set up on machine {0}: {1}
    ///  
    /// </summary>
    internal static string Info_BPAFabricInstalledOnMachine {
        get {
            return ResourceManager.GetString("Info_BPAFabricInstalledOnMachine", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Fabric is not installed on machine {0}.
    ///  
    /// </summary>
    internal static string Info_BPAFabricNotInstalledOnMachine {
        get {
            return ResourceManager.GetString("Info_BPAFabricNotInstalledOnMachine", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    IsFabricInstalled on machine {0} hit FabricException. Proceeding anyway. Details: {1}.
    ///  
    /// </summary>
    internal static string Info_BPAFabricInstalledHitFabricException_Formatted {
        get {
            return ResourceManager.GetString("Info_BPAFabricInstalledHitFabricException_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    IsFabricInstalled on machine {0} hit InvalidOperationException. Proceeding anyway. Details: {1}.
    ///  
    /// </summary>
    internal static string Info_BPAFabricInstalledHitIOX_Formatted {
        get {
            return ResourceManager.GetString("Info_BPAFabricInstalledHitIOX_Formatted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The current cluster version {0} support ends {1}. Please view available upgrades using Get-ServiceFabricRegisteredClusterCodeVersion and upgrade using Start-ServiceFabricClusterUpgrade.
    ///  
    /// </summary>
    internal static string WarningHealth_ClusterVersionSupport {
        get {
            return ResourceManager.GetString("WarningHealth_ClusterVersionSupport", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Goal state is unreachable. Please check cluster internet connectivity or disable autoprovisioning of cluster upgrades by updating the cluster configuration.
    ///  
    /// </summary>
    internal static string WarningHealth_ClusterGoalStateReachable {
        get {
            return ResourceManager.GetString("WarningHealth_ClusterGoalStateReachable", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Mismatched cluster manifest versions: {0} {1}. Please perform a config upgrade to sync manifest state.
    ///  
    /// </summary>
    internal static string WarningHealth_ClusterManifestVersionMismatch {
        get {
            return ResourceManager.GetString("WarningHealth_ClusterManifestVersionMismatch", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Only AzureStorage and FileShare store type are supported. Please update the DiagnosticsStore.StoreType.
    ///  
    /// </summary>
    internal static string Error_BPAUnsupportedStoreType {
        get {
            return ResourceManager.GetString("Error_BPAUnsupportedStoreType", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Could not reach '{0}'. Retry period remaining: {1}.
    ///  
    /// </summary>
    internal static string Error_BPAAsimovNotReachedRetrying {
        get {
            return ResourceManager.GetString("Error_BPAAsimovNotReachedRetrying", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Please ensure connectivity to endpoint '{0}' is enabled. Refer to the EULA for details regarding telemetry.
    ///  
    /// </summary>
    internal static string Error_BPAAsimovUnreachable {
        get {
            return ResourceManager.GetString("Error_BPAAsimovUnreachable", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    CodePackageentity '{0}' already in transition.
    ///  
    /// </summary>
    internal static string ChaosEngineError_CodePackageEntityInTransition {
        get {
            return ResourceManager.GetString("ChaosEngineError_CodePackageEntityInTransition", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Node '{0}' cannot be in faulted state for selected code package '{1}'.
    ///  
    /// </summary>
    internal static string ChaosEngineError_CodePackageEntity_FaultedNode {
        get {
            return ResourceManager.GetString("ChaosEngineError_CodePackageEntity_FaultedNode", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Node cannot be null for code package at '{0}'.
    ///  
    /// </summary>
    internal static string ChaosEngineError_CodePackageEntity_NullNode {
        get {
            return ResourceManager.GetString("ChaosEngineError_CodePackageEntity_NullNode", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Partition '{0}' fault tolerance should not be zero or below before code package fault '{1}' when 'UnsafeModeEnabled' is false.
    ///  
    /// </summary>
    internal static string ChaosEngineError_CodePackageEntity_PartitionNotFaultTolerantInSafeMode {
        get {
            return ResourceManager.GetString("ChaosEngineError_CodePackageEntity_PartitionNotFaultTolerantInSafeMode", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The specified port binding does not have a valid EndpointResource reference in Service Manifest for '{0}'.
    ///  
    /// </summary>
    internal static string ImageBuilder_InvalidPortBinding {
        get {
            return ResourceManager.GetString("ImageBuilder_InvalidPortBinding", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The environment variable '{0}' specified in EnvironmentOverrides for CodePackage '{1}', service manifest '{2}' is not valid. Please check if EnvironmentVariables for the CodePackage contain a variable by this name.
    ///  
    /// </summary>
    internal static string ImageBuilder_InvalidEnvVariableOverride {
        get {
            return ResourceManager.GetString("ImageBuilder_InvalidEnvVariableOverride", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ResourceGovernancePolicy cannot have both CpuShares and CpuPercent specified for the same Container host.
    ///  
    /// </summary>
    internal static string ResourceGovernanceIncompatibleSettings {
        get {
            return ResourceManager.GetString("ResourceGovernanceIncompatibleSettings", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ResourceGovernancePolicy is currently only supported for CodePackages with ContainerHost EntryPoints.
    ///  
    /// </summary>
    internal static string ResourceGovernancePolicyNotSupported {
        get {
            return ResourceManager.GetString("ResourceGovernancePolicyNotSupported", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Specified CpuCores ({0}) is invalid. When specified, the CpuCores value should be either 0 or greater than or equal to 0.0001.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidCpuCores {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidCpuCores", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Specified MemoryInMB ({0}) is invalid. When specified, the MemoryInMB value should be either 0 or greater than or equal to 4.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidMemoryInMB {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidMemoryInMB", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Specified BlockIOWeight of {0} is invalid. Valid BlockIOWeight should be between {1} and {2}
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidBlockIOWeight {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidBlockIOWeight", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Value '{0}' cannot be assigned to {1}. Value cannot be less than {1}.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidMemorySwapValueSpecified {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidMemorySwapValueSpecified", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Value '{0}' cannot be assigned to {1}. Value has to be a non negative integer.
    ///  
    /// </summary>
    internal static string ImageBuilderError_ValueMustNotBeNegative {
        get {
            return ResourceManager.GetString("ImageBuilderError_ValueMustNotBeNegative", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Linux package manager returned as invalid/unknown type {0}.
    ///  
    /// </summary>
    internal static string ImageBuilderError_LinuxPackageManagerUnknown {
        get {
            return ResourceManager.GetString("ImageBuilderError_LinuxPackageManagerUnknown", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Node '{0}' is already in transition.
    ///  
    /// </summary>
    internal static string ChaosEngineError_NodeEntity_NodeInTransition {
        get {
            return ResourceManager.GetString("ChaosEngineError_NodeEntity_NodeInTransition", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Node '{0}' is unsafe.
    ///  
    /// </summary>
    internal static string ChaosEngineError_NodeEntity_UnsafeNode {
        get {
            return ResourceManager.GetString("ChaosEngineError_NodeEntity_UnsafeNode", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    CodePackage '{0}' on node '{1}' cannot be in faulted state for selected replica '{2}' to be faulted.
    ///  
    /// </summary>
    internal static string ChaosEngineError_ReplicaEntity_FaultCodePackage {
        get {
            return ResourceManager.GetString("ChaosEngineError_ReplicaEntity_FaultCodePackage", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Node '{0}' cannot be in faulted state for selected replica '{1}' to be faulted.
    ///  
    /// </summary>
    internal static string ChaosEngineError_ReplicaEntity_FaultedNode {
        get {
            return ResourceManager.GetString("ChaosEngineError_ReplicaEntity_FaultedNode", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    NodeInfo not found for node '{0}'.
    ///  
    /// </summary>
    internal static string ChaosEngineError_ReplicaEntity_NodeInfoNotFound {
        get {
            return ResourceManager.GetString("ChaosEngineError_ReplicaEntity_NodeInfoNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Partition '{0}' fault tolerance should not be zero or below before replica fault '{1}' when 'UnsafeModeEnabled' is false.
    ///  
    /// </summary>
    internal static string ChaosEngineError_ReplicaEntity_PartitionNotFaultTolerantInSafeMode {
        get {
            return ResourceManager.GetString("ChaosEngineError_ReplicaEntity_PartitionNotFaultTolerantInSafeMode", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ReplicaEntity '{0}' is already in transition.
    ///  
    /// </summary>
    internal static string ChaosEngineError_ReplicaEntity_ReplicaInTransition {
        get {
            return ResourceManager.GetString("ChaosEngineError_ReplicaEntity_ReplicaInTransition", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Node '{0}' should be available for replica '{1}' to fault.
    ///  
    /// </summary>
    internal static string ChaosEngineError_ReplicaEntity_UnavaliableNode {
        get {
            return ResourceManager.GetString("ChaosEngineError_ReplicaEntity_UnavaliableNode", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The backup-chain in specified restore directory contains duplicate backups.
    ///  
    /// </summary>
    internal static string Backup_DuplicateBackups {
        get {
            return ResourceManager.GetString("Backup_DuplicateBackups", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The backup-chain in specified restore directory has one or more missing backup.
    ///  
    /// </summary>
    internal static string Backup_InvalidBackupChain {
        get {
            return ResourceManager.GetString("Backup_InvalidBackupChain", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The information stored in restore metadata file present in supplied restore directory in invalid.
    ///  
    /// </summary>
    internal static string Backup_InvalidRestoreData {
        get {
            return ResourceManager.GetString("Backup_InvalidRestoreData", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    An stop node is in progress.
    ///  
    /// </summary>
    internal static string Error_StopInProgress {
        get {
            return ResourceManager.GetString("Error_StopInProgress", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The node is already stopped.
    ///  
    /// </summary>
    internal static string Error_AlreadyStopped {
        get {
            return ResourceManager.GetString("Error_AlreadyStopped", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The node is down.
    ///  
    /// </summary>
    internal static string Error_NodeIsDown {
        get {
            return ResourceManager.GetString("Error_NodeIsDown", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    There is already a running transition on this node.
    ///  
    /// </summary>
    internal static string Error_NodeTransitionInProgress {
        get {
            return ResourceManager.GetString("Error_NodeTransitionInProgress", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Do you want to remove the node?
    ///  
    /// </summary>
    internal static string Warning_RemoveServiceFabricNode {
        get {
            return ResourceManager.GetString("Warning_RemoveServiceFabricNode", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Do you want to remove the cluster?
    ///  
    /// </summary>
    internal static string Warning_RemoveServiceFabricCluster {
        get {
            return ResourceManager.GetString("Warning_RemoveServiceFabricCluster", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The backup specified restore directory is invalid.
    ///  
    /// </summary>
    internal static string Backup_InvalidBackup {
        get {
            return ResourceManager.GetString("Backup_InvalidBackup", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    NodeTransitionType '{0}' is unknown.
    ///  
    /// </summary>
    internal static string Error_UnknownNodeTransitionType {
        get {
            return ResourceManager.GetString("Error_UnknownNodeTransitionType", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The provided instance id is invalid.
    ///  
    /// </summary>
    internal static string Error_InvalidInstanceId {
        get {
            return ResourceManager.GetString("Error_InvalidInstanceId", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The provided duration is invalid.
    ///  
    /// </summary>
    internal static string Error_InvalidDuration {
        get {
            return ResourceManager.GetString("Error_InvalidDuration", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Downloading application package from '{0}' ...
    ///  
    /// </summary>
    internal static string ImageBuilder_Progress_Downloading {
        get {
            return ResourceManager.GetString("ImageBuilder_Progress_Downloading", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Finished external download from '{0}'. Extracting application manifest to validate the application type information ...
    ///  
    /// </summary>
    internal static string ImageBuilder_Progress_ExtractingAndValidatingAppType {
        get {
            return ResourceManager.GetString("ImageBuilder_Progress_ExtractingAndValidatingAppType", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Application type information successfully validated for '{0}'. Extracting the package to begin provisioning ...
    ///  
    /// </summary>
    internal static string ImageBuilder_Progress_ExtractingApplicationPackage {
        get {
            return ResourceManager.GetString("ImageBuilder_Progress_ExtractingApplicationPackage", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Validating package and computing checksums ...
    ///  
    /// </summary>
    internal static string ImageBuilder_Progress_Validating {
        get {
            return ResourceManager.GetString("ImageBuilder_Progress_Validating", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Uploaded '{0}': completed {1}/{2} packages and checksums ({3:P1}).
    ///  
    /// </summary>
    internal static string ImageBuilder_Progress_Upload {
        get {
            return ResourceManager.GetString("ImageBuilder_Progress_Upload", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Copied '{0}': completed {1}/{2} packages and checksums ({3:P1}).
    ///  
    /// </summary>
    internal static string ImageBuilder_Progress_Copy {
        get {
            return ResourceManager.GetString("ImageBuilder_Progress_Copy", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Downloaded {0}/{1} {2} ({3:P1} complete)
    ///  
    /// </summary>
    internal static string ImageBuilder_Progress_Downloading_Details {
        get {
            return ResourceManager.GetString("ImageBuilder_Progress_Downloading_Details", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Downloading {0}: {1} bytes received, {2} expected ({3:P1}).
    ///  
    /// </summary>
    internal static string ImageBuilder_Progress_Downloading_ExternalSfpkg_Progress {
        get {
            return ResourceManager.GetString("ImageBuilder_Progress_Downloading_ExternalSfpkg_Progress", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cluster did not become healthy within timeout of {0}.
    ///Health events:
    ///{1}
    ///  
    /// </summary>
    internal static string Error_ClusterNotHealthy {
        get {
            return ResourceManager.GetString("Error_ClusterNotHealthy", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Chaos engine thinks something unexpected has happened.
    ///  
    /// </summary>
    internal static string ChaosError_UnexpectedInChaosEngine {
        get {
            return ResourceManager.GetString("ChaosError_UnexpectedInChaosEngine", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Note, going to wait for '{0}' before checking if the cluster is ready for fault.
    ///  
    /// </summary>
    internal static string ChaosInfo_WaitingNotice {
        get {
            return ResourceManager.GetString("ChaosInfo_WaitingNotice", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Backup provided for restore has older data than present in service.
    ///  
    /// </summary>
    internal static string Backup_RestoreSafeCheckFailed {
        get {
            return ResourceManager.GetString("Backup_RestoreSafeCheckFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Fabric runtime package cannot be downloaded since the goal state file is empty. Please pass the runtime package manually using -FabricRuntimePackagePath in the cmdlet.
    ///  
    /// </summary>
    internal static string Error_SFGoalStateFileEmpty {
        get {
            return ResourceManager.GetString("Error_SFGoalStateFileEmpty", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Goal state file does not contain any package with IsGoal set to true. empty. Please pass the runtime package manually using -FabricRuntimePackagePath in the cmdlet.
    ///  
    /// </summary>
    internal static string Error_SFGoalStateFileHasNoIsGoalTrue {
        get {
            return ResourceManager.GetString("Error_SFGoalStateFileHasNoIsGoalTrue", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Goal state file cannot be deserialized. Threw Exception {0}.
    ///  
    /// </summary>
    internal static string Error_SFGoalStateFileNotDeserialize {
        get {
            return ResourceManager.GetString("Error_SFGoalStateFileNotDeserialize", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Fabric Runtime package cannot be downloaded. Uri {0} not downloaded. Exception thrown: {1}.
    ///  
    /// </summary>
    internal static string Error_SFGoalStateFileNotDownloaded {
        get {
            return ResourceManager.GetString("Error_SFGoalStateFileNotDownloaded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Goal state file not found. Check your internet connection. If the cluster does not have access to internet, pass in the location to Microsoft Service Fabric Runtime Package manually.
    ///  
    /// </summary>
    internal static string Error_SFGoalStateNotFound {
        get {
            return ResourceManager.GetString("Error_SFGoalStateNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    GoalStateUri {0} cannot be parsed.
    ///  
    /// </summary>
    internal static string Error_SFGoalStateUriNotParsed {
        get {
            return ResourceManager.GetString("Error_SFGoalStateUriNotParsed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    GoalStateUri {0} is not reachable. Check your internet connectivity.
    ///  
    /// </summary>
    internal static string Error_SFGoalStateUriNotReachable {
        get {
            return ResourceManager.GetString("Error_SFGoalStateUriNotReachable", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cannot add node while upgrade is in progress or before cluster has finished bootstrapping. Please try again once Get-ServiceFabricClusterUpgrade returns the current cluster version
    ///  
    /// </summary>
    internal static string Error_SFAddNodeWhileUpgradeInProgress {
        get {
            return ResourceManager.GetString("Error_SFAddNodeWhileUpgradeInProgress", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Fabric runtime package cannot be downloaded from the Image Store.
    ///  
    /// </summary>
    internal static string Error_SFFabricCabNotDownloaded {
        get {
            return ResourceManager.GetString("Error_SFFabricCabNotDownloaded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Uri {0} could not be downloaded. Exception thrown: {1}.
    ///  
    /// </summary>
    internal static string Error_SFUriNotDownloaded {
        get {
            return ResourceManager.GetString("Error_SFUriNotDownloaded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    NodeName {0} is duplicated. Each node must have a distinct NodeName.
    ///  
    /// </summary>
    internal static string Error_BPADuplicateNodeName {
        get {
            return ResourceManager.GetString("Error_BPADuplicateNodeName", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Fault Domains should all have the same depth.
    ///  
    /// </summary>
    internal static string Error_BPAInvalidFD {
        get {
            return ResourceManager.GetString("Error_BPAInvalidFD", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    IPAddress/FQDN {0} is invalid.
    ///  
    /// </summary>
    internal static string Error_BPAInvalidIPAddress {
        get {
            return ResourceManager.GetString("Error_BPAInvalidIPAddress", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    NodeList cannot be empty.
    ///  
    /// </summary>
    internal static string Error_BPAInvalidNodeList {
        get {
            return ResourceManager.GetString("Error_BPAInvalidNodeList", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    NodeName {0} should be a valid file name.
    ///  
    /// </summary>
    internal static string Error_BPAInvalidNodeName {
        get {
            return ResourceManager.GetString("Error_BPAInvalidNodeName", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The element {0} is required.
    ///  
    /// </summary>
    internal static string Error_BPARequiredParameter {
        get {
            return ResourceManager.GetString("Error_BPARequiredParameter", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ServiceFabric runtime package (MSI/CAB) is corrupt. Signature could not be verified.
    ///  
    /// </summary>
    internal static string Error_InvalidCodePackage {
        get {
            return ResourceManager.GetString("Error_InvalidCodePackage", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    SharedLogFileSizeInMB {0} is less than 512 and must be larger than 512.
    ///  
    /// </summary>
    internal static string Error_FabricValidatorSharedLogFileSizeTooSmall {
        get {
            return ResourceManager.GetString("Error_FabricValidatorSharedLogFileSizeTooSmall", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Upload session ranges have overlap or are out of range.
    ///  
    /// </summary>
    internal static string Error_UploadSessionRangeNotSatisfiable {
        get {
            return ResourceManager.GetString("Error_UploadSessionRangeNotSatisfiable", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Upload session ID {0} exists for a different Image Store relative path.
    ///  
    /// </summary>
    internal static string Error_UploadSessionIdConflict {
        get {
            return ResourceManager.GetString("Error_UploadSessionIdConflict", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The base version is invalid. Please enter a valid service fabric version.
    ///  
    /// </summary>
    internal static string Error_SFInvalidBaseVersion {
        get {
            return ResourceManager.GetString("Error_SFInvalidBaseVersion", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The Image Store relative path does not exist.
    ///  
    /// </summary>
    internal static string Error_ImageStoreRelativePathNotExist {
        get {
            return ResourceManager.GetString("Error_ImageStoreRelativePathNotExist", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The Image Store layout specification object could not be initialized.
    ///  
    /// </summary>
    internal static string Error_storeLayoutSpecification_Init_Failed {
        get {
            return ResourceManager.GetString("Error_storeLayoutSpecification_Init_Failed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Adding a node is not supported for development clusters.
    ///  
    /// </summary>
    internal static string Error_SFAddNodeInvalidScaleMin {
        get {
            return ResourceManager.GetString("Error_SFAddNodeInvalidScaleMin", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Removing a node is not supported for development clusters.
    ///  
    /// </summary>
    internal static string Error_SFRemoveNodeInvalidScaleMin {
        get {
            return ResourceManager.GetString("Error_SFRemoveNodeInvalidScaleMin", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The parameter name {0} in section {1} contains leading/trailing space which may cause error. Please remove it and deploy your cluster.
    ///  
    /// </summary>
    internal static string Warning_ParameterContainsLeadingTrailingSpace {
        get {
            return ResourceManager.GetString("Warning_ParameterContainsLeadingTrailingSpace", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Required ports on the node to be removed are not reacheable. Check connectivity/open ports.
    ///  
    /// </summary>
    internal static string Error_SFPortsUnreachable {
        get {
            return ResourceManager.GetString("Error_SFPortsUnreachable", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cannot remove node because it is a seed node. Seed nodes are chosen from the primary node type at time of deployment.
    ///  
    /// </summary>
    internal static string Error_SFSeedNodesCannotBeRemoved {
        get {
            return ResourceManager.GetString("Error_SFSeedNodesCannotBeRemoved", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Nodes cannot be added and removed in the same upgrade.
    ///  
    /// </summary>
    internal static string Error_SFAddAndRemoveNodeTogether {
        get {
            return ResourceManager.GetString("Error_SFAddAndRemoveNodeTogether", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The new JSON config contains some newly added nodes which are not part of the cluster. Please ensure all newly added nodes are first added using AddNode API and then initiate an upgrade. Make sure all relevant details in the new JSON configuration exactly match the parameters used in AddNode API.
    ///  
    /// </summary>
    internal static string Error_SFAddNodeNotKnowntoFM {
        get {
            return ResourceManager.GetString("Error_SFAddNodeNotKnowntoFM", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Node cannot be added to the cluster because of a previous conflicting installation. Clean the nodes and then re-run the upgrade.
    ///  
    /// </summary>
    internal static string Error_SFAddNodeFailedDueToPreviousInstall {
        get {
            return ResourceManager.GetString("Error_SFAddNodeFailedDueToPreviousInstall", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Nodes present in the cluster must exactly match the nodes in JSON config when new nodes have been added using AddNode.ps1 script. Run Get-ServiceFabricClusterConfiguration to get the most recent node list.
    ///  
    /// </summary>
    internal static string Error_SFNodesFromFMDontMatch {
        get {
            return ResourceManager.GetString("Error_SFNodesFromFMDontMatch", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    NodesToBeRemoved parameter contains inconsistent information. To remove a node, remove it from the nodes list in the JSON config and specify the correct node name in NodesToBeRemoved parameter.
    ///  
    /// </summary>
    internal static string Error_SFNodesToRemoveContainsUnknownNodes {
        get {
            return ResourceManager.GetString("Error_SFNodesToRemoveContainsUnknownNodes", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Nodes have been removed from the JSON config but NodesToBeRemoved parameter does not contain NodeName for all removed nodes. Please ensure NodesToBeRemoved parameter is specified in Setup section inside FabricSettings and node names of all nodes which need to be removed from the cluster are mentioned.
    ///  
    /// </summary>
    internal static string Error_SFNodesToRemoveNotContainAllRemovedNodes {
        get {
            return ResourceManager.GetString("Error_SFNodesToRemoveNotContainAllRemovedNodes", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Validate configuration failed for Section {0} as {1} : {2} should be more than {3} : {4}.
    ///  
    /// </summary>
    internal static string Error_FabricValidator_ParameterShouldBeGreaterThanAnotherParameter {
        get {
            return ResourceManager.GetString("Error_FabricValidator_ParameterShouldBeGreaterThanAnotherParameter", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Validate configuration warning for Section {0} as {1} : {2} should be more than {3} : {4}
    ///  
    /// </summary>
    internal static string Warning_FabricValidator_ParameterShouldBeGreaterThanAnotherParameter {
        get {
            return ResourceManager.GetString("Warning_FabricValidator_ParameterShouldBeGreaterThanAnotherParameter", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    RemoveNode API has been deprecated. To remove a node from the cluster, remove the nodes from "nodes" section in JSON config and add parameter "NodesToBeRemoved" in "FabricSettings". Set this parameter value to a comma separated list of node names that need to be removed. Invoke Start-ServiceFabricClusterConfigurationUpgrade -ClusterConfigPath <Path to modified JSON config>. 
    ///  
    /// </summary>
    internal static string Warning_SFDeprecatedRemoveNodeAPI {
        get {
            return ResourceManager.GetString("Warning_SFDeprecatedRemoveNodeAPI", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid Partition Selector of type {0}
    ///  
    /// </summary>
    internal static string Error_InvalidPartitionSelector {
        get {
            return ResourceManager.GetString("Error_InvalidPartitionSelector", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid Replica Selector of type {0}
    ///  
    /// </summary>
    internal static string Error_InvalidReplicaSelector {
        get {
            return ResourceManager.GetString("Error_InvalidReplicaSelector", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Primary node type node count needs to be greater than or equals to 3. Primary node type node count in the current ClusterConfig is {0}.
    ///  
    /// </summary>
    internal static string PrimaryNodeCountNeedsToBeGreaterThanOrEqualsTo3 {
        get {
            return ResourceManager.GetString("PrimaryNodeCountNeedsToBeGreaterThanOrEqualsTo3", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Removing Repair Manager Service is not supported.
    ///  
    /// </summary>
    internal static string RemoveRepairManagerUnsupported {
        get {
            return ResourceManager.GetString("RemoveRepairManagerUnsupported", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Removing a non-seed node and changing reliability level in the same upgrade is not supported. Initiate an upgrade to remove node first and then change the reliability level.
    ///  
    /// </summary>
    internal static string Error_SFRemoveNonSeedAndReliabilityChangeInvalid {
        get {
            return ResourceManager.GetString("Error_SFRemoveNonSeedAndReliabilityChangeInvalid", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    DnsService is not enabled on the cluster.
    ///  
    /// </summary>
    internal static string Error_DnsServiceNotFound {
        get {
            return ResourceManager.GetString("Error_DnsServiceNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Service DNS name is invalid.
    ///  
    /// </summary>
    internal static string Error_InvalidDnsName {
        get {
            return ResourceManager.GetString("Error_InvalidDnsName", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Service DNS name in use by another service.
    ///  
    /// </summary>
    internal static string Error_DnsNameInUse {
        get {
            return ResourceManager.GetString("Error_DnsNameInUse", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    You must define code package memory value for all code packages in a service package or for none of them.
    ///  
    /// </summary>
    internal static string ImageBuilderError_CodePackagesInvalidMemoryValue {
        get {
            return ResourceManager.GetString("ImageBuilderError_CodePackagesInvalidMemoryValue", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Dev Cluster size {0} is not supported. Size should be either 1 or 5.
    ///  
    /// </summary>
    internal static string DevClusterSizeNotSupported {
        get {
            return ResourceManager.GetString("DevClusterSizeNotSupported", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    DeleteFabricDataRoot threw {0} on machine {1}.
    ///  
    /// </summary>
    internal static string Info_SFDeleteFabricDataRootFailed {
        get {
            return ResourceManager.GetString("Info_SFDeleteFabricDataRootFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Transferring application package to gateway from {0}
    ///  
    /// </summary>
    internal static string Powershell_Activity_TransferringToGateway {
        get {
            return ResourceManager.GetString("Powershell_Activity_TransferringToGateway", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Replicating application package in image store
    ///  
    /// </summary>
    internal static string Powershell_Activity_ReplicationInFileStoreService {
        get {
            return ResourceManager.GetString("Powershell_Activity_ReplicationInFileStoreService", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Node entity {0} not found for code package {1}:{2}:{3}.
    ///  
    /// </summary>
    internal static string ChaosEngineError_MarkAllUnsafeEntities_NodeNotFoundForCodePackage {
        get {
            return ResourceManager.GetString("ChaosEngineError_MarkAllUnsafeEntities_NodeNotFoundForCodePackage", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid StateTransitionAction input for RetartNodeAction.
    ///  
    /// </summary>
    internal static string ChaosEngineError_RestartNode_InvalidActionType {
        get {
            return ResourceManager.GetString("ChaosEngineError_RestartNode_InvalidActionType", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    NodeName cannot be null or empty for RetartNodeAction.
    ///  
    /// </summary>
    internal static string ChaosEngineError_RestartNode_InvalidNodeName {
        get {
            return ResourceManager.GetString("ChaosEngineError_RestartNode_InvalidNodeName", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid StateTransitionAction input for StartNodeAction.
    ///  
    /// </summary>
    internal static string ChaosEngineError_StartNode_InvalidActionType {
        get {
            return ResourceManager.GetString("ChaosEngineError_StartNode_InvalidActionType", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    NodeName cannot be null or empty for StartNodeAction.
    ///  
    /// </summary>
    internal static string ChaosEngineError_StartNode_InvalidNodeName {
        get {
            return ResourceManager.GetString("ChaosEngineError_StartNode_InvalidNodeName", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid StateTransitionAction input for StopNodeAction.
    ///  
    /// </summary>
    internal static string ChaosEngineError_StopNode_InvalidActionType {
        get {
            return ResourceManager.GetString("ChaosEngineError_StopNode_InvalidActionType", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    NodeName cannot be null or empty for StopNodeAction.
    ///  
    /// </summary>
    internal static string ChaosEngineError_StopNode_InvalidNodeName {
        get {
            return ResourceManager.GetString("ChaosEngineError_StopNode_InvalidNodeName", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    DockerDnsHelper.CleanupAsync returning error. Resources must be cleaned up manually. Exception: {0}
    ///  
    /// </summary>
    internal static string Warning_FabricDeployer_DockerDnsSetup_CleanupError {
        get {
            return ResourceManager.GetString("Warning_FabricDeployer_DockerDnsSetup_CleanupError", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    DockerDnsHelper.SetupAsync error. Exception: {0}
    ///  
    /// </summary>
    internal static string Warning_FabricDeployer_DockerDnsSetup_SetupError {
        get {
            return ResourceManager.GetString("Warning_FabricDeployer_DockerDnsSetup_SetupError", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Error with {0} in attempt {1} of {2}. Exception: {3}
    ///  
    /// </summary>
    internal static string Warning_FabricDeployer_DockerDnsSetup_RetryMessage1 {
        get {
            return ResourceManager.GetString("Warning_FabricDeployer_DockerDnsSetup_RetryMessage1", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0}Retry attempts exhausted. Not continuing further
    ///  
    /// </summary>
    internal static string Warning_FabricDeployer_DockerDnsSetup_RetryExhausted {
        get {
            return ResourceManager.GetString("Warning_FabricDeployer_DockerDnsSetup_RetryExhausted", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0}Retrying...
    ///  
    /// </summary>
    internal static string Warning_FabricDeployer_DockerDnsSetup_RetryContinue {
        get {
            return ResourceManager.GetString("Warning_FabricDeployer_DockerDnsSetup_RetryContinue", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Error getting network adapter {0}. Not continuing further. This may mean that feature {1} is not properly installed
    ///  
    /// </summary>
    internal static string Warning_FabricDeployer_DockerDnsSetup_ErrorGettingNetworkAdapter1 {
        get {
            return ResourceManager.GetString("Warning_FabricDeployer_DockerDnsSetup_ErrorGettingNetworkAdapter1", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Error getting network adapter {0}. Not continuing further
    ///  
    /// </summary>
    internal static string Warning_FabricDeployer_DockerDnsSetup_ErrorGettingNetworkAdapter2 {
        get {
            return ResourceManager.GetString("Warning_FabricDeployer_DockerDnsSetup_ErrorGettingNetworkAdapter2", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Error getting interface index for network adapter {0}. Not continuing further. Resources must be cleaned up manually
    ///  
    /// </summary>
    internal static string Warning_FabricDeployer_DockerDnsSetup_ErrorGettingInterfaceIndex {
        get {
            return ResourceManager.GetString("Warning_FabricDeployer_DockerDnsSetup_ErrorGettingInterfaceIndex", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Error getting IP address for network adapter {0}. Not continuing further. Resources must be cleaned up manually
    ///  
    /// </summary>
    internal static string Warning_FabricDeployer_DockerDnsSetup_ErrorGettingIPAddress {
        get {
            return ResourceManager.GetString("Warning_FabricDeployer_DockerDnsSetup_ErrorGettingIPAddress", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Error getting network adapter {0}. Not continuing further. Resources must be cleaned up manually
    ///  
    /// </summary>
    internal static string Warning_FabricDeployer_DockerDnsSetup_ErrorGettingNetworkAdapter3 {
        get {
            return ResourceManager.GetString("Warning_FabricDeployer_DockerDnsSetup_ErrorGettingNetworkAdapter3", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    {0} feature not present. Continuing since ContinueIfContainersFeatureNotInstalled is true
    ///  
    /// </summary>
    internal static string Warning_FabricDeployer_DockerDnsSetup_FeatureNotPresentContinuing {
        get {
            return ResourceManager.GetString("Warning_FabricDeployer_DockerDnsSetup_FeatureNotPresentContinuing", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Error getting feature state for feature {0}. Treating feature as not present and continuing. Exception: {1}
    ///  
    /// </summary>
    internal static string Warning_FabricDeployer_DockerDnsSetup_ErrorGettingFeatureState1 {
        get {
            return ResourceManager.GetString("Warning_FabricDeployer_DockerDnsSetup_ErrorGettingFeatureState1", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Error getting feature state for feature {0}. This usually means that the platform doesn't support DISM APIs. Treating feature as not present and continuing. Exception: {1}
    ///  
    /// </summary>
    internal static string Warning_FabricDeployer_DockerDnsSetup_ErrorGettingFeatureState2 {
        get {
            return ResourceManager.GetString("Warning_FabricDeployer_DockerDnsSetup_ErrorGettingFeatureState2", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unexpected error getting feature state for feature {0}. Treating feature as not present and continuing. Exception: {1}
    ///  
    /// </summary>
    internal static string Warning_FabricDeployer_DockerDnsSetup_ErrorGettingFeatureState3 {
        get {
            return ResourceManager.GetString("Warning_FabricDeployer_DockerDnsSetup_ErrorGettingFeatureState3", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Error in GetIPProperties() for network adapter {0}
    ///  
    /// </summary>
    internal static string Warning_FabricDeployer_DockerDnsSetup_GetIPPropertiesError {
        get {
            return ResourceManager.GetString("Warning_FabricDeployer_DockerDnsSetup_GetIPPropertiesError", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Error in GetIPv4Properties() for network adapter {0}
    ///  
    /// </summary>
    internal static string Warning_FabricDeployer_DockerDnsSetup_GetIPv4PropertiesError {
        get {
            return ResourceManager.GetString("Warning_FabricDeployer_DockerDnsSetup_GetIPv4PropertiesError", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Error getting IP address for InterfaceIndex: {0}
    ///  
    /// </summary>
    internal static string Warning_FabricDeployer_DockerDnsSetup_ErrorGettingIPAddressForInterfaceIndex {
        get {
            return ResourceManager.GetString("Warning_FabricDeployer_DockerDnsSetup_ErrorGettingIPAddressForInterfaceIndex", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Error parsing IP address for InterfaceIndex: {0}
    ///  
    /// </summary>
    internal static string Warning_FabricDeployer_DockerDnsSetup_ErrorParsingIPAddressForInterfaceIndex {
        get {
            return ResourceManager.GetString("Warning_FabricDeployer_DockerDnsSetup_ErrorParsingIPAddressForInterfaceIndex", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Error in GetIPProperties() while getting subnet mask for network adapter {0}
    ///  
    /// </summary>
    internal static string Warning_FabricDeployer_DockerDnsSetup_ErrorGettingSubnetMask1 {
        get {
            return ResourceManager.GetString("Warning_FabricDeployer_DockerDnsSetup_ErrorGettingSubnetMask1", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Error getting getting subnet mask for IP address {0} and network adapter {1}
    ///  
    /// </summary>
    internal static string Warning_FabricDeployer_DockerDnsSetup_ErrorGettingSubnetMask2 {
        get {
            return ResourceManager.GetString("Warning_FabricDeployer_DockerDnsSetup_ErrorGettingSubnetMask2", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unable to get firewall policy
    ///  
    /// </summary>
    internal static string Warning_FabricDeployer_DockerDnsSetup_ErrorGettingFirewallPolicy1 {
        get {
            return ResourceManager.GetString("Warning_FabricDeployer_DockerDnsSetup_ErrorGettingFirewallPolicy1", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unable to get firewall policy to remove firewall rule {0}. Ignoring and continuing. This must be cleaned up manually
    ///  
    /// </summary>
    internal static string Warning_FabricDeployer_DockerDnsSetup_ErrorGettingFirewallPolicy2 {
        get {
            return ResourceManager.GetString("Warning_FabricDeployer_DockerDnsSetup_ErrorGettingFirewallPolicy2", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Error removing firewall rule {0}. Ignoring and continuing. This must be cleaned up manually. Exception: {1}
    ///  
    /// </summary>
    internal static string Warning_FabricDeployer_DockerDnsSetup_ErrorRemovingFirewallRule {
        get {
            return ResourceManager.GetString("Warning_FabricDeployer_DockerDnsSetup_ErrorRemovingFirewallRule", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Error cleaning up persisted network details. Ignoring and continuing. This must be cleaned up manually. Exception: {0}
    ///  
    /// </summary>
    internal static string Warning_FabricDeployer_DockerDnsSetup_ErrorCleaningNetworkDetails {
        get {
            return ResourceManager.GetString("Warning_FabricDeployer_DockerDnsSetup_ErrorCleaningNetworkDetails", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Error getting new IP address for network adapter {0} from existing IP address {1}. Not continuing further. Exception: {2}
    ///  
    /// </summary>
    internal static string Warning_FabricDeployer_DockerDnsSetup_ErrorGettingNewIPAddress {
        get {
            return ResourceManager.GetString("Warning_FabricDeployer_DockerDnsSetup_ErrorGettingNewIPAddress", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    DockerDnsHelper.SetupAsync returning error. Not continuing further since {0} is set as {1}. Exception: {2}
    ///  
    /// </summary>
    internal static string Error_FabricDeployer_DockerDnsSetup_ErrorNotContinuing {
        get {
            return ResourceManager.GetString("Error_FabricDeployer_DockerDnsSetup_ErrorNotContinuing", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    DockerDnsHelper.SetupAsync returning error. Continuing since {0} is set as {1}. If applicable, Docker DNS setup must be performed manually. Exception: {2}
    ///  
    /// </summary>
    internal static string Warning_FabricDeployer_DockerDnsSetup_ErrorContinuing {
        get {
            return ResourceManager.GetString("Warning_FabricDeployer_DockerDnsSetup_ErrorContinuing", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    DockerDnsHelper.SetupAsync returning error. Continuing. If applicable, Docker DNS setup must be performed manually. Exception: {0}
    ///  
    /// </summary>
    internal static string Warning_FabricDeployer_DockerDnsSetup_ErrorContinuing2 {
        get {
            return ResourceManager.GetString("Warning_FabricDeployer_DockerDnsSetup_ErrorContinuing2", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cluster name can't be changed in cluster configuration upgrade.
    ///  
    /// </summary>
    internal static string ClusterNameCantBeChanged {
        get {
            return ResourceManager.GetString("ClusterNameCantBeChanged", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The node details in the JSON config have been modified. In configuration upgrade, IP address and NodeTypeRef can't be changed for the same node. Violation is found in node {0}(original name). If you want to change the IP address or NodeTypeRef, please remove the old node and add a new one.
    ///  
    /// </summary>
    internal static string NodeIPNodeTypeRefCantBeChanged {
        get {
            return ResourceManager.GetString("NodeIPNodeTypeRefCantBeChanged", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The node details in the JSON config have been modified. In configuration upgrade, NodeName and NodeTypeRef can't be changed for the same IP address. Violation is found in node {0}(original name). If you want to change the NodeName or NodeTypeRef, please remove the old node and add a new one.
    ///  
    /// </summary>
    internal static string NodeNameNodeTypeRefCantBeChanged {
        get {
            return ResourceManager.GetString("NodeNameNodeTypeRefCantBeChanged", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Authentication type cannot be changed from unsecured to Windows.
    ///  
    /// </summary>
    internal static string AuthenticationTypeCannotBeChangedFromUnsecuredToWindows {
        get {
            return ResourceManager.GetString("AuthenticationTypeCannotBeChangedFromUnsecuredToWindows", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Authentication type cannot be changed from Windows to unsecured.
    ///  
    /// </summary>
    internal static string AuthenticationTypeCannotBeChangedFromWindowsToUnsecured {
        get {
            return ResourceManager.GetString("AuthenticationTypeCannotBeChangedFromWindowsToUnsecured", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The IP address {0} of node {1} is Malformed.
    ///  
    /// </summary>
    internal static string MalformedIPAddress {
        get {
            return ResourceManager.GetString("MalformedIPAddress", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Duplicate node name is detected.
    ///  
    /// </summary>
    internal static string NodeNameDuplicateDetected {
        get {
            return ResourceManager.GetString("NodeNameDuplicateDetected", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Each machine can only host one node.
    ///  
    /// </summary>
    internal static string ScaleMinNotAllowed {
        get {
            return ResourceManager.GetString("ScaleMinNotAllowed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Fault domain count must be greater than 2, current FD count {0}.
    ///  
    /// </summary>
    internal static string FDMustBeGreaterThan2 {
        get {
            return ResourceManager.GetString("FDMustBeGreaterThan2", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Upgrade domain count must be greater than 2, current UD count {0}.
    ///  
    /// </summary>
    internal static string UDMustBeGreaterThan2 {
        get {
            return ResourceManager.GetString("UDMustBeGreaterThan2", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Operation is invalid for stateful services.
    ///  
    /// </summary>
    internal static string Error_InvalidForStatefulServices {
        get {
            return ResourceManager.GetString("Error_InvalidForStatefulServices", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Operation is invalid for stateless services.
    ///  
    /// </summary>
    internal static string Error_InvalidForStatelessServices {
        get {
            return ResourceManager.GetString("Error_InvalidForStatelessServices", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Operation is only valid for stateful persistent services.
    ///  
    /// </summary>
    internal static string Error_OnlyValidForStatefulPersistentServices {
        get {
            return ResourceManager.GetString("Error_OnlyValidForStatefulPersistentServices", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Network configuration specified for code package {0} is not valid. PortBinding (nat) and NetworkConfig cannot be specified for the same code package.
    ///  
    /// </summary>
    internal static string ImageBuilder_InvalidNetworkConfig {
        get {
            return ResourceManager.GetString("ImageBuilder_InvalidNetworkConfig", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Creating {0} directory at {1} on machine {2} failed due to exception {2}.
    ///  
    /// </summary>
    internal static string Error_CreateLogicalDirectoriesFailed {
        get {
            return ResourceManager.GetString("Error_CreateLogicalDirectoriesFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Deleting {0} directory at {1} on machine {2} failed due to {3}.
    ///  
    /// </summary>
    internal static string Error_RemoveLogicalDirectoriesFailed {
        get {
            return ResourceManager.GetString("Error_RemoveLogicalDirectoriesFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    LogicalDirectories section is present. Creating {0} directory at {1} if it doesn't exist on machine {2},
    ///  
    /// </summary>
    internal static string Info_CreatingLogicalDirectories {
        get {
            return ResourceManager.GetString("Info_CreatingLogicalDirectories", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    LogicalDirectories section is present. Deleting {0} directory at {1} if it exists on machine {2}.
    ///  
    /// </summary>
    internal static string Info_RemovingLogicalDirectories {
        get {
            return ResourceManager.GetString("Info_RemovingLogicalDirectories", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    clusterManifest.xml file is missing in fabric data root {0} on machine {1}. Node is not configured. Do nothing.
    ///  
    /// </summary>
    internal static string Warning_clusterManifestFileMissingInDataRoot {
        get {
            return ResourceManager.GetString("Warning_clusterManifestFileMissingInDataRoot", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    infrastructureManifest.xml file is missing in fabric data root {0} on machine {1}. Skipping deleting LogicalDirectories.
    ///  
    /// </summary>
    internal static string Warning_infrastructureManifestFileMissingInDataRoot {
        get {
            return ResourceManager.GetString("Warning_infrastructureManifestFileMissingInDataRoot", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unable to set symlink registry key on machine {0}. Registry key path: LocalMachine\System\CurrentControlSet\Control\Session Manager\Environment. LogicalDirectory feature will fail. Error: {1}.
    ///  
    /// </summary>
    internal static string Error_UnableToSetSymlinkRegistryKey {
        get {
            return ResourceManager.GetString("Error_UnableToSetSymlinkRegistryKey", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Duplication parameter '{0}' found in section '{1}'.
    ///  
    /// </summary>
    internal static string DuplicateParameterNotAllowed {
        get {
            return ResourceManager.GetString("DuplicateParameterNotAllowed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The ClusterManifest type is not supported.
    ///  
    /// </summary>
    internal static string Error_ClusterManifestTypeNotSupported {
        get {
            return ResourceManager.GetString("Error_ClusterManifestTypeNotSupported", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Logical directory mountedTo value can't be null.
    ///  
    /// </summary>
    internal static string LogicalDirectoryMountedToValueCannotBeNull {
        get {
            return ResourceManager.GetString("LogicalDirectoryMountedToValueCannotBeNull", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Logical directory name cannot be null.
    ///  
    /// </summary>
    internal static string LogicalDirectoryNameCannotBeNull {
        get {
            return ResourceManager.GetString("LogicalDirectoryNameCannotBeNull", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Duplicate logical directories names are not allowed.
    ///  
    /// </summary>
    internal static string DuplicateLogicalDirectoriesNameDetected {
        get {
            return ResourceManager.GetString("DuplicateLogicalDirectoriesNameDetected", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Failed to create logical directory {0} on machine {1} with error : {2}.
    ///  
    /// </summary>
    internal static string Error_FailedToCreateLogicalDirectory {
        get {
            return ResourceManager.GetString("Error_FailedToCreateLogicalDirectory", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Failed to remove logical directory {0} on machine {1} with error : {2}.
    ///  
    /// </summary>
    internal static string Error_FailedToRemoveLogicalDirectory {
        get {
            return ResourceManager.GetString("Error_FailedToRemoveLogicalDirectory", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Collecting event logs failed due to error {0} on machine {1}. Please go to each node to view event logs.
    ///  
    /// </summary>
    internal static string Error_CollectingEventLogsFailed {
        get {
            return ResourceManager.GetString("Error_CollectingEventLogsFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Issue occurs when retrieving event logs {0}.
    ///  
    /// </summary>
    internal static string Error_IssueOccursWhenGetEventLogs {
        get {
            return ResourceManager.GetString("Error_IssueOccursWhenGetEventLogs", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Collecting Error Event Viewer Logs.
    ///  
    /// </summary>
    internal static string Info_CollectingErrorLogs {
        get {
            return ResourceManager.GetString("Info_CollectingErrorLogs", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Error occurred. Event logs from all the nodes are copied to {0} on machine {1}. Please investigate, fix the issue and redeploy your cluster.
    ///  
    /// </summary>
    internal static string Info_ViewEventLogs {
        get {
            return ResourceManager.GetString("Info_ViewEventLogs", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Copying event logs to {0}
    ///  
    /// </summary>
    internal static string Info_CopyingEventLogs {
        get {
            return ResourceManager.GetString("Info_CopyingEventLogs", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The override parameter with name '{0}' attribute '{1}' in section '{2}' is invalid. The value specified is '{3}' and required is '{4}'.
    ///  
    /// </summary>
    internal static string ImageBuilderError_ConfigOverrideTypeMismatch {
        get {
            return ResourceManager.GetString("ImageBuilderError_ConfigOverrideTypeMismatch", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid Upload Session ID {0}. Plesea use GUID as upload session ID.
    ///  
    /// </summary>
    internal static string Error_InvalidUploadSessionId {
        get {
            return ResourceManager.GetString("Error_InvalidUploadSessionId", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Repository Credentials for Account Name:{0} cannot have a blank password if you have PasswordEncrypted set to True or Type set to Encrypted/SecretsStoreRef.
    ///  
    /// </summary>
    internal static string ImageBuilderError_RepositoryCredentialsBlankPassword {
        get {
            return ResourceManager.GetString("ImageBuilderError_RepositoryCredentialsBlankPassword", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Repository Credentials for Account Name:{0} cannot have PasswordEncrypted set to True and Type set to PlainText/SecretsStoreRef.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidRepositoryCredentialsType {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidRepositoryCredentialsType", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid parameters for CertificateRef {0} in ContainerHostPolicies for CodePackage {1}. Either use DataPackageRef along with RelativePath to specify the certificate path or use X509FindValue with X509StoreName if the certificate is installed in the machine store.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidContainerCertParameters {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidContainerCertParameters", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    RelativePath cannot be empty if DataPackageRef is specified for CertificateRef {0} in ContainerHostPolicies for CodePackage {1}.
    ///  
    /// </summary>
    internal static string ImageBuilderError_UnknownContainerCertRelativePaths {
        get {
            return ResourceManager.GetString("ImageBuilderError_UnknownContainerCertRelativePaths", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    DataPackageVersion cannot be empty if DataPackageRef is specified in CertificateRef {0} in ContainerHostPolicies for CodePackage {1}.
    ///  
    /// </summary>
    internal static string ImageBuilderError_UnknownContainerCertDataPackageVersion {
        get {
            return ResourceManager.GetString("ImageBuilderError_UnknownContainerCertDataPackageVersion", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Reached the maximum number '{0}' of allowed retries with exceptions '{1}'.
    ///  
    /// </summary>
    internal static string ChaosEngineError_GetClusterSnapshotAction_MaximumNumberOfRetriesAchieved {
        get {
            return ResourceManager.GetString("ChaosEngineError_GetClusterSnapshotAction_MaximumNumberOfRetriesAchieved", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Backup has not been configured/ enabled for this specific partition/ service/ application.
    ///  
    /// </summary>
    internal static string Error_BackupNotEnabled {
        get {
            return ResourceManager.GetString("Error_BackupNotEnabled", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Up to 2 issuer common names are supported for cluster and server issuer certificates.
    ///  
    /// </summary>
    internal static string IssuerCertStoreCNMoreThan2 {
        get {
            return ResourceManager.GetString("IssuerCertStoreCNMoreThan2", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    IssuerStore cannot be specified without the corresponding certificate common name.
    ///  
    /// </summary>
    internal static string IssuerCertStoreSpecifiedWithoutCommonNameCertificate {
        get {
            return ResourceManager.GetString("IssuerCertStoreSpecifiedWithoutCommonNameCertificate", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    IssuerCommonName cannot be null. Specify a valid certificate common name or an empty string.
    ///  
    /// </summary>
    internal static string IssuerCNCannotBeNull {
        get {
            return ResourceManager.GetString("IssuerCNCannotBeNull", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Duplicate IssuerCommonName cannot be specified for issuer certificate stores.
    ///  
    /// </summary>
    internal static string DupIssuerCertificateCN {
        get {
            return ResourceManager.GetString("DupIssuerCertificateCN", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Duplicate entries in X509StoreNames is not allowed for the same IssuerCommonName.
    ///  
    /// </summary>
    internal static string DupIssuerCertificateStore {
        get {
            return ResourceManager.GetString("DupIssuerCertificateStore", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Issuer X509StoreNames cannot be null. Specify a valid store name.
    ///  
    /// </summary>
    internal static string IssuerStoreNameCannotBeNull {
        get {
            return ResourceManager.GetString("IssuerStoreNameCannotBeNull", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Indicates that the partition does not have read access.
    ///  
    /// </summary>
    internal static string Error_NotReadable {
        get {
            return ResourceManager.GetString("Error_NotReadable", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The current and updated issuer store common name must have an intersection.
    ///  
    /// </summary>
    internal static string IssuerStoreCNUpgradeWithNoIntersection {
        get {
            return ResourceManager.GetString("IssuerStoreCNUpgradeWithNoIntersection", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The current and updated issuer store X509StoreName must have an intersection.
    ///  
    /// </summary>
    internal static string IssuerStoreX509StoreNameUpgradeWithNoIntersection {
        get {
            return ResourceManager.GetString("IssuerStoreX509StoreNameUpgradeWithNoIntersection", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Downloading application package from '{0}' timed out.
    ///  
    /// </summary>
    internal static string ImageBuilder_DownloadSfpkg_TimedOut {
        get {
            return ResourceManager.GetString("ImageBuilder_DownloadSfpkg_TimedOut", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The download path '{0}' is invalid. Please specify a valid URI with scheme http or https that points to a '.sfpkg' file representing the application package.
    ///  
    /// </summary>
    internal static string Error_InvalidApplicationPackageDownloadUri {
        get {
            return ResourceManager.GetString("Error_InvalidApplicationPackageDownloadUri", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The sfpkg file was downloaded from '{0}', but local file '{1}' doesn't exist.
    ///  
    /// </summary>
    internal static string Error_SfpkgFileNotFound {
        get {
            return ResourceManager.GetString("Error_SfpkgFileNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The download path '{0}' is invalid. Please specify a valid URI with scheme http or https that points to a '.sfpkg' file representing the application package. The current protocol, '{1}' is invalid.
    ///  
    /// </summary>
    internal static string Error_InvalidApplicationPackageDownloadUri_Protocol {
        get {
            return ResourceManager.GetString("Error_InvalidApplicationPackageDownloadUri_Protocol", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The download path '{0}' is invalid. Please specify a valid URI with scheme http or https that points to a '.sfpkg' file representing the application package. The file name '{1}' is invalid.
    ///  
    /// </summary>
    internal static string Error_InvalidApplicationPackageDownloadUri_FileName {
        get {
            return ResourceManager.GetString("Error_InvalidApplicationPackageDownloadUri_FileName", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The package downloaded from '{0}' has application type name '{1}', which doesn't match expected value '{2}'.
    ///  
    /// </summary>
    internal static string ImageBuilderError_SfpkgApplicationTypeNameMismatch {
        get {
            return ResourceManager.GetString("ImageBuilderError_SfpkgApplicationTypeNameMismatch", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The package downloaded from '{0}' has application type version '{1}', which doesn't match expected value '{2}'.
    ///  
    /// </summary>
    internal static string ImageBuilderError_SfpkgApplicationTypeVersionMismatch {
        get {
            return ResourceManager.GetString("ImageBuilderError_SfpkgApplicationTypeVersionMismatch", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    There must be a code package associated with the replica '{0}'.
    ///  
    /// </summary>
    internal static string ChaosEngineError_ReplicaEntity_UnavaliableCodePackage {
        get {
            return ResourceManager.GetString("ChaosEngineError_ReplicaEntity_UnavaliableCodePackage", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The code package '{0}' on node '{1}' does not contain a replica for the deployed partition '{2}'.
    ///  
    /// </summary>
    internal static string ChaosEngineError_ClearCodePackageOfExclusionFlags_DeployedReplicaNotFound {
        get {
            return ResourceManager.GetString("ChaosEngineError_ClearCodePackageOfExclusionFlags_DeployedReplicaNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Applications with names : '{0}' could be found in the cluster.
    ///  
    /// </summary>
    internal static string ChaosApiError_InvalidApplicationName {
        get {
            return ResourceManager.GetString("ChaosApiError_InvalidApplicationName", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Node types: '{0}' do not have corresponding nodes.
    ///  
    /// </summary>
    internal static string ChaosApiError_InvalidNodeType {
        get {
            return ResourceManager.GetString("ChaosApiError_InvalidNodeType", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The requested operation is not allowed on the image store reserved folder '{0}'.
    ///  
    /// </summary>
    internal static string Error_InvalidReservedImageStoreOperation {
        get {
            return ResourceManager.GetString("Error_InvalidReservedImageStoreOperation", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    CommonNames with CertificateIssuerThumbprint and IssuerStores are not supported together. Either specify the issuer store or use explicit issuer pinning.
    ///  
    /// </summary>
    internal static string IssuerCertStoreAndIssuerPinningCannotBeTogether {
        get {
            return ResourceManager.GetString("IssuerCertStoreAndIssuerPinningCannotBeTogether", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The override value supplied for ServicePackageActivationMode for '{0}' with name '{1}' is invalid. The value specified is '{2}'. Allowed values are '{3}'.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidServicePackageActivationModeOverride {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidServicePackageActivationModeOverride", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Machine {0} is domain controller. No target machine can be domain controller.
    ///  
    /// </summary>
    internal static string Error_BPAMachineIsDomainController {
        get {
            return ResourceManager.GetString("Error_BPAMachineIsDomainController", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Querying if machine {0} is Domain Controller resulted in error: {1}, Description: {2}.
    ///  
    /// </summary>
    internal static string Error_BPADomainControllerQueryException {
        get {
            return ResourceManager.GetString("Error_BPADomainControllerQueryException", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Container Not Found.
    ///  
    /// </summary>
    internal static string Error_ContainerNotFound {
        get {
            return ResourceManager.GetString("Error_ContainerNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    NodeTypeInclusionList and ApplicationInclusionList cannot both be null or empty.
    ///  
    /// </summary>
    internal static string ChaosApiError_ChaosTagetFilterSpecificationtNotFound {
        get {
            return ResourceManager.GetString("ChaosApiError_ChaosTagetFilterSpecificationtNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Central Secret Service error.
    ///  
    /// </summary>
    internal static string Error_CentralSecretServiceGeneric {
        get {
            return ResourceManager.GetString("Error_CentralSecretServiceGeneric", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The secret already has the specified version.
    ///  
    /// </summary>
    internal static string Error_SecretVersionAlreadyExists {
        get {
            return ResourceManager.GetString("Error_SecretVersionAlreadyExists", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The specified secret is invalid.
    ///  
    /// </summary>
    internal static string Error_SecretInvalid {
        get {
            return ResourceManager.GetString("Error_SecretInvalid", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The operation is not supported.
    ///  
    /// </summary>
    internal static string Error_OperationNotSupported {
        get {
            return ResourceManager.GetString("Error_OperationNotSupported", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    UseDefaultRepositoryCredential and UseTokenAuthenticationCredentials are both true.  Only one type of repository credentials can be used.
    ///  
    /// </summary>
    internal static string ImageBuilder_DefaultRepoCredAndTokenAuthBothTrue {
        get {
            return ResourceManager.GetString("ImageBuilder_DefaultRepoCredAndTokenAuthBothTrue", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    HealthConfig specified as part of ContainerHostPolicies for code package {0} is not valid. 'RestartContainerOnUnhealthyDockerHealthStatus' cannot be set to true when 'IncludeDockerHealthStatusInSystemHealthReport' is set to false.
    ///  
    /// </summary>
    internal static string ImageBuilder_InvalidHealthConfig {
        get {
            return ResourceManager.GetString("ImageBuilder_InvalidHealthConfig", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The value for key {0} is invalid. Expected a boolean value.
    ///  
    /// </summary>
    internal static string ImageBuilder_InvalidBooleanValue {
        get {
            return ResourceManager.GetString("ImageBuilder_InvalidBooleanValue", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Must add or remove at least one partition name.
    ///  
    /// </summary>
    internal static string Error_NamedRepartitionNoOp {
        get {
            return ResourceManager.GetString("Error_NamedRepartitionNoOp", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ChaosParameters object could not be fully rehydrated, some properties might be missing correct values.
    ///  
    /// </summary>
    internal static string ChaosError_ChaosParametersContructionNotComplete {
        get {
            return ResourceManager.GetString("ChaosError_ChaosParametersContructionNotComplete", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    While Chaos was waiting at the end of the previous iteration, failover happened, so going to wait for '{0}' -- the left over waiting time from the previous iteration.
    ///  
    /// </summary>
    internal static string ChaosInfo_ResidualWaitingFromPreviousIteration {
        get {
            return ResourceManager.GetString("ChaosInfo_ResidualWaitingFromPreviousIteration", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Going to wait for '{0}' before the next iteration.
    ///  
    /// </summary>
    internal static string ChaosInfo_WaitingBetweenIterations {
        get {
            return ResourceManager.GetString("ChaosInfo_WaitingBetweenIterations", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Some machines failed. Continuing with {0} machine(s).
    ///  
    /// </summary>
    internal static string Warning_SomeMachinesFailed {
        get {
            return ResourceManager.GetString("Warning_SomeMachinesFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Not enough healthy machines. {0}% ({1} failed / {2} total machiens); MaxPercentFailedNodes = {3}%.
    ///  
    /// </summary>
    internal static string Error_NotEnoughHealthyMachines {
        get {
            return ResourceManager.GetString("Error_NotEnoughHealthyMachines", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cluster creation timed out.
    ///  
    /// </summary>
    internal static string Error_CreateClusterTimeout {
        get {
            return ResourceManager.GetString("Error_CreateClusterTimeout", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Timed out waiting for nodes configuration to finish.
    ///  
    /// </summary>
    internal static string Error_ConfigureNodesTimeout {
        get {
            return ResourceManager.GetString("Error_ConfigureNodesTimeout", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cluster creation cancelled due to not enough healthy machines. Inspect details in DeploymentTraces log folder local to executing location.
    ///  
    /// </summary>
    internal static string Error_CreateClusterCancelledNotEnoughHealthy {
        get {
            return ResourceManager.GetString("Error_CreateClusterCancelledNotEnoughHealthy", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Copy cluster resource failed on machine: {0} with exception: {1}
    ///  
    /// </summary>
    internal static string Error_CopyClusterResourceFailed {
        get {
            return ResourceManager.GetString("Error_CopyClusterResourceFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Copy Fabric Installer failed on machine: {0} with exception: {1}
    ///  
    /// </summary>
    internal static string Error_CopyFabricInstallerFailed {
        get {
            return ResourceManager.GetString("Error_CopyFabricInstallerFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Node configuration failed on machine: {0} with exception: {1}
    ///  
    /// </summary>
    internal static string Error_NodeConfigurationFailed {
        get {
            return ResourceManager.GetString("Error_NodeConfigurationFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Start Fabric Installer failed on machine: {0} with exception: {1}
    ///  
    /// </summary>
    internal static string Error_StartFabricInstallerFailed {
        get {
            return ResourceManager.GetString("Error_StartFabricInstallerFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    In a standalone cluster, seed nodes are automatically decided from nodes in a primary node type. The minimum number of seed nodes were not established to have quorum; {0} healthy / {1} seed nodes.
    ///  
    /// </summary>
    internal static string Error_MinQuorumSeedNodeWasNotEstablished {
        get {
            return ResourceManager.GetString("Error_MinQuorumSeedNodeWasNotEstablished", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    MaxPercentFailedNodes value must be between 0 and 100.
    ///  
    /// </summary>
    internal static string Error_MaxPercentFailedNodesInvalid {
        get {
            return ResourceManager.GetString("Error_MaxPercentFailedNodesInvalid", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ImageBuilder failed to parse the application parameters file at '{0}' because of an unexpected empty line. Parameter name: '{1}'.
    ///  
    /// </summary>
    internal static string Error_ImageBuilderExeFailedParseApplicationParameterFile {
        get {
            return ResourceManager.GetString("Error_ImageBuilderExeFailedParseApplicationParameterFile", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ImageBuilder failed because the required command line argument '{0}' for operation '{1}' was not found.
    ///  
    /// </summary>
    internal static string Error_ImageBuilderExeMissingRequiredArgumentForOperation {
        get {
            return ResourceManager.GetString("Error_ImageBuilderExeMissingRequiredArgumentForOperation", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ImageBuilder failed because the application parameters file was not found.
    ///  
    /// </summary>
    internal static string Error_ImageBuilderExeNoApplicationParameterFile {
        get {
            return ResourceManager.GetString("Error_ImageBuilderExeNoApplicationParameterFile", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ImageBuilder does not support '{0}' with value '{1}'.
    ///  
    /// </summary>
    internal static string Error_ImageBuilderExeCommandLineInvalidOperation {
        get {
            return ResourceManager.GetString("Error_ImageBuilderExeCommandLineInvalidOperation", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ImageBuilder failed because the argument '{0}' is invalid. Expected format is 'key:value'.
    ///  
    /// </summary>
    internal static string Error_ImageBuilderExeInvalidArgument {
        get {
            return ResourceManager.GetString("Error_ImageBuilderExeInvalidArgument", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ImageBuilder failed because the argument '{0}' is invalid. The key '{1}' was already provided.
    ///  
    /// </summary>
    internal static string Error_ImageBuilderExeInvalidArgumentDuplicate {
        get {
            return ResourceManager.GetString("Error_ImageBuilderExeInvalidArgumentDuplicate", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ImageBuilder failed because the argument '{0}' is invalid. The key '{1}' is not supported.
    ///  
    /// </summary>
    internal static string Error_ImageBuilderExeInvalidArgumentUnrecognizedKey {
        get {
            return ResourceManager.GetString("Error_ImageBuilderExeInvalidArgumentUnrecognizedKey", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ImageBuilder failed because neither /codePath nor /configPath are specified for operation '{0}'.
    ///  
    /// </summary>
    internal static string Error_ImageBuilderExeMissingCodeAndConfigPath {
        get {
            return ResourceManager.GetString("Error_ImageBuilderExeMissingCodeAndConfigPath", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ImageBuilder failed because the required command line argument '{0}' was not specified.
    ///  
    /// </summary>
    internal static string Error_ImageBuilderExeMissingRequiredArgument {
        get {
            return ResourceManager.GetString("Error_ImageBuilderExeMissingRequiredArgument", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ImageStoreConnectionString was not found in the cluster manifest.
    ///  
    /// </summary>
    internal static string Error_MissingImageStoreConnectionStringInManifest {
        get {
            return ResourceManager.GetString("Error_MissingImageStoreConnectionStringInManifest", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Only one seed node can be added/removed at a time.
    ///  
    /// </summary>
    internal static string Warning_SeedNodeSetCannotHaveMultipleChanges {
        get {
            return ResourceManager.GetString("Warning_SeedNodeSetCannotHaveMultipleChanges", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Creating Service Fabric Network.
    ///  
    /// </summary>
    internal static string Info_CreatingServiceFabricNetwork {
        get {
            return ResourceManager.GetString("Info_CreatingServiceFabricNetwork", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Create Service Fabric Network succeeded.
    ///  
    /// </summary>
    internal static string Info_CreateServiceFabricNetworkSucceeded {
        get {
            return ResourceManager.GetString("Info_CreateServiceFabricNetworkSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Create network failed. For more information please look at traces in FabricLogRoot.
    ///  
    /// </summary>
    internal static string Error_CreateServiceFabricNetworkFailed {
        get {
            return ResourceManager.GetString("Error_CreateServiceFabricNetworkFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Deleting Service Fabric Network.
    ///  
    /// </summary>
    internal static string Info_DeletingServiceFabricNetwork {
        get {
            return ResourceManager.GetString("Info_DeletingServiceFabricNetwork", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Delete Service Fabric Network succeeded.
    ///  
    /// </summary>
    internal static string Info_DeleteServiceFabricNetworkSucceeded {
        get {
            return ResourceManager.GetString("Info_DeleteServiceFabricNetworkSucceeded", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Delete network failed. For more information please look at traces in FabricLogRoot.
    ///  
    /// </summary>
    internal static string Error_DeleteServiceFabricNetworkFailed {
        get {
            return ResourceManager.GetString("Error_DeleteServiceFabricNetworkFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The specified network is currently being used.
    ///  
    /// </summary>
    internal static string Error_NetworkInUse {
        get {
            return ResourceManager.GetString("Error_NetworkInUse", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The specified network is not found.
    ///  
    /// </summary>
    internal static string Error_NetworkNotFound {
        get {
            return ResourceManager.GetString("Error_NetworkNotFound", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Service Fabric system service resource governance policy {0} for node type {1} has value which is out of allowed range. Value must be within following range: {2}:{3}.
    ///  
    /// </summary>
    internal static string SfssRgPolicyError_InvalidValueRange {
        get {
            return ResourceManager.GetString("SfssRgPolicyError_InvalidValueRange", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Service Fabric system service resource governance policy {0} for node type {1} has invalid value type. Error: {2}
    ///  
    /// </summary>
    internal static string SfssRgPolicyError_InvalidValueType {
        get {
            return ResourceManager.GetString("SfssRgPolicyError_InvalidValueType", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ImageBuilder failed because the Settings.xml for Config package name '{0}' is invalid. Missing Section Name '{1}' for corresponding ConifgPackagePolicies CodePackageRef {2} in ServiceManifestImport Policies.
    ///  
    /// </summary>
    internal static string Error_ImageBuilderConfigPackageValidationFailed {
        get {
            return ResourceManager.GetString("Error_ImageBuilderConfigPackageValidationFailed", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ImageBuilder failed because the Settings.xml for Config package name '{0}' is imvalid. ConifgPackages with same MountPoint {1} cannot have duplicate parameters in Settings.xml.
    ///  
    /// </summary>
    internal static string Error_ImageBuilderConfigPackageDuplicateElement {
        get {
            return ResourceManager.GetString("Error_ImageBuilderConfigPackageDuplicateElement", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Multiple nodes on same machine cannot reference Node Types that have colliding ports. Please check that ports in these Node Types are different.
    ///  
    /// </summary>
    internal static string Error_BPAJsonNodesSameMachinePortCollision {
        get {
            return ResourceManager.GetString("Error_BPAJsonNodesSameMachinePortCollision", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Node types: '{0}' and '{1}', are referenced by nodes on the same machine and use the same ports on parameter: {2}.
    ///  
    /// </summary>
    internal static string Error_BPAJsonNodeTypesSameMachinePortCollision {
        get {
            return ResourceManager.GetString("Error_BPAJsonNodeTypesSameMachinePortCollision", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Not enough space available on drive {0} on machine {1}. This drive must have at least 1GB of free space.
    ///  
    /// </summary>
    internal static string Error_BPANotEnoughSpaceOnDrive {
        get {
            return ResourceManager.GetString("Error_BPANotEnoughSpaceOnDrive", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Could not query available space on drive {0}.
    ///  
    /// </summary>
    internal static string Error_CouldNotQuerySpaceOnDrive {
        get {
            return ResourceManager.GetString("Error_CouldNotQuerySpaceOnDrive", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Check if machine '{0}' is IOT Core: False. Could not open registry key.
    ///  
    /// </summary>
    internal static string Info_IOTCheckFailedToOpenRegistryKey {
        get {
            return ResourceManager.GetString("Info_IOTCheckFailedToOpenRegistryKey", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ImageBuilder failed because the Settings.xml for Config package name '{0}' is invalid. MountPoint "{1}" should be an "{2}" path for "{3}" hosts.
    ///  
    /// </summary>
    internal static string Error_ImageBuilderInvalidConfigPackageMountPoint {
        get {
            return ResourceManager.GetString("Error_ImageBuilderInvalidConfigPackageMountPoint", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    ImageBuilder failed because the ConfigPackagePolicies for Code package name '{0}' is invalid. For non container hosts, MountPoints like "{1}" should have valid EnvironmentVariableName. Specified is empty.
    ///  
    /// </summary>
    internal static string Error_ImageBuilderInvalidEnvironmentVarForMountPoint {
        get {
            return ResourceManager.GetString("Error_ImageBuilderInvalidEnvironmentVarForMountPoint", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Packages cannot be downloaded due to network issues. Make sure you are connected to the internet. If your cluster does not have internet connectivity, install WSUS service.
    ///  
    /// </summary>
    internal static string Error_SFCodePackagesUnreachable {
        get {
            return ResourceManager.GetString("Error_SFCodePackagesUnreachable", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Cluster code version cannot be set to a specific version in the cluster configuration file if auto-upgrades have been enabled. To manually upgrade the cluster to a new version, set "AutoupgradeEnabled" to false and "CodeVersion" to the desired version.
    ///  
    /// </summary>
    internal static string Error_SFCodeVersionChangedForAutoUpgrades {
        get {
            return ResourceManager.GetString("Error_SFCodeVersionChangedForAutoUpgrades", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The specified "CodeVersion" in cluster configuration is not upgrade/downgrade compatible with the cluster's current code version. Initiate an upgrade to another compatible version.
    ///  
    /// </summary>
    internal static string Error_SFCodeVersionsNotCompatible {
        get {
            return ResourceManager.GetString("Error_SFCodeVersionsNotCompatible", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Code Version specified during cluster deployment is not valid. Remove this field from your cluster configuration or set it to '*' to enable auto upgrades.
    ///  
    /// </summary>
    internal static string Error_SFCodeVersionUnsupportedForDeployment {
        get {
            return ResourceManager.GetString("Error_SFCodeVersionUnsupportedForDeployment", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Config upgrade failed with exception: {0}
    ///  
    /// </summary>
    internal static string Error_SFConfigUpgradeFailWithException {
        get {
            return ResourceManager.GetString("Error_SFConfigUpgradeFailWithException", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The service is undergoing database migration and writes are currently not available.
    ///  
    /// </summary>
    internal static string Error_DatabaseMigrationInProgress {
        get {
            return ResourceManager.GetString("Error_DatabaseMigrationInProgress", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    
    ///      ServiceManifest contains invalid combination of ServiceTypes. 'UseImplicitHost' attribute should be set to 'true' for all 
    ///      ServiceTypes or for none. If ServiceManifest represents a guest application, it should contain only one ServiceType with 
    ///      'UseImplicitHost' attribute set to 'true'. If if represents a Service Fabric Programming Model based application, 
    ///      'UseImplicitHost' attribute should not be used.
    ///    
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidServiceTypeCombination {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidServiceTypeCombination", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    
    ///      A ServiceManifest representing a guest application (ServiceType with 'UseImplicitHost' attribute set to 'true') cannot
    ///      have a CodePackage with 'IsActivator' attribute set to 'true'.
    ///    
    ///  
    /// </summary>
    internal static string ImageBuilderError_GuestAppWithActivatorCodePackage {
        get {
            return ResourceManager.GetString("ImageBuilderError_GuestAppWithActivatorCodePackage", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    
    ///      A ServiceManifest cannot have more than one CodePackage with 'IsActivator' attribute set to 'true'.
    ///    
    ///  
    /// </summary>
    internal static string ImageBuilderError_MultipleActivatorCodePackage {
        get {
            return ResourceManager.GetString("ImageBuilderError_MultipleActivatorCodePackage", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The endpoint {0} is exposed on more than one container networks: {1}, {2}.
    ///  
    /// </summary>
    internal static string ImageBuilderError_EndpointOnMultipleNetworks {
        get {
            return ResourceManager.GetString("ImageBuilderError_EndpointOnMultipleNetworks", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The service package {0} is associated with a container network while its code package {1} has a non-container-host entrypoint of type {2}. For a service package associated with a container network, all its code packages have to be container-based.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidCodePackageEntryPointHost {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidCodePackageEntryPointHost", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Container network policies cannot be used together with network config in container host policies. It is recommended to use only container network policies whenever possible.
    ///  
    /// </summary>
    internal static string ImageBuilderError_NetworkConfigConflict {
        get {
            return ResourceManager.GetString("ImageBuilderError_NetworkConfigConflict", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    The service package {0} is associated with both Open and NAT network which are incompatible with each other. 
    ///  
    /// </summary>
    internal static string ImageBuilderError_IncompatibleNetworkPolicies {
        get {
            return ResourceManager.GetString("ImageBuilderError_IncompatibleNetworkPolicies", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    NetworkRef in a container network policy has to be an actual or a parameterized network name.
    ///  
    /// </summary>
    internal static string ImageBuilderError_InvalidNetworkReference {
        get {
            return ResourceManager.GetString("ImageBuilderError_InvalidNetworkReference", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Invalid ApplicationManifest.xml due to missing 'Partition' entries under 'NamedPartition' tag.
    ///  
    /// </summary>
    internal static string ImageBuilderError_MissingNamedPartitionChildEntries {
        get {
            return ResourceManager.GetString("ImageBuilderError_MissingNamedPartitionChildEntries", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unable to get client connection to the provided Azure storage. Check the xstore connection string provided in the image store connection string. These connection strings '{0}' and '{1}' were tried to connect to the Azure storage. Make sure Azure storage is reachable from the cluster and there is no Azure storage outage.
    ///  
    /// </summary>
    internal static string XStore_CheckConnectionString {
        get {
            return ResourceManager.GetString("XStore_CheckConnectionString", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Provided image store connection string '{0}' didn't start with 'xstore:', which is expected for Azure storage.
    ///  
    /// </summary>
    internal static string XStore_InvalidConnectionStringPrefix {
        get {
            return ResourceManager.GetString("XStore_InvalidConnectionStringPrefix", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Provided image store connection string '{0}' is not well formed. The expected format is '{connection string};Container=<container>'.
    ///    Do not localize the format string provided in quotes
    ///  
    /// </summary>
    internal static string XStore_MalformedConnectionString {
        get {
            return ResourceManager.GetString("XStore_MalformedConnectionString", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Unable to locate account key in the provided image store connection string '{0}'.
    ///  
    /// </summary>
    internal static string XStore_MissingAccountKey {
        get {
            return ResourceManager.GetString("XStore_MissingAccountKey", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Provided image store connection string '{0}' is missing storage account required to connect to Azure storage.
    ///  
    /// </summary>
    internal static string XStore_MissingConnectionString {
        get {
            return ResourceManager.GetString("XStore_MissingConnectionString", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Provided image store connection string '{0}' is missing container name required to connect to Azure storage.
    ///  
    /// </summary>
    internal static string XStore_MissingContainer {
        get {
            return ResourceManager.GetString("XStore_MissingContainer", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Provided image store connection string '{0}' is missing endpoint required to connect to Azure storage.
    ///  
    /// </summary>
    internal static string XStore_MissingEndpoint {
        get {
            return ResourceManager.GetString("XStore_MissingEndpoint", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Provided image store connection string '{0}' contains whitespace character(s) which is unexpected.
    ///  
    /// </summary>
    internal static string XStore_UnexpectedWhitespaceCharInConnectionString {
        get {
            return ResourceManager.GetString("XStore_UnexpectedWhitespaceCharInConnectionString", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Failed to download application package '{0}' from the store. Make sure the application package exists and it's not empty.
    ///  
    /// </summary>
    internal static string ImageBuilderError_UnableToDownloadApplicationPackage {
        get {
            return ResourceManager.GetString("ImageBuilderError_UnableToDownloadApplicationPackage", resourceCulture);
        }
    }


    /// <summary>
    ///   Looks up a localized string similar to 
    ///    Failed to donwload application package '{0}' from the store. Make sure Azure storage (XSTORE) is reachable from the cluster and there is no Azure storage outage.
    ///  
    /// </summary>
    internal static string ImageBuilderError_UnableToDownloadApplicationPackageFromXStore {
        get {
            return ResourceManager.GetString("ImageBuilderError_UnableToDownloadApplicationPackageFromXStore", resourceCulture);
        }
    }

}

}

