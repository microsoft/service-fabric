# Transport
s;Transport;OutgoingMessageTooLarge;actor;metric:(actor){Snapshot, Count}, metric:(frameSize){Minimum, Maximum}

# FM
s;FM;NodeCounts;;metric:(nodeCounts.pendingDeactivateNode, nodeCounts.removeNodeIntentNodes, nodeCounts.removeDataIntentNodes, nodeCounts.pendingFabricUpgrade, nodeCounts.restartIntentNodes, nodeCounts.removedNodeCount, nodeCounts.deactivatedNodes, nodeCounts.pauseIntentNodes, nodeCounts.downNodeCount,nodeCounts.unknownCount, nodeCounts.upNodeCount, nodeCounts.nodes){Snapshot, Maximum, Minimum, Average, Variance}
s;FM;ServiceCounts;;metric:(serviceCounts.notificationOnlyUpgradeCount, serviceCounts.forceRestartUpgradeCount, serviceCounts.applicationUpgradeCount, serviceCounts.monitoredUpgradeCount, serviceCounts.manualUpgradeCount, serviceCounts.serviceTypeCount, serviceCounts.applicationCount, serviceCounts.persistedCount, serviceCounts.statelessCount, serviceCounts.deletingCount, serviceCounts.updatingCount, serviceCounts.volatileCount, serviceCounts.serviceCount, serviceCounts.deletedCount){Snapshot, Maximum, Minimum, Average, Variance}
s;FM;FailoverUnitCounts;;metric:(failoverUnitCounts.quorumLossFailoverUnits, failoverUnitCounts.statelessFailoverUnits, failoverUnitCounts.persistedFailoverUnits, failoverUnitCounts.unhealthyFailoverUnits, failoverUnitCounts.volatileFailoverUnits, failoverUnitCounts.deletingFailoverUnits, failoverUnitCounts.deletedFailoverUnits, failoverUnitCounts.inBuildFailoverUnits, failoverUnitCounts.offlineReplicas, failoverUnitCounts.standByReplicas, failoverUnitCounts.droppedReplicas, failoverUnitCounts.inBuildReplicas, failoverUnitCounts.failoverUnits, failoverUnitCounts.replicas){Snapshot, Maximum, Minimum, Average, Variance}
s;FM;ServiceCreatedOperational;applicationName;property:(applicationName){Count}
s;FM;ServiceDeletedOperational;applicationName;property:(applicationName){Count}

# CM
s;CM;ApplicationUpgradeStartOperational;;property:(applicationName){Count}
s;CM;ApplicationUpgradeCompleteOperational;;property:(applicationName){Count}
s;CM;ApplicationUpgradeRollbackStartOperational;;property:(applicationName){Count}
s;CM;ApplicationUpgradeRollbackCompleteOperational;;property:(applicationName){Count}
s;CM;ApplicationCreatedOperational;;property:(applicationName){Count}
s;CM;ApplicationDeletedOperational;;property:(applicationName){Count}
s;CM;ClusterUpgradeStartOperational;;property:(targetClusterVersion){Snapshot, Count}
s;CM;ClusterUpgradeCompleteOperational;;property:(targetClusterVersion){Snapshot, Count},metric:(overallUpgradeElapsedTimeInMs){Snapshot, Sum, Maximum, Minimum, Average, Variance}
s;CM;ClusterUpgradeRollbackStartOperational;;property:(targetClusterVersion){Snapshot, Count},metric:(failureReason){Snapshot},metric:(overallUpgradeElapsedTimeInMs){Snapshot, Sum, Maximum, Minimum, Average, Variance}
s;CM;ClusterUpgradeRollbackCompleteOperational;;property:(targetClusterVersion){Snapshot, Count},metric:(failureReason){Snapshot},metric:(overallUpgradeElapsedTimeInMs){Snapshot, Sum, Maximum, Minimum, Average, Variance}
s;CM;ApplicationCreated;manifestid;property:(manifestid){Snapshot, Count}
s;CM;ApplicationUpgradeStart;targetmanifestid;property:(currentmanifestid, targetmanifestid){Snapshot, Count}
s;CM;ApplicationUpgradeComplete;targetmanifestid;property:(currentmanifestid, targetmanifestid){Snapshot, Count}
s;CM;ApplicationUpgradeRollback;targetmanifestid;property:(currentmanifestid, targetmanifestid){Snapshot, Count}
s;CM;ApplicationUpgradeRollbackComplete;targetmanifestid;property:(currentmanifestid, targetmanifestid){Snapshot, Count}
s;CM;ApplicationDeleted;manifestid;property:(manifestid){Snapshot, Count}

# Hosting
s;Hosting;ContainerActivated;IsolationMode;property:(IsolationMode){Snapshot, Count}
s;Hosting;ContainerDeactivated;;property:(Name){Count}
s;Hosting;ContainerTerminated;;property:(Name){Count}
s;Hosting;ActiveExecutablesAndContainersStats;;metric:(ContainersCount,ApplicationsCount){Snapshot, Maximum, Minimum, Average, Variance}

# FabricNode
s;FabricNode;NodeOpenedSuccessOperational;isSeedNode;property:(isSeedNode){Count, Snapshot}
s;FabricNode;NodeOpenedFailedOperational;isSeedNode;property:(isSeedNode){Count, Snapshot}, metric:(error){Count, Snapshot}
s;FabricNode;NodeClosedOperational;error;metric:(error){Count, Snapshot}
s;FabricNode;NodeAbortedOperational;isSeedNode;property:(isSeedNode){Count, Snapshot}

# DCA
s;FabricDCA;PluginConfigurationTelemetry;;metric:(pluginsEnabled){Snapshot}
s;FabricDCA;AppPluginConfigurationTelemetry;pluginsEnabled;metric:(pluginsEnabled){Snapshot},property:(applicationInstanceIdHash){Snapshot}
s;FabricDCA;DiskSpaceManagerGlobalPolicyStats;isSafeDeletion;property:(isSafeDeletion){Snapshot},metric:(deleteSuccessfulFiles, deleteAttemptedFiles, bytesDeleted, bytesGoal){Sum, Count, Maximum, Minimum, Average, Variance},metric:(oldestFileInMinutes){Maximum, Minimum, Average, Variance}
s;FabricDCA;EtlPassPerformance;traceType;property:(traceType){Snapshot},metric:(passTimeInSeconds, etwEventsProcessed){Sum, Maximum, Minimum, Average, Variance}
s;FabricDCA;EtlPassBacklogPerformance;traceType;property:(traceType){Snapshot},metric:(backlogSize){Maximum, Minimum, Average, Variance}
s;FabricDCA;TraceSessionStats;traceSessionName;property:(traceSessionName){Snapshot},metric:(eventsLostCount){Maximum}

# RE
s;RE;SecondaryDrainDispatchQueue;queueType;property:(queueType){Snapshot, Count},metric:(itemCount){Sum, Count, Maximum, Minimum, Average, Variance}
s;RE;SecondaryDrainDispatchQueue;reason;property:(reason){Snapshot, Count},metric:(itemCount){Sum, Count, Maximum, Minimum, Average, Variance}
s;RE;PrimaryReplicateDone;;property:(id){Count},metric:(total){Sum}

# TReplicator
s;TReplicator;Telemetry;id;property:(id){Snapshot, Count},metric:(commitRate){Snapshot, Maximum, Minimum, Average, Variance}
s;TReplicator;ProgressVectorValidationTelemetry;;property:(id, errorMessage, sourceVector, sourceVectorEntry, targetVector, targetVectorEntry){Snapshot, Count},metric:(sourceIndex, targetIndex){Snapshot}

# LR (Native TReplicator)
s;LR;ProgressVectorValidationTelemetry;;property:(id, errorMessage, sourceVector, sourceVectorEntry, targetVector, targetVectorEntry){Snapshot, Count},metric:(sourceIndex, targetIndex){Snapshot}

# TStore
s;TStore;StoreCountTelemetry;;metric:(numberOfStores){Average}
s;TStore;ItemCountTelemetry;;metric:(totalItemCount){Maximum, Average}
s;TStore;DiskSizeTelemetry;;metric:(totalDiskSize){Maximum, Average}
s;TStore;KeyTypeTelemetry;;metric:(customKeyTypePercentage){Average}
s;TStore;KeyValueSizeTelemetry;;metric:(totalKeySize, numberOfKeys, totalValueSize, numberOfValues){Sum}
s;TStore;ReadWriteTelemetry;;metric:(numberOfReads, numberOfWrites){Sum}
s;TStore;ReadLatencyTelemetry;;metric:(totalReadLatencyInUs,numberOfReads){Sum},metric:(lastReadLatencyInUs){Snapshot}

# InfrastructureService
s;InfrastructureService;InfrastructureServiceAggregatedEvent;id;property:(message){Snapshot}

# DNS
s;DNS;DnsServiceCreated;;property:(service){Count}
s;DNS;DnsServiceDeleted;;property:(service){Count}
s;DNS;DnsServiceStartingOpen;;metric:(port){Count}
s;DNS;DnsExchangeOpRemoteResolve;;metric:(count){Count}
s;DNS;DnsExchangeOpReadQuestion;;metric:(count){Count}
s;DNS;DnsExchangeOpFabricResolve;;metric:(count){Count}

# Chaos
s;Testability;ChaosFound;;property:(foundChaos, isRunning){Snapshot},metric:(timestampUtcOfLastStartInTicks){Snapshot}
s;Testability;ChaosExecutingFaults;;metric:(faultCount){Sum},metric:(timestampUtcInTicks){Snapshot},property:(faultString){Snapshot}
s;Testability;ChaosEngineError;id;property:(id){Count,Snapshot}
s;Testability;ChaosSnapshot;id;metric:(nodeCount, appCount, serviceCount, partitionCount, replicaCount, snapshotTimeInSeconds, unsafeMarkingTimeInSeconds, retryCount){Snapshot}
s;Testability;ChaosStop;;property:(id){Count},metric:(timeStampUtcInTicks){Snapshot},metric:(manual){Sum}
s;Testability;ChaosStart;;metric:(maxConcurrentFaults, timeToRunInSeconds, maxClusterStabilizationTimeoutInSeconds, waitTimeBetweenIterationsInSeconds, waitTimeBetweenFaultsInSeconds){Snapshot, Minimum, Maximum, Average, Variance}
s;Testability;ChaosValidationFailed;;property:(reason){Snapshot},metric:(timeStampUtcInTicks){Snapshot}

# CRM
s;CRM;ResourceGovernanceStatistics;;metric:(rgStatistics.servicePackageCount, rgStatistics.governedServicePackageCount, rgStatistics.exclusiveServiceCount, rgStatistics.sharedServiceCount, rgStatistics.cpuCores.resourceUsed, rgStatistics.memoryInMB.resourceUsed){Snapshot, Maximum, Minimum, Average, Variance},property:(rgStatistics.autoDetectResources) {Snapshot},metric:(rgStatistics.cpuCores.totalResource, rgStatistics.cpuCores.minRequest, rgStatistics.cpuCores.maxRequest, rgStatistics.memoryInMB.totalResource, rgStatistics.memoryInMB.minRequest, rgStatistics.memoryInMB.maxRequest){Snapshot, Minimum, Maximum}
s;CRM;AutoScalingStatistics;;metric:(autoscaleStatistics.cpuCores.partitionCount, autoscaleStatistics.memoryInMB.partitionCount, autoscaleStatistics.customMetric.partitionCount){Snapshot, Maximum, Minimum, Average, Variance}
s;CRM;DefragmentationStatistics;;metric:(defragStatistics.balancingMetricsCount, defragStatistics.balancingReservationMetricsCount, defragStatistics.reservationMetricsCount, defragStatistics.packReservationMetricsCount, defragStatistics.defragMetricsCount, defragStatistics.otherMetricsCount){Snapshot}

#BRS
s;BackupRestoreService;BackupRestoreEnabled;;property:(type){Snapshot}
s;BackupRestoreService;BackupPolicyDetails;;property:(name){Count},metric:(incrementalBackupValue){Maximum, Minimum, Average, Variance},metric:(isAutoRestored, timeBaseSchedule, frequencyBasedSchedule, azureStorageBased, fileShareStorageBased){Sum}
s;BackupRestoreService;IncrementalBackupDetails;;property:(partitionId){Count},metric:(backupSizeInKB, zipSizeInKB, timeForLocalBackup, timeForUpload , totalTimeForBackup){Maximum, Minimum, Average, Variance}
s;BackupRestoreService;FullBackupDetails;;property:(partitionId){Count},metric:(backupSizeInKB, zipSizeInKB, timeForLocalBackup, timeForUpload , totalTimeForBackup){Maximum, Minimum, Average, Variance}
s;BackupRestoreService;BackupRestoreDetails;;property:(partitionId){Count},metric:(timeForRestore,backupCounts){Maximum, Minimum, Average, Variance},metric:(autoRestoredCount, successfullRestore){Sum}

#RA
s;RA;ReconfigurationCompleted;reconfigType;metric:(reconfigType){Snapshot, Count},metric:(phase0DurationMs,phase1DurationMs,phase2DurationMs,phase3DurationMs,phase4DurationMs,totalDurationMs){Maximum, Minimum, Average, Variance}

#EventStore
s;Testability;EventStoreQueryStat;entityType;property:(entityType){Snapshot, Count},metric:(queryExecutionTimeMs, queryItemCount){Maximum, Minimum, Average, Variance}
s;Testability;EventStoreFailed;;property:(queryArgs){Count}
s;Testability;EventStoreUnsupportedUri;;property:(message){Count}
s;Testability;EventStoreCacheMiss;cacheName;property:(cacheName){Count}
s;Testability;EventStorePerfTelemetry;;metric:(memoryUsageMb){Maximum, Minimum, Average, Variance}
s;Testability;EventStoreCacheTelemetry;cacheName;property:(cacheName){Snapshot},metric:(cacheItemCount, cacheDurationHours){Maximum, Minimum, Average, Variance}