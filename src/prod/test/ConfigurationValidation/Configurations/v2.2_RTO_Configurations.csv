#This file contains all possible configurations. The only supported configurations are the public configurations.
#Section Name,Setting Name,Type,Default Value,Upgrade Policy,Setting Type,Config Found In,Description
LocalLogStore,LocalLogDeletionEnabled,bool,false,Dynamic,PUBLIC,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
LocalLogStore,LogDeletionAgeInDays,int,7,Dynamic,PUBLIC,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticFileStore,IsEnabled,bool,false,Dynamic,PUBLIC,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticFileStore,StoreConnectionString,string,,Dynamic,PUBLIC,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticFileStore,UploadIntervalInMinutes,int,5,Dynamic,PUBLIC,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticFileStore,LogContainerName,string,,Dynamic,PUBLIC,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticFileStore,CrashDumpContainerName,string,,Dynamic,PUBLIC,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticFileStore,LogDeletionAgeInDays,int,7,Dynamic,PUBLIC,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticFileStore,LogFilter,string,,Dynamic,INTERNAL,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticFileStore,IsAppLogCollectionEnabled,bool,false,Dynamic,PUBLIC,No Source File (deployer only) ,Deprecated. Please use application manifest to specify application diagnostics settings."
DiagnosticFileStore,AppLogDirectoryQuotaInMB,int,1024,Dynamic,PUBLIC,No Source File (converted to Management.MonitoringAgentDirectoryQuota in ManagementConfig.h) ,Deprecated. Please use application manifest to specify application diagnostics settings."
DiagnosticFileStore,TestOnlyLogDeletionAgeInMinutes,int,0,Dynamic,TEST,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticTableStore,IsEnabled,bool,false,Dynamic,PUBLIC,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticTableStore,StoreConnectionString,string,,Dynamic,PUBLIC,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticTableStore,UploadIntervalInMinutes,int,5,Dynamic,PUBLIC,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticTableStore,TableName,string,,Dynamic,PUBLIC,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticTableStore,LogDeletionAgeInDays,int,7,Dynamic,PUBLIC,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticTableStore,LogFilter,string,,Dynamic,INTERNAL,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticTableStore,TestOnlyLogDeletionAgeInMinutes,int,0,Dynamic,TEST,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
DiagnosticTableStore,UploadConcurrencyCount,int,4,Dynamic,INTERNAL,src\Managed\DCA\Settings.cs,"Deprecated. Please use the new producer-consumer model instead."
Diagnostics,ConsumerInstances,string,,Dynamic,PUBLIC,src\Managed\DCA\Settings.cs,"The list of DCA consumer instances"
Diagnostics,ProducerInstances,string,,Dynamic,PUBLIC,src\Managed\DCA\Settings.cs,"The list of DCA producer instances"
Diagnostics,ConfigurationChangeReactionTimeInSeconds,int,5,Dynamic,INTERNAL,src\Managed\DCA\Settings.cs,"Time to wait before reacting to configuration change"
Diagnostics,AppInstanceDataEtlFlushIntervalInSeconds,int,60,Dynamic,INTERNAL,src\Managed\DCA\Settings.cs,"Interval at which to flush ETL file ETW session for application instance related events"
Diagnostics,AppInstanceDataEtlReadIntervalInMinutes,int,3,Dynamic,INTERNAL,src\Managed\DCA\Settings.cs,"Interval (in minutes) at which to read ETL files containing application instance related events"
Diagnostics,TestOnlyAppInstanceDataEtlReadIntervalInSeconds,int,0,Dynamic,TEST,src\Managed\DCA\Settings.cs,"Interval (in seconds) at which to read ETL files containing application instance related events"
Diagnostics,TestOnlyAppDataDeletionIntervalInSeconds,int,10800,Dynamic,TEST,src\Managed\DCA\Settings.cs,"Interval at which we delete old data related to application instances"
Diagnostics,AppEtwTraceDeletionAgeInDays,int,3,Dynamic,PUBLIC,src\Managed\DCA\Settings.cs,"Number of days after which we delete old ETL files containing application ETW traces"
Diagnostics,TestOnlyAppEtwTraceDeletionAgeInMinutes,int,0,Dynamic,TEST,src\Managed\DCA\Settings.cs,"Number of minutes after which we delete old ETL files containing application ETW traces"
Diagnostics,AppDiagnosticStoreAccessRequiresImpersonation,bool,true,Dynamic,PUBLIC,src\Managed\DCA\Settings.cs,"Whether or not impersonation is required when accessing diagnostic stores on behalf of the application"
Diagnostics,TestOnlyDtrDeletionAgeInMinutes,int,1440,Dynamic,TEST,src\Managed\DCA\Settings.cs,"Number of minutes after which we delete DTR files that are located on the node"
Diagnostics,MaxDiskQuotaInMB,int,65536,Dynamic,PUBLIC,src\Managed\DCA\Settings.cs,"Disk quota in MB for Windows Fabric log files"
Diagnostics,TestOnlyOldDataDeletionIntervalInSeconds,int,30,Dynamic,TEST,src\Managed\DCA\Settings.cs,"Interval (in seconds) at which we perform deletion of old files, if necessary"
Diagnostics,PluginFlushTimeoutInSeconds,int,180,Dynamic,INTERNAL,src\Managed\DCA\Settings.cs,"Timeout (in seconds) for a plugin to complete its flush operations on dispose"
Trace/Etw,Level,int,4,Dynamic,PUBLIC,Trace.cpp,"Trace etw level"
Trace/Etw,Filters,string,L"",Dynamic,INTERNAL,Trace.cpp,"Trace etw filters"
Trace/Etw,Sampling,int,0,Dynamic,INTERNAL,Trace.cpp,"Trace etw sampling interval"
Trace/File,Level,int,4,Dynamic,INTERNAL,Trace.cpp,"Trace file level"
Trace/File,Filters,string,L"",Dynamic,INTERNAL,Trace.cpp,"Trace file filters"
Trace/File,Path,string,Fabric.trace,Dynamic,INTERNAL,Trace.cpp,"Trace file path"
Trace/File,Option,,L"",Dynamic,INTERNAL,Trace.cpp,"Trace file options"
Trace/Console,Filters,string,L"",Dynamic,INTERNAL,Trace.cpp,"Trace console filters"
Trace/Console,Level,int,0,Dynamic,INTERNAL,Trace.cpp,"Trace console level"
PerformanceCounterLocalStore,IsEnabled,bool,true,Dynamic,PUBLIC,Setup\FabricDeployer\DeployerCommon\PerformanceCounters.cs,"Flag indicates whether performance counter collection on local node is enabled"
PerformanceCounterLocalStore,SamplingIntervalInSeconds,int,60,Dynamic,PUBLIC,Setup\FabricDeployer\DeployerCommon\PerformanceCounters.cs,"Sampling interval for performance counters being collected"
PerformanceCounterLocalStore,Counters,string,,Dynamic,PUBLIC,Setup\FabricDeployer\DeployerCommon\PerformanceCounters.cs,"Comma-separated list of performance counters to collect"
PerformanceCounterLocalStore,TestOnlyCounterFilePath,string,,Dynamic,TEST,Setup\FabricDeployer\DeployerCommon\PerformanceCounters.cs,"Path to the folder where the performance counter data is collected"
PerformanceCounterLocalStore,TestOnlyCounterFileNamePrefix,string,,Dynamic,TEST,Setup\FabricDeployer\DeployerCommon\PerformanceCounters.cs,"Prefix used in the names of the files containing performance counter data"
PerformanceCounterLocalStore,TestOnlyIncludeMachineNameInCounterFileName,bool,false,Dynamic,TEST,Setup\FabricDeployer\DeployerCommon\PerformanceCounters.cs,"Flag indicates whether the machine name is included in the names of the files containing performance counter data"
PerformanceCounterLocalStore,MaxCounterBinaryFileSizeInMB,int,1,Dynamic,PUBLIC,Setup\FabricDeployer\DeployerCommon\PerformanceCounters.cs,"Maximum size (in MB) for each performance counter binary file"
PerformanceCounterLocalStore,NewCounterBinaryFileCreationIntervalInMinutes,int,10,Dynamic,PUBLIC,Setup\FabricDeployer\DeployerCommon\PerformanceCounters.cs,"Maximum interval (in seconds) after which a new performance counter binary file is created"
Common,DebugBreakEnabled,bool,false,Static,TEST,src\Common\AssertWF.h,""
Common,TestAssertEnabled,bool,false,Static,TEST,src\Common\AssertWF.h,""
Setup,FabricDataRoot,string,"",NotAllowed,PUBLIC,Setup\FabricDeployer\Constants.cs,"The Windows Fabric data root directory"
Setup,FabricLogRoot,string,"",NotAllowed,PUBLIC,Setup\FabricDeployer\Constants.cs,"The windows fabric log root directory."
Setup,ServiceRunAsAccountName,string,"",NotAllowed,PUBLIC,Setup\FabricDeployer\Constants.cs,"The account name under which to run fabric host service."
Setup,ServiceRunAsPassword,string,"",NotAllowed,TEST,Setup\FabricDeployer\Constants.cs,"The account password under which to run fabric host service."
Setup,ServiceStartupType,string,"",NotAllowed,TEST,Setup\FabricDeployer\Constants.cs,"The startup type of the fabric host service."
FabricClient,NodeAddresses,wstring,L"",Static,PUBLIC,src\client\ClientConfig.h,A collection of addresses (connection strings) on different nodes that can be used to communicate with the the Naming Service. Initially the Client connects selecting one of the addresses randomly. If more than one connection string is supplied and a connection fails because of a communication or timeout error; the Client switches to use the next address sequentially. See the Naming Service Address retry section for details on retries semantics. 
FabricClient,ConnectionInitializationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(2),Dynamic,PUBLIC,src\client\ClientConfig.h,Specify timespan in seconds. Connection timeout interval for each time client tries to open a connection to the gateway 
FabricClient,PartitionLocationCacheLimit,int,1000,Static,PUBLIC,src\client\ClientConfig.h,Number of partitions cached for service resolution 
FabricClient,ServiceChangePollInterval,TimeSpan,Common::TimeSpan::FromSeconds(120),Dynamic,PUBLIC,src\client\ClientConfig.h,Specify timespan in seconds. The interval between consecutive polls for service changes from the client to the gateway for registered service change notifications callbacks 
FabricClient,KeepAliveIntervalInSeconds,int,0,Static,PUBLIC,src\client\ClientConfig.h,The interval at which FabricClient sends KeepAlive messages to gateway. For 0; keepAlive is disabled. Must be a positive value 
FabricClient,MaxServiceChangePollBatchedRequests,int,0,Dynamic,TEST,src\client\ClientConfig.h,The maximum number of requests that can be packaged together in a poll request. Used to test the notification paging of the requests from client to gateway. Default is 0; which shows that the feature is disabled. 
FabricClient,HealthOperationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(120),Dynamic,PUBLIC,src\client\ClientConfig.h,Specify timespan in seconds. The timeout for a report message sent to Health Manager. 
FabricClient,HealthReportSendInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,PUBLIC,src\client\ClientConfig.h,Specify timespan in seconds. The interval at which reporting component sends accumulated health reports to Health Manager. 
FabricClient,IsHealthReportingEnabled,bool,true,NotAllowed,INTERNAL,src\client\ClientConfig.h,Whether to enable health reporting 
FabricClient,MaxNumberOfHealthReportsPerMessage,int,500,Dynamic,INTERNAL,src\client\ClientConfig.h,The maximum number of reports that can be batched in the message sent to Health Manager. 
FabricClient,MaxNumberOfHealthReports,int,10000,Static,INTERNAL,src\client\ClientConfig.h,The maximum number of health reports that can be queued for processing by a reporting component. 
FabricClient,HealthReportRetrySendInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,PUBLIC,src\client\ClientConfig.h,Specify timespan in seconds. The interval at which reporting component re-sends accumulated health reports to Health Manager. 
FabricClient,RetryBackoffInterval,TimeSpan,Common::TimeSpan::FromSeconds(3),Dynamic,PUBLIC,src\client\ClientConfig.h,Specify timespan in seconds. The back-off interval before retrying the operation 
FabricClient,MaxFileSenderThreads,uint,10,Static,PUBLIC,src\client\ClientConfig.h,The max number of files that are transferred in parallel 
Common,PerfMonitorInterval,TimeSpan,Common::TimeSpan::FromSeconds(1),Static,INTERNAL,src\Common\CommonConfig.h,Specify timespan in seconds. Performance monitoring interval.  Setting to 0 or negative value disables monitoring 
Common,MinResourceStringBufferSizeInWChars,int,256,Static,INTERNAL,src\Common\CommonConfig.h,Minimum buffer allocated for reading resource strings 
Common,MaxResourceStringBufferSizeInWChars,int,32768,Static,INTERNAL,src\Common\CommonConfig.h,Maximum buffer allocated for reading resource strings 
Common,MaxNamingUriLength,int,512,Static,INTERNAL,src\Common\CommonConfig.h,Maximum allowed Naming URI length including the scheme (depends on local store limits) 
Common,UseInstanceNameAsNodeId,bool,false,Static,INTERNAL,src\Common\CommonConfig.h,Test configuration to specify that node 
Common,SendReplyBufferTimeout,TimeSpan,Common::TimeSpan::FromSeconds(2.0),Dynamic,INTERNAL,src\Common\CommonConfig.h,Specify timespan in seconds. The timeout buffer used to send back partial reply when processing times out 
Common,LockTraceNamePrefix,string,"",Static,INTERNAL,src\Common\CommonConfig.h,The locks to enable in lock traces 
FabricNode,NodeId,wstring,L"0",Static,INTERNAL,src\Common\FabricNodeConfig.h,This setting specifies the Id that identifies a node in the cluster for internal communication. Each Node in the cluster must have a unique NodeId. 
FabricNode,NodeVersion,FabricVersionInstance,FabricVersionInstance::Default,Dynamic,INTERNAL,src\Common\FabricNodeConfig.h,This setting specifies the version of the FabricNode. The value is set by FabricDeployer during the deployment time. The version string of the format <CodeVersion>:<ConfigVersion>:<InstanceId>. This setting can be dynamically updated during the configuration only upgrades or on instance id changes. 
FabricNode,NodeAddress,wstring,L"<IPorFullyQualifiedDomainName>:<Port>",Static,INTERNAL,src\Common\FabricNodeConfig.h,Endpoint for federation layer communications between one node and another. If the Node is a Seed/Voter node; then this address is also specified in the votes section of all nodes. Required to be set; default here is an invalid value. 
FabricNode,IPAddressOrFQDN,wstring,L"0.0.0.0",Static,INTERNAL,src\Common\FabricNodeConfig.h,IPAddressOrFQDN property specified in ClusterManifest 
FabricNode,LeaseAgentAddress,wstring,L"<IPorFullyQualifiedDomainName>:<Port>",Static,INTERNAL,src\Common\FabricNodeConfig.h,Endpoint for communication between the lease drivers of different nodes. This endpoint is exclusive to lease traffic. Required to be set; default here is an invalid value. 
FabricNode,RuntimeServiceAddress,wstring,L"0.0.0.0:0",Static,INTERNAL,src\Common\FabricNodeConfig.h,Address for the IPC channel between the Fabric Runtime in the user service host process and Windows Fabric service on this node. 
FabricNode,ClientConnectionAddress,wstring,L"<IPorFullyQualifiedDomainName>:<Port>",Static,INTERNAL,src\Common\FabricNodeConfig.h,This setting specifies the address than Naming Clients can talk to contact the Naming Service in the cluster through this particular node. Not having this address; clients are not able to contact the naming service through this node. Required to be set; default here is an invalid value. 
FabricNode,HttpGatewayListenAddress,wstring,L"<IPorFullyQualifiedDomainName>:<Port>",Static,INTERNAL,src\Common\FabricNodeConfig.h,The address where the http gateway listens. Required to be set; default here is an invalid value. 
FabricNode,HttpGatewayProtocol,wstring,L"",Static,INTERNAL,src\Common\FabricNodeConfig.h,
FabricNode,ClusterManagerReplicatorAddress,wstring,L"localhost:0",Static,INTERNAL,src\Common\FabricNodeConfig.h,The address that cluster manager uses to replicate to its other replica. 
FabricNode,RepairManagerReplicatorAddress,wstring,L"localhost:0",Static,INTERNAL,src\Common\FabricNodeConfig.h,The address that repair manager uses to replicate to its other replica. 
FabricNode,ImageStoreServiceReplicatorAddress,wstring,L"localhost:0",Static,INTERNAL,src\Common\FabricNodeConfig.h,The address that image store service uses to replicate to its other replica. 
FabricNode,NamingReplicatorAddress,wstring,L"localhost:0",Static,INTERNAL,src\Common\FabricNodeConfig.h,The address that naming service uses to replicate to its other replica. 
FabricNode,FailoverManagerReplicatorAddress,wstring,L"localhost:0",Static,INTERNAL,src\Common\FabricNodeConfig.h,The address that Failover manager uses to replicate to its other replica. 
FabricNode,WorkingDir,wstring,L"",Static,INTERNAL,src\Common\FabricNodeConfig.h,Path used by the Fabric Service to read or write information for local operation. This is the base directory for all other directories specified at the node; unless those directories specify full paths. If no value is provided then it takes as base the directory in which the Service is running. 
FabricNode,InstanceName,wstring,L"",Static,INTERNAL,src\Common\FabricNodeConfig.h,Node name 
FabricNode,NodeType,wstring,L"",Static,INTERNAL,src\Common\FabricNodeConfig.h,Type of the Node defined in the cluster manifest 
FabricNode,IsScaleMin,bool,false,Static,INTERNAL,src\Common\FabricNodeConfig.h,specifies if this node is part of the scalemin deployment or not 
FabricNode,StateTraceInterval,TimeSpan,TimeSpan::FromSeconds(300),Static,PUBLIC,src\Common\FabricNodeConfig.h,Specify timespan in seconds. The interval for tracing node status on each node and up nodes on FM/FMM. 
FabricNode,AssertOnNodeFailure,bool,false,Static,INTERNAL,src\Common\FabricNodeConfig.h,Whether to assert and kill the process when a node fails (because of lease for example). 
FabricNode,SystemServiceInitializationTimeout,TimeSpan,TimeSpan::FromSeconds(10),Static,INTERNAL,src\Common\FabricNodeConfig.h,Specify timespan in seconds. Timeout used for requests to FM when initializing system services 
FabricNode,SystemServiceInitializationRetryInterval,TimeSpan,TimeSpan::FromSeconds(10),Static,INTERNAL,src\Common\FabricNodeConfig.h,Specify timespan in seconds. Retry interval used for requests to FM when initializing system services 
NodeDomainIds,UpgradeDomainId,wstring,L"",Static,PUBLIC,src\Common\FabricNodeConfig.h,Describes the upgrade domain a node belongs to. 
NodeDomainIds,PropertyGroup,NodeFaultDomainIdCollection,None,Static,PUBLIC,src\Common\FabricNodeConfig.h,Describes the fault domains a node belongs to. The fault domain is defined through a URI that describes the location of the node in the datacenter.  Fault Domain URIs are of the format fd:/fd/ followed by a URI path segment. 
NodeProperties,PropertyGroup,NodePropertyCollectionMap,None,Static,PUBLIC,src\Common\FabricNodeConfig.h,A collection of string key-value pairs for node properties. 
NodeCapacities,PropertyGroup,NodeCapacityCollectionMap,None,Static,PUBLIC,src\Common\FabricNodeConfig.h,A collection of node capacities for different metrics. 
FabricNode,StartApplicationPortRange,int,0,Static,PUBLIC,src\Common\FabricNodeConfig.h,Start of the application ports managed by hosting subsystem. Required if EndpointFilteringEnabled is true in Hosting. 
FabricNode,EndApplicationPortRange,int,0,Static,PUBLIC,src\Common\FabricNodeConfig.h,End (no inclusive) of the application ports managed by hosting subsystem. Required if EndpointFilteringEnabled is true in Hosting. 
FabricNode,ClusterX509StoreName,wstring,L"My",Static,PUBLIC,src\Common\FabricNodeConfig.h,Name of X.509 certificate store that contains cluster certificate for securing intra-cluster communication 
FabricNode,ClusterX509FindType,wstring,L"FindByThumbprint",Static,PUBLIC,src\Common\FabricNodeConfig.h,Indicates how to search for cluster certificate in the store specified by ClusterX509StoreName Supported value: "FindByThumbprint" 
FabricNode,ClusterX509FindValue,wstring,L"",Dynamic,PUBLIC,src\Common\FabricNodeConfig.h,Search filter value used to locate cluster certificate. 
FabricNode,ServerAuthX509StoreName,wstring,L"My",Static,PUBLIC,src\Common\FabricNodeConfig.h,Name of X.509 certificate store that contains server certificate for entree service 
FabricNode,ServerAuthX509FindType,wstring,L"FindByThumbprint",Static,PUBLIC,src\Common\FabricNodeConfig.h,Indicates how to search for server certificate in the store specified by ClusterX509StoreName Supported value: "FindByThumbprint" 
FabricNode,ServerAuthX509FindValue,wstring,L"",Dynamic,PUBLIC,src\Common\FabricNodeConfig.h,Search filter value used to locate server certificate. 
FabricNode,ClientAuthX509StoreName,wstring,L"My",Static,PUBLIC,src\Common\FabricNodeConfig.h,Name of the X.509 certificate store that contains certificate for default FabricClient. 
FabricNode,ClientAuthX509FindType,wstring,L"FindByThumbprint",Static,PUBLIC,src\Common\FabricNodeConfig.h,Indicates how to search for certificate in the store specified by ClusterX509StoreName Supported value: "FindByThumbprint" 
FabricNode,ClientAuthX509FindValue,wstring,L"",Dynamic,PUBLIC,src\Common\FabricNodeConfig.h,Search filter value used to locate certificate for default FabricClient 
FabricNode,StartStopFileName,wstring,L"StartStopNode.txt",Static,INTERNAL,src\Common\FabricNodeConfig.h,
NodeGlobal,OpenTimeout,TimeSpan,Common::TimeSpan::FromSeconds(300),Static,INTERNAL,src\Common\FabricNodeGlobalConfig.h,Specify timespan in seconds. FabricNode open timeout 
NodeGlobal,CloseTimeout,TimeSpan,Common::TimeSpan::FromSeconds(300),Static,INTERNAL,src\Common\FabricNodeGlobalConfig.h,Specify timespan in seconds. FabricNode close timeout 
Security,SettingsX509StoreName,wstring,L"MY",Dynamic,PUBLIC,src\Common\SecurityConfig.h,X509 certificate store used by fabric for configuration protection 
Security,NegotiationTimeout,TimeSpan,TimeSpan::FromSeconds(60),Static,PUBLIC,src\Common\SecurityConfig.h,Specify timespan in seconds. Security negotiation timeout 
Security,SessionExpiration,TimeSpan,TimeSpan::FromSeconds(3600 * 8),Static,PUBLIC,src\Common\SecurityConfig.h,Specify timespan in seconds. Max time interval for a secure session to live after security configuration changes; setting to 0 disables such expiration. This is needed for local credential update and remote credential expiration/revocation. 
Security,ForceSessionRefreshAtExpiration,bool,false,Dynamic,INTERNAL,src\Common\SecurityConfig.h,Force establishing a new session when current session expires. By default; an existing SSL session stays across session expiration; as long as the remote certificate is still valid and security settings have not been updated 
Security,ClaimsTokenErrorCloseDelay,TimeSpan,TimeSpan::FromSeconds(10),Dynamic,INTERNAL,src\Common\SecurityConfig.h,Specify timespan in seconds. Close delay for claims token error to make sure feedback be delivered to clients 
Security,ClusterCredentialType,wstring,L"None",NotAllowed,PUBLIC,src\Common\SecurityConfig.h,Indicates the type of security credentials to use in order to secure the cluster. Valid values are "None/X509/Windows" 
Security,ClusterProtectionLevel,wstring,L"EncryptAndSign",NotAllowed,INTERNAL,src\Common\SecurityConfig.h,The string value used to specify whether the messages (header and body) have integrity and confidentiality guarantees applied to them when sent between the nodes of a cluster. Valid values are "None/Sign/EncryptAndSign" 
Security,ServerAuthCredentialType,wstring,L"None",Static,PUBLIC,src\Common\SecurityConfig.h,Indicates the type of security credentials to use in order to secure the communication between FabricClient and the Cluster. Valid values are "None/X509/Windows" 
Security,ClientServerProtectionLevel,wstring,L"EncryptAndSign",Static,INTERNAL,src\Common\SecurityConfig.h,The string value used to specify whether the messages (header and body) have  integrity and confidentiality guarantees applied to them when sent between client and server. Valid values are "None/Sign/EncryptAndSign" 
Security,ClientRoleEnabled,bool,false,Static,PUBLIC,src\Common\SecurityConfig.h,Indicates if client role is enabled; when set to true; clients are assigned roles based on their identities. For V2; enabling this means clients not in AdminClientCommonNames/AdminClientIdentities can only execute read-only operations. 
Security,ClusterAllowedCommonNames,wstring,L"",Dynamic,PUBLIC,src\Common\SecurityConfig.h,Certificate common names of remote subjects allowed to join the cluster; a setting used by cluster node to recognize other peer cluster nodes. It is a comma separated name list. 
Security,ServerAuthAllowedCommonNames,wstring,L"",Dynamic,PUBLIC,src\Common\SecurityConfig.h,Certificate common names of expected naming gateway servers; a setting used by default fabric clients. It is a comma separated name list. 
Security,ClientAuthAllowedCommonNames,wstring,L"",Dynamic,PUBLIC,src\Common\SecurityConfig.h,Certificate common names of fabric clients allowed to talk to naming gateway; a setting used by naming gateway to authorize fabric clients. It is a comma separated name list; common name of default fabric client is automatically added to the list. 
Security,AdminClientCommonNames,wstring,L"",Dynamic,PUBLIC,src\Common\SecurityConfig.h,Certificate common names of fabric clients in admin role; used to authorize privileged fabric operations. It is a comma separated list. 
Security,ClusterCertIssuers,wstring,L"",Dynamic,PUBLIC,src\Common\SecurityConfig.h,X509 certificate issuers for cluster certificates; a comma seperated thumbprint list. Issuer Checking is disabled when the list is empty; which is the default. 
Security,ServerCertIssuers,wstring,L"",Dynamic,PUBLIC,src\Common\SecurityConfig.h,X509 certificate issuers for server certificates; a comma seperated thumbprint list. Issuer Checking is disabled when the list is empty; which is the default. 
Security,ClientCertIssuers,wstring,L"",Dynamic,PUBLIC,src\Common\SecurityConfig.h,X509 certificate issuers for client certificates; a comma seperated thumbprint list. Issuer Checking is disabled when the list is empty; which is the default. 
Security,CrlCheckingFlag,int,1073741824,Dynamic,INTERNAL,src\Common\SecurityConfig.h,Certificate revocation list checking flag; 1073741824 (0x40000000) is recommended by crypto team among the following: CERT_CHAIN_REVOCATION_CHECK_END_CERT            268435456 (0x10000000) CERT_CHAIN_REVOCATION_CHECK_CHAIN               536870912 (0x20000000) CERT_CHAIN_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT 1073741824 (0x40000000) CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY         2147483648 (0x80000000) dwFlags of CertGetCertificateChain: http://msdn.microsoft.com/en-us/library/windows/desktop/aa376078(v=vs.85).aspx 
Security,IgnoreCrlOfflineError,bool,false,Dynamic,INTERNAL,src\Common\SecurityConfig.h,CRYPT_E_REVOCATION_OFFLINE means certificate revocation service providers are offline; e.g. it can be caused by network outage. It is one of the least fatal errors in certificate verification. It will only be returned if there are no other errors. It is okay to ignore such an error when client machines verify server certificates; but not recommended to be ignored when server machines verify client certificates. This is the case for smart card logon deployed at MS. 
Security,LocalCertCheckingEnabled,bool,false,Static,INTERNAL,src\Common\SecurityConfig.h,Local certificate checking makes things easier for investigating certificate related failures; but in failure cases; it prevents the execution of remote certificate checking logic; which security really depends on; setting this to false enables testing of remote certificate checking. 
Security,ClientClaimAuthEnabled,bool,false,Static,PUBLIC,src\Common\SecurityConfig.h,Indicates if claim based authentication is enabled on clients; setting this true implicitly sets ClientRoleEnabled. 
Security,ClientClaims,wstring,L"",Dynamic,PUBLIC,src\Common\SecurityConfig.h,All possible claims expected from clients for connecting to gateway. This is a 'OR' list: ClaimsEntry || ClaimsEntry || ClaimsEntry ... each ClaimsEntry is a "AND" list: ClaimType=ClaimValue && ClaimType=ClaimValue && ClaimType=ClaimValue ... 
Security,AdminClientClaims,wstring,L"",Dynamic,PUBLIC,src\Common\SecurityConfig.h,All possible claims expected from admin clients; the same format as ClientClaims; this list internally gets added to ClientClaims; so no need to also add the same entries to ClientClaims. 
Security,UseTestClaimsAuthenticator,bool,false,Static,TEST,src\Common\SecurityConfig.h,Indicates that the dummy authenticator should be used. This is used by FabricTest. 
Security,ClusterSpn,wstring,L"",NotAllowed,PUBLIC,src\Common\SecurityConfig.h,Service principal name of the cluster; when fabric runs as a single domain user (gMSA/domain user account). It is the SPN of lease listeners and listeners in fabric.exe: federation listeners; internal replication listeners; runtime service listener and naming gateway listener. This should be left empty when fabric runs as machine accounts; in which case connecting side compute listener SPN from listener transport address. 
Security,ClusterIdentities,wstring,L"",Dynamic,PUBLIC,src\Common\SecurityConfig.h,Windows identities of cluster nodes; used for cluster membership authorization. It is a comma separated list; each entry is a domain account name or group name 
Security,ClientIdentities,wstring,L"",Dynamic,PUBLIC,src\Common\SecurityConfig.h,Windows identities of FabricClient; naming gateway uses this to authorize incoming connections. It is a comma separated list; each entry is a domain account name or group name. For convenience; the account that runs fabric.exe is automatically allowed; so is group WindowsFabricAllowedUsers. 
Security,AdminClientIdentities,wstring,L"",Dynamic,PUBLIC,src\Common\SecurityConfig.h,Windows identities of fabric clients in admin role; used to authorize privileged fabric operations. It is a comma separated list; each entry is a domain account name or group name. For convenience; the account that runs fabric.exe is automatically assigned admin role. 
Federation,NeighborhoodSize,int,4,NotAllowed,INTERNAL,src\Federation\FederationConfig.h,The number of nodes in the successor and predecessor direction; that a node keeps leases with. 
Federation,NodeUnknownStateDuration,TimeSpan,Common::TimeSpan::FromSeconds(30),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. When a request is sent to a node and the reply times out the node is marked as unknown; and this interval start. By the end of the interval the flag of "Unknown" is removed. 
Federation,EdgeProbeInterval,TimeSpan,Common::TimeSpan::FromSeconds(3),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval for a node to send EdgeProbe message when its neighborhood information is not complete. 
Federation,TokenProbeInterval,TimeSpan,Common::TimeSpan::FromSeconds(3),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval for a node to send TokenProbe message when it finds a token gap. 
Federation,TokenProbeIntervalUpperBound,TimeSpan,Common::TimeSpan::FromSeconds(30),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The upper bound for the interval of sending TokenProbe message. 
Federation,TokenProbeThrottleThreshold,int,2,Static,INTERNAL,src\Federation\FederationConfig.h,The number of continuous token probe allowed before throttling. 
Federation,NeighborhoodExchangeTimeout,TimeSpan,Common::TimeSpan::FromSeconds(180),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The duration node information will be included in P2P message after its last access. 
Federation,NodeInformationExpirationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(3600),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The duration node information will be kept in routing table after its last access. 
Federation,RoutingTableCompactInterval,TimeSpan,Common::TimeSpan::FromSeconds(300),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval to compact routing table to remove old entries. 
Federation,RoutingTableHealthCheckInterval,TimeSpan,Common::TimeSpan::FromSeconds(1),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval to check routing table health. 
Federation,RoutingTableCapacity,int,4096,Dynamic,INTERNAL,src\Federation\FederationConfig.h,The limit on number of nodes kept in routing table that will trigger a compact. 
Federation,MaxNodesToKeepInNeighborhood,int,128,Static,INTERNAL,src\Federation\FederationConfig.h,The max number of nodes to keep in the neighborhood; including shutdown ones. 
Federation,MaxNeighborhoodHeaders,int,64,Static,INTERNAL,src\Federation\FederationConfig.h,The max number of node information that will be included in P2P message. 
Federation,MaxGapsInCluster,int,3,NotAllowed,INTERNAL,src\Federation\FederationConfig.h,The system can only handle a fixed number of gaps; once this number is exceeded; it prevents further gaps to register; causing nodes to go down. This is desirable because the system has degraded. 
Federation,MessageTimeout,TimeSpan,Common::TimeSpan::FromSeconds(20),Static,PUBLIC,src\Federation\FederationConfig.h,Specify timespan in seconds. Timeout for federation layer messages. 
Federation,RoutingRetryTimeout,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. Default timeout for routing layer retry. 
Federation,LivenessUpdateInterval,TimeSpan,Common::TimeSpan::FromSeconds(3),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The wait interval to send LivenessUpdate message when there are pending incoming requests. 
Federation,MaxMessageSize,int,16*1024*1024,Static,PUBLIC,src\Federation\FederationConfig.h,The maximum message size for federation messages. 
Federation,UnreliableChannelEnabled,bool,false,Static,TEST,src\Federation\FederationConfig.h,Whether to enable unreliable channel. 
Federation,InMemoryTransportEnabled,bool,false,Static,TEST,src\Federation\FederationConfig.h,Whether to enable in-memory channel. 
Federation,BroadcastContextKeepDuration,TimeSpan,Common::TimeSpan::FromSeconds(300),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The duration to keep broadcast context. 
Federation,BroadcastPropagationFactor,int,8,Static,INTERNAL,src\Federation\FederationConfig.h,The number of children in the broadcast spanning tree. 
Federation,MaxMulticastSubtreeSize,int,1000,Static,INTERNAL,src\Federation\FederationConfig.h,The max number of nodes in each child of spanning tree. 
Federation,JoinLockDuration,TimeSpan,Common::TimeSpan::FromSeconds(30),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The amount of time a join lock is granted to a joining node. 
Federation,JoinStateMachineInterval,TimeSpan,Common::TimeSpan::FromSeconds(0.25),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval to run join protocol state machine. 
Federation,LockRequestTimeout,TimeSpan,Common::TimeSpan::FromSeconds(0.5),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval a node is allowed to resend lock request message. 
Federation,TokenAcquireTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The maximum time a node is allowed to acquire its first routing token after it joins the federation. 
Federation,PingInterval,TimeSpan,Common::TimeSpan::FromSeconds(15),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval to send ping messages. 
Federation,UpdateInterval,TimeSpan,Common::TimeSpan::FromSeconds(15),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval to send update messages. 
Federation,MaxUpdateTarget,int,8,Static,INTERNAL,src\Federation\FederationConfig.h,Maximum number of update messages to send each round. 
Votes,PropertyGroup,VoteConfig,None,Dynamic,PUBLIC,src\Federation\FederationConfig.h,A vote represents a single count towards a quorum of in a cluster. A vote is assigned to a vote owner(node) by a vote authority. Vote Authorities are typically nodes (seed nodes) in the cluster. A cluster needs a quorum of votes present to guarantee its health and ability to stay up.  Losing a quorum of votes will cause the cluster to go down. An alternative to seed nodes are SQL votes; where the vote authority is not a node in the Cluster; but a SQL Server instance. In this case; the node with the closest Id to the SQL vote Id acts as a proxy. The votes selected through configuration; must be the same across all nodes. ID is a string that is parsed into a long integer that represents the ID of the vote in the cluster. The Type can be one of two options: SeedNode or SqlServer; depending on the vote authority used by the cluster. Depending on the type is the format for the connection string. The connection string for SeedNode is the NodeEndpoint for the node with the same NodeID. For type=SqlServer is a connection string to a SQL Server 2008 and up. An example to a SeedNode is : '0 = SeedNode;10.0.0.1:10000'. An example to a SQL vote is: 'sqlvote1 = SqlServer;Provider=SQLNCLI10;Server=.\SQLEXPRESS;Database=master;Integrated Security=SSPI' 
Federation,GlobalTicketLeaseDuration,TimeSpan,Common::TimeSpan::FromSeconds(300),Static,PUBLIC,src\Federation\FederationConfig.h,Specify timespan in seconds. Nodes in the cluster need to maintain a global lease with the voters. Voters submit their global leases to be propagated across the cluster for this duration. If the duration expires; then the lease is lost. Loss of quorum of leases causes a node to abandon the cluster; by failing to receive communication with a quorum of nodes in this period of time.  This value needs to be adjusted based on the size of the cluster. 
Federation,BootstrapTicketLeaseDuration,TimeSpan,Common::TimeSpan::FromSeconds(100),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The lease interval for a bootstrap ticket. 
Federation,VoteOwnershipLeaseInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The lease interval for acquiring the ownership for a shared (sql) vote. 
Federation,BootstrapVoteRequestInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval to send bootstrap ticket request. 
Federation,BootstrapVoteAcquireRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(10),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The time to wait to send the next bootstrap ticket request after a failed attempt. 
Federation,BootstrapStateMachineInterval,TimeSpan,Common::TimeSpan::FromSeconds(1),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval to run the bootstrap state machine. 
Federation,GlobalTicketRenewInterval,TimeSpan,Common::TimeSpan::FromSeconds(10),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval to renew global ticket. 
Federation,BootstrapTicketAcquireLimit,TimeSpan,Common::TimeSpan::FromSeconds(10),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. Margin makes sure we don't transfer Super Tickets that are about to expire "soon". Otherwise; a super seed node may create a ring only to lose global lease soon afterwards. This is the amount of time vote owners have to join a newly formed ring and issue a new global lease. 
Federation,LeaseDuration,TimeSpan,Common::TimeSpan::FromSeconds(10),Dynamic,PUBLIC,src\Federation\FederationConfig.h,Specify timespan in seconds. Duration that a lease lasts between a node and its neighbors. 
Federation,LeaseDurationAcrossFaultDomain,TimeSpan,Common::TimeSpan::Zero,Dynamic,PUBLIC,src\Federation\FederationConfig.h,Specify timespan in seconds. Duration that a lease lasts between a node and its neighbors accross data center. 
Federation,LeaseSuspendTimeout,TimeSpan,Common::TimeSpan::FromSeconds(2),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. After a lease loss; the duration allowed for a node to continue operating before a successful arbitration. 
Federation,LeaseRetryCount,int,3,Static,INTERNAL,src\Federation\FederationConfig.h,The number of retry messages within a lease interval. 
Federation,LeaseRenewBeginRatio,int,2,Static,INTERNAL,src\Federation\FederationConfig.h,The starting point of first renew message within a lease interval; it is interpreted as 1 over LeaseRenewBeginRatio. 
Federation,ApplicationLeaseDuration,TimeSpan,Common::TimeSpan::FromSeconds(1),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The TTL granted by lease driver to leasing applications. 
Federation,ArbitrationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(30),NotAllowed,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The timeout for arbitration request. 
Federation,ArbitrationRequestDelay,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The delay between successive arbitration requests starting from the 4th request. 
Federation,ArbitrationRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(1),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The interval between arbitration retry requests. 
Federation,ArbitrationCleanupInterval,TimeSpan,Common::TimeSpan::FromSeconds(60),Static,INTERNAL,src\Federation\FederationConfig.h,Specify timespan in seconds. The amount of time arbitration records are kept by voters. 
FabricHost,ActivatorServiceAddress,wstring,L"localhost:0",Static,INTERNAL,src\Hosting2\FabricHostConfig.h,
FabricHost,ActivatorServerId,wstring,L"",Static,INTERNAL,src\Hosting2\FabricHostConfig.h,
FabricHost,ActivatorUseUnreliableTransport,bool,false,Static,INTERNAL,src\Hosting2\FabricHostConfig.h,
FabricHost,HostedServiceContinuousExitFailureResetInterval,TimeSpan,Common::TimeSpan::FromSeconds(300),Dynamic,INTERNAL,src\Hosting2\FabricHostConfig.h,Specify timespan in seconds. 
FabricHost,StopTimeout,TimeSpan,Common::TimeSpan::FromSeconds(300),Dynamic,PUBLIC,src\Hosting2\FabricHostConfig.h,Specify timespan in seconds. The timeout for hosted service activation; deactivation and upgrade. 
FabricHost,StartTimeout,TimeSpan,Common::TimeSpan::FromSeconds(300),Dynamic,PUBLIC,src\Hosting2\FabricHostConfig.h,Specify timespan in seconds. Timeout for fabricactivationmanager startup 
FabricHost,ActivationRetryBackoffInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Dynamic,PUBLIC,src\Hosting2\FabricHostConfig.h,Specify timespan in seconds. Backoff interval on every activation failure;On every continuous activation failure the system will retry the activation for up to the MaxActivationFailureCount. The retry interval on every try is a product of continuous activation failure and the activation back-off interval. 
FabricHost,ActivationMaxRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(300),Dynamic,PUBLIC,src\Hosting2\FabricHostConfig.h,Specify timespan in seconds. Max retry interval for Activation. On every continuous failure the retry interval is calculated as Min( ActivationMaxRetryInterval; Continuous Failure Count * ActivationRetryBackoffInterval) 
FabricHost,ActivationMaxFailureCount,int,10,Dynamic,PUBLIC,src\Hosting2\FabricHostConfig.h,This is the maximum count for which system will retry failed activation before giving up. 
FabricHost,Test_IgnoreHostedServices,bool,false,Static,INTERNAL,src\Hosting2\FabricHostConfig.h,
Hosting,CreateFabricRuntimeTimeout,TimeSpan,Common::TimeSpan::FromSeconds(120),Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Specify timespan in seconds. The timeout value for the sync FabricCreateRuntime call 
Hosting,ServiceFactoryRegistrationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(120),Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Specify timespan in seconds. The timeout value for the sync Register(Stateless/Stateful)ServiceFactory call 
Hosting,RegisterCodePackageHostTimeout,TimeSpan,Common::TimeSpan::FromSeconds(120),Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Specify timespan in seconds. The timeout value for the FabricRegisterCodePackageHost sync call. This is applicable for only multi code package application hosts like FWP 
Hosting,GetCodePackageActivationContextTimeout,TimeSpan,Common::TimeSpan::FromSeconds(120),Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Specify timespan in seconds. The timeout value for the CodePackageActivationContext calls . This is not applicable to ad-hoc services. 
Hosting,ApplicationHostCloseTimeout,TimeSpan,Common::TimeSpan::FromSeconds(120),Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Specify timespan in seconds. When Fabric exit is detected in a self activated processes; FabricRuntime closes all of the replicas in the user's host (applicationhost) process. This is the timeout for the that close operation. 
Hosting,RequestTimeout,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Specify timespan in seconds. This represents the timeout for communication between the user's application host and Fabric process for various hosting related operations such as factory registration; runtime registration. 
Hosting,UnreliableChannelForIPCEnabled,bool,false,Static,TEST,src\Hosting2\HostingConfig.h,Whether the transport communication over IPC should use unreliable transport 
Hosting,DeploymentRetryBackoffInterval,TimeSpan,Common::TimeSpan::FromSeconds(10),Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Specify timespan in seconds. Back-off interval for the deployment failure. On every continuous deployment failure the system will retry the deployment for up to the MaxDeploymentFailureCount. The retry interval is a product of continuous deployment failure and the deployment backoff interval. 
Hosting,DeploymentMaxRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(3600),Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Specify timespan in seconds. Max retry interval for the deployment. On every continuous failure the retry interval is calculated as Min( DeploymentMaxRetryInterval; Continuous Failure Count * DeploymentRetryBackoffInterval) 
Hosting,DeploymentMaxFailureCount,int,20,Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Application deployment will be retried for DeploymentMaxFailureCount times before failing the deployment of that application on the node. 
Hosting,ActivationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(180),Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Specify timespan in seconds. The timeout for application activation; deactivation and upgrade. 
Hosting,ActivationRetryBackoffInterval,TimeSpan,Common::TimeSpan::FromSeconds(10),Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Specify timespan in seconds. Backoff interval on every activation failure;On every continuous activation failure the system will retry the activation for up to the MaxActivationFailureCount. The retry interval on every try is a product of continuous activation failure and the activation back-off interval. 
Hosting,ActivationMaxRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(3600),Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Specify timespan in seconds. Max retry interval for Activation. On every continuous failure the retry interval is calculated as Min( ActivationMaxRetryInterval; Continuous Failure Count * ActivationRetryBackoffInterval) 
Hosting,ActivationMaxFailureCount,int,20,Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,This is the maximum count for which system will retry failed activation before giving up. 
Hosting,EnableActivateNoWindow,bool,false,Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,The activated process is created in the background without any console. 
Hosting,ActivatedProcessDieOnUnhandledExceptionEnabled,bool,true,Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,If false the activated process will honor the JIT debugging policies of the machine; otherwise the activated process will simply die and restarted as per the retry intervals 
Hosting,RunAsPolicyEnabled,bool,false,Static,PUBLIC,src\Hosting2\HostingConfig.h,Enables running code packages as local user other than the user under which fabric process is running. In order to enable this policy Fabric must be running as SYSTEM or as user who has SeAssignPrimaryTokenPrivilege. 
Hosting,NTLMAuthenticationEnabled,bool,false/*If the default is changed from false to true please update the validator in FabricDeployer*/,Static,PUBLIC,src\Hosting2\HostingConfig.h,Enables support for using NTLM by the code packages that are running as other users so that the processes across machines can communicate securely. 
Hosting,NTLMAuthenticationPasswordSecret,SecureString,L"",Static,PUBLIC,src\Hosting2\HostingConfig.h,Is an encrypted has that is used to generate the password for NTLM users. Has to be set if NTLMAuthenticationEnabled is true. Validated by the deployer. 
Hosting,EndpointProviderEnabled,bool,false,Static,PUBLIC,src\Hosting2\HostingConfig.h,Enables management of Endpoint resources by Fabric. Requires specification of start and end application port range in FabricNode. 
Hosting,ServiceTypeRegistrationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(600),Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Specify timespan in seconds. The timeout for the ServiceType to register with fabric 
Hosting,CodePackageContinuousExitFailureResetInterval,TimeSpan,Common::TimeSpan::FromSeconds(300),Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. The timeout to reset the continuous exit failure count for code package 
Hosting,CodePackageHealthWarningThreshold,uint,1,Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,The CodePackage failure count after which warning is reported 
Hosting,CodePackageHealthErrorThreshold,uint,3,Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,The CodePackage failure count after which error is reported 
Hosting,InteractiveRunAsEnabled,bool,false,Static,TEST,src\Hosting2\HostingConfig.h,
Hosting,DeactivationScanInterval,TimeSpan,Common::TimeSpan::FromSeconds(600),Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. Interval in secs - the scan for deactivation is performed 
Hosting,DeactivationGraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. Grace interval after which the process can be marked for deactivation 
Hosting,ServiceTypeDisableGraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,Specify timespan in seconds. Time interval after which the service type can be disabled 
Hosting,ServiceTypeDisableFailureThreshold,int,1,Dynamic,PUBLIC,src\Hosting2\HostingConfig.h,When an activation or deployment is failed on a node; the system can try a different node to increase the availability. However many errors are recoverable and the failures can be resolved using simple retry. This knob controls the threshold for the failure count after which FM is notified to disable the service type on that node and try a different node for placement. 
Hosting,DisabledServiceTypeRecoveryInterval,TimeSpan,Common::TimeSpan::MaxValue,Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. Recovers a disabled service type for adhoc applications after the specified time interval 
Hosting,CacheCleanupScanInterval,TimeSpan,Common::TimeSpan::FromSeconds(3600),Static,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. -------------- Cache Cleanup settings Time interval for cleaning up unused content in ApplicationInstance; ImageCache and Shared folders 
Hosting,CacheCleanupBackoffInternval,TimeSpan,Common::TimeSpan::FromSeconds(10),Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. Backoff internval on failure during Cache Cleanup 
Hosting,CacheCleanupMaxContinuousFailures,uint,3,Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Maximum number of continous failures before giving up on CacheCleanup 
Hosting,AzureLogCollectorConfigurationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. log collector settings 
Hosting,CrashDumpConfigurationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. crash dump configuration settings 
Hosting,DllHostExePath,wstring,L"FWP.exe",Static,INTERNAL,src\Hosting2\HostingConfig.h,dllhost settings 
Hosting,FabricUpgradeTimeout,TimeSpan,Common::TimeSpan::FromSeconds(1800),Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. 
Hosting,FabricTypeHostPath,wstring,L"FabricTypeHost.exe",Static,TEST,src\Hosting2\HostingConfig.h,
Hosting,ApplicationEtwTraceFileSizeInMB,int,128,Static,INTERNAL,src\Hosting2\HostingConfig.h,Max file size for application ETW traces 
Hosting,ApplicationEtwTraceLevel,int,4,Static,INTERNAL,src\Hosting2\HostingConfig.h,Verbosity for application ETW traces. Default is 4 (info). 
Hosting,DcaNotificationIntervalInSeconds,TimeSpan,Common::TimeSpan::FromSeconds(180),Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. Interval at which we notify the DCA about active service packages 
Hosting,FabricHostCommunicationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(300),Dynamic,INTERNAL,src\Hosting2\HostingConfig.h,Specify timespan in seconds. Fabric to FabricHost communication settings 
RunAs,RunAsAccountName,wstring,L"",NotAllowed,PUBLIC,src\Hosting2\RunAsConfig.h,Indicates the RunAs account name. This is only needed for "DomainUser" or "ManagedServiceAccount" account type. Valid values are "domain\user" or "user@domain" 
RunAs,RunAsAccountType,wstring,L"DomainUser",NotAllowed,PUBLIC,src\Hosting2\RunAsConfig.h,Indicates the RunAs account type. This is needed for any RunAs section Valid values are "LocalUser/DomainUser/NetworkService/ManagedServiceAccount/LocalSystem" 
RunAs,RunAsAccountPassword,wstring,L"",NotAllowed,PUBLIC,src\Hosting2\RunAsConfig.h,Indicates the RunAs account password. This is only needed for "DomainUser" account type. 
RunAs_Fabric,RunAsAccountName,wstring,L"",NotAllowed,PUBLIC,src\Hosting2\RunAsConfig.h,Indicates the RunAs account name. This is only needed for "DomainUser" or "ManagedServiceAccount" account type. Valid values are "domain\user" or "user@domain" 
RunAs_Fabric,RunAsAccountType,wstring,L"DomainUser",NotAllowed,PUBLIC,src\Hosting2\RunAsConfig.h,Indicates the RunAs account type. This is needed for any RunAs section Valid values are "LocalUser/DomainUser/NetworkService/ManagedServiceAccount/LocalSystem" 
RunAs_Fabric,RunAsAccountPassword,wstring,L"",NotAllowed,PUBLIC,src\Hosting2\RunAsConfig.h,Indicates the RunAs account password. This is only needed for "DomainUser" account type. 
RunAs_HttpGateway,RunAsAccountName,wstring,L"",NotAllowed,PUBLIC,src\Hosting2\RunAsConfig.h,Indicates the RunAs account name. This is only needed for "DomainUser" or "ManagedServiceAccount" account type. Valid values are "domain\user" or "user@domain" 
RunAs_HttpGateway,RunAsAccountType,wstring,L"DomainUser",NotAllowed,PUBLIC,src\Hosting2\RunAsConfig.h,Indicates the RunAs account type. This is needed for any RunAs section Valid values are "LocalUser/DomainUser/NetworkService/ManagedServiceAccount/LocalSystem" 
RunAs_HttpGateway,RunAsAccountPassword,wstring,L"",NotAllowed,PUBLIC,src\Hosting2\RunAsConfig.h,Indicates the RunAs account password. This is only needed for "DomainUser" account type. 
RunAs_DCA,RunAsAccountName,wstring,L"",NotAllowed,PUBLIC,src\Hosting2\RunAsConfig.h,Indicates the RunAs account name. This is only needed for "DomainUser" or "ManagedServiceAccount" account type. Valid values are "domain\user" or "user@domain" 
RunAs_DCA,RunAsAccountType,wstring,L"DomainUser",NotAllowed,PUBLIC,src\Hosting2\RunAsConfig.h,Indicates the RunAs account type. This is needed for any RunAs section Valid values are "LocalUser/DomainUser/NetworkService/ManagedServiceAccount/LocalSystem" 
RunAs_DCA,RunAsAccountPassword,wstring,L"",NotAllowed,PUBLIC,src\Hosting2\RunAsConfig.h,Indicates the RunAs account password. This is only needed for "DomainUser" account type. 
HttpGateway,ActiveListeners,uint,2,Static,PUBLIC,src\httpgateway\HttpGatewayConfig.h, Number of reads to post to the http server queue. This controls the number of concurrent requests that can be satisfied by the HttpGateway.  
HttpGateway,VersionCheck,bool,true,Static,INTERNAL,src\httpgateway\HttpGatewayConfig.h, Controls if API version checking is enforced or not.  
HttpGateway,MaxEntityBodySize,uint,8192,Dynamic,PUBLIC,src\httpgateway\HttpGatewayConfig.h, Gives the maximum size of the body that can be expected from a http request. Httpgateway will fail the request if it has a body of size > this value. Minimum read chunk size is 2048 bytes. So this has to be >= 2048.  
Lease,DebugLeaseDriverEnabled,bool,false,Static,TEST,src\LeaseAgent\LeaseConfig.h,
Management,ImageStoreConnectionString,SecureString,L"",Static,PUBLIC,src\Management\Common\ManagementConfig.h,Connection string to the Root for ImageStore 
Management,ImageStoreMinimumTransferBPS,int,1024,Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,The minimum transfer rate between the cluster and ImageStore. This value is used to determine the timeout when accessing the external ImageStore. Change this value only if the latency between the cluster and ImageStore is high to allow more time for the cluster to download from the external ImageStore. 
Management,AzureStorageOperationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(600),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. Timeout for xstore operation to complete 
Management,ImageCachingEnabled,bool,true,Static,PUBLIC,src\Management\Common\ManagementConfig.h,This configuration allows us to enable or disable caching. 
Management,DisableChecksumValidation,bool,false,Static,PUBLIC,src\Management\Common\ManagementConfig.h,This configuration allows us to enable or disable checksum validation during application provisioning. 
Management,ImageCacheDirectory,wstring,L"ImageCache",Static,INTERNAL,src\Management\Common\ManagementConfig.h,Folder name for the ImageCache for a node. 
Management,DeploymentDirectory,wstring,L"Applications",Static,INTERNAL,src\Management\Common\ManagementConfig.h,Folder name for the application deployment folder. This is relative to the work folder for the node. 
Management,FabricUpgradeDeploymentDirectory,wstring,L"FabricUpgrade",Static,INTERNAL,src\Management\Common\ManagementConfig.h,Folder name for the fabric upgrade folder. This is relative to the work folder for the node. 
ClusterManager,InfrastructureTaskProcessingInterval,TimeSpan,Common::TimeSpan::FromSeconds(10),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The processing interval used by the infrastructure task processing state machine 
ClusterManager,TargetReplicaSetSize,int,7,NotAllowed,PUBLIC,src\Management\Common\ManagementConfig.h,The TargetReplicaSetSize for ClusterManager 
ClusterManager,MinReplicaSetSize,int,3,NotAllowed,PUBLIC,src\Management\Common\ManagementConfig.h,The MinReplicaSetSize for ClusterManager 
ClusterManager,ReplicaRestartWaitDuration,TimeSpan,Common::TimeSpan::FromSeconds(60.0 * 30),NotAllowed,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The ReplicaRestartWaitDuration for ClusterManager 
ClusterManager,QuorumLossWaitDuration,TimeSpan,Common::TimeSpan::MaxValue,NotAllowed,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The QuorumLossWaitDuration for ClusterManager 
ClusterManager,StandByReplicaKeepDuration,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 24 * 7),NotAllowed,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The StandByReplicaKeepDuration for ClusterManager 
ClusterManager,PlacementConstraints,wstring,L"",NotAllowed,PUBLIC,src\Management\Common\ManagementConfig.h,The PlacementConstraints for ClusterManager 
ClusterManager,UpgradeStatusPollInterval,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The frequency of polling for application upgrade status. This value determines the rate of update for any GetApplicationUpgradeProgress call 
ClusterManager,FabricUpgradeStatusPollInterval,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The frequency of polling for Fabric upgrade status. This value determines the rate of update for any GetFabricUpgradeProgress call 
ClusterManager,UpgradeHealthCheckInterval,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The frequency of checking health status for monitored application upgrades 
ClusterManager,FabricUpgradeHealthCheckInterval,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The frequency of checking health status for monitored Fabric upgrades 
ClusterManager,InfrastructureTaskHealthCheckWaitDuration,TimeSpan,Common::TimeSpan::FromSeconds(0),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The amount of time to wait before starting health checks after post-processing an infrastructure task 
ClusterManager,InfrastructureTaskHealthCheckStableDuration,TimeSpan,Common::TimeSpan::FromSeconds(0),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The amount of time to observe consecutive passed health checks before post-processing of an infrastructure task finishes sucessfully. Observing a failed health check will reset this timer. 
ClusterManager,InfrastructureTaskHealthCheckRetryTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The amount of time to spend retrying failed health checks while post-processing an infrastructure task. Observing a passed health check will reset this timer. 
ClusterManager,ImageBuilderTimeoutBuffer,TimeSpan,Common::TimeSpan::FromSeconds(3),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The amount of time to allow for Image Builder specific timeout errors to return to the client. If this buffer is too small; then the client times out before the server and gets a generic timeout error. 
ClusterManager,MinOperationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The minimum global timeout for internally processing operations on ClusterManager 
ClusterManager,MaxOperationTimeout,TimeSpan,Common::TimeSpan::MaxValue,Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The maximum global timeout for internally processing operations on ClusterManager. 
ClusterManager,MaxCommunicationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The maximum timeout for internal communications between ClusterManager and other system services (i.e.; Naming Service; Failover Manager and etc). This timeout should be smaller than global MaxOperationTimeout (as there might be multiple communications between system components for each client operation) 
ClusterManager,MaxDataMigrationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(600),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The maximum timeout for data migration recovery operations after a Fabric upgrade has taken place 
ClusterManager,MaxOperationRetryDelay,TimeSpan,Common::TimeSpan::FromSeconds(5),Dynamic,PUBLIC,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The maximum delay for internal retries when failures are encountered 
ClusterManager,MaxApplicationTypeNameLength,int,256,Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,Maximum application type name string allowed when provisioning (depends on the underlying local store) 
ClusterManager,MaxApplicationTypeVersionLength,int,256,Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,Maximum application type version string allowed when provisioning (depends on the underlying local store) 
ClusterManager,MaxServiceTypeNameLength,int,256,Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,Maximum service type name string allowed when provisioning (depends on the underlying local store) 
ClusterManager,ImageStoreErrorDuringUpgradeRetryCount,int,100,Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,Retry count if the ImageStore becomes unavailable during application or Fabric upgrade. The retry interval is MaxOperationRetryDelay. 
Management,MonitoringAgentStorageAccount,SecureString,L"",Static,INTERNAL,src\Management\Common\ManagementConfig.h,Azure Only: The Azure blob storage account (connection string) for uploading application log collection 
Management,MonitoringAgentDirectoryQuota,int,1024,Static,INTERNAL,src\Management\Common\ManagementConfig.h,Azure Only: The maximum quota for local directory used for buffering the logs. 
Management,MonitoringAgentTransferInterval,TimeSpan,Common::TimeSpan::FromMinutes(10),Static,INTERNAL,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. Azure Only: The transfer interval for application logs to Azure blob storage 
HealthManager,HealthStoreCleanupInterval,TimeSpan,Common::TimeSpan::FromSeconds(60),Static,INTERNAL,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The period at which the clean up of expired entries is executed. 
HealthManager,HealthStoreCleanupGraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(30*60),Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The minimum time an entity is kept in the store after is marked for deletion. 
HealthManager,HealthStoreEntityWithoutSystemReportKeptInterval,TimeSpan,Common::TimeSpan::FromSeconds(60*60),Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The time an entity can be kept without a corresponding system report. 
HealthManager,HealthProcessingQueueThreadCount,int,10,Static,INTERNAL,src\Management\Common\ManagementConfig.h,The maximum number of threads that can be used to process entity events 
HealthManager,HealthStoreReadRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(1.0),Static,INTERNAL,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. The delay before retrying store operations 
HealthManager,MaxPendingHealthReportCount,int,8192,Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,The maximum number of reports that can be accepted for processing 
HealthManager,MaxPendingHealthQueryCount,int,8192,Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,The maximum number of queries that can be accepted for processing 
HealthManager,MaxMessageSize,int,16*1024*1024,Static,INTERNAL,src\Management\Common\ManagementConfig.h,The maximum message size for health related messages. DOS attack alleviation 
HealthManager,MessageContentBufferRatio,double,0.75,Dynamic,INTERNAL,src\Management\Common\ManagementConfig.h,The fraction of MaxMessageSize to use as the available buffer limit when calculating how much data to put in a single message (should be in the range [0.0; 1.0]) 
HealthManager/Store,HealthStoreCommitBatchingPeriod,int,50,Static,INTERNAL,src\Management\Common\ManagementConfig.h,The period of time when generated simple transactions are batched. To disable batching; pass 0. 
HealthManager/Store,HealthStoreCommitBatchingSizeLimitInKB,int,256,Static,INTERNAL,src\Management\Common\ManagementConfig.h,The limit for simple transaction batch. When batched replications size reach this limit; the store will start a new group for new simple transaction. 
HealthManager/Store,HealthStoreTransactionLowWatermark,int,100,Static,INTERNAL,src\Management\Common\ManagementConfig.h,When the number of pending completion transaction is less or equal the low watermark; new simple transactions will not be batched. -1 to disable. 
HealthManager/Store,HealthStoreTransactionHighWatermark,int,-1,Static,INTERNAL,src\Management\Common\ManagementConfig.h,When the number of pending completion transaction is greater or equal the high watermark; batching period will be extended every time the period elapses. -1 to disable. 
HealthManager/Store,HealthStoreCommitBatchingPeriodExtension,int,0,Static,INTERNAL,src\Management\Common\ManagementConfig.h,The batch period extension. When batching period needs to be extended; it will be extended this much every time.  0 means extending CommitBatchingPeriod. 
HealthManager/Store,HealthStoreThrottleOperationCount,int64,7500,Static,INTERNAL,src\Management\Common\ManagementConfig.h,The store will throttle operations once the number of operations in the replication queue reaches this value 
HealthManager/Store,HealthStoreThrottleQueueSizeBytes,int64,270*1024*1024,Static,INTERNAL,src\Management\Common\ManagementConfig.h,The store will throttle operations once the memory utilization (bytes) of the replication queue reaches this value 
HealthManager/Store,HealthStoreTransactionThrottle,int,4096,Static,INTERNAL,src\Management\Common\ManagementConfig.h,DEPRECATED - Not being consumed by the code and present just for upgrade compatibility 
HealthManager/ClusterHealthPolicy,ConsiderWarningAsError,bool,false,Static,PUBLIC,src\Management\Common\ManagementConfig.h,Cluster health evaluation policy: warnings are treated as errors 
HealthManager/ClusterHealthPolicy,MaxPercentUnhealthyNodes,int,0,Static,PUBLIC,src\Management\Common\ManagementConfig.h,Cluster health evaluation policy: maximum percent of unhealthy nodes allowed for the cluster to be healthy 
HealthManager/ClusterHealthPolicy,MaxPercentUnhealthyApplications,int,0,Static,PUBLIC,src\Management\Common\ManagementConfig.h,Cluster health evaluation policy: maximum percent of unhealthy applications allowed for the cluster to be healthy 
ClusterManager/Replication,InitialReplicationQueueSize,uint,64,Static,INTERNAL,src\Management\Common\ManagementConfig.h,The Windows Fabric Replicator which is a secondary contains internal queues which contain replication operations which have been delivered to the secondary but not distributed to the service.This value defines the initial size for the queue which maintains replication operations.  Note that it must be a power of 2.
ClusterManager/Replication,MaxReplicationQueueSize,uint,8192,Static,INTERNAL,src\Management\Common\ManagementConfig.h,This is the maximum number of operations that could exist in the replication queue. Note that it must be a power of 2.  If during runtime the queue grows to this size operations will be throttled between the primary and secondary replicators.
ClusterManager/Replication,MaxReplicationQueueMemorySize,uint,314572800,Static,INTERNAL,src\Management\Common\ManagementConfig.h,This is the maximum value of the replication queue in bytes. If during runtime the queue grows to this size operations will be throttled between the primary and secondary replicators.
ClusterManager/Replication,InitialCopyQueueSize,uint,64,Static,INTERNAL,src\Management\Common\ManagementConfig.h,This value defines the initial size for the queue which maintains copy operations.  Note that it must be a power of 2.
ClusterManager/Replication,MaxCopyQueueSize,uint,1024,Static,INTERNAL,src\Management\Common\ManagementConfig.h,This is the maximum value defines the initial size for the queue which maintains replication operations.  Note that it must be a power of 2.  If during runtime the queue grows to this size operations will be throttled between the primary and secondary replicators.
ClusterManager/Replication,BatchAcknowledgementInterval,TimeSpan,Common::TimeSpan::FromMilliseconds(50),Static,INTERNAL,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. Determines the amount of time that the replicator waits after receiving an operation before sending back an acknowledgement. Other operations received during this time period will have their acknowledgements sent back in a single message-> reducing network traffic but potentially reducing the throughput of the replicator.
ClusterManager/Replication,MaxPendingAcknowledgements,uint,0,Static,INTERNAL,src\Management\Common\ManagementConfig.h,Maximum number of outstanding operation acknowledgements.  Together with the BatchAckInterval controls replicator operation throttling.
ClusterManager/Replication,MaxReplicationMessageSize,uint,52428800,Static,INTERNAL,src\Management\Common\ManagementConfig.h,Maximum message size of replication operations. Default is 50MB.
ClusterManager/Replication,RequireServiceAck,bool,false,Static,INTERNAL,src\Management\Common\ManagementConfig.h,Bool which controls whether the Windows Fabric Replicator will optimistically acknowledge operations on behalf of services. Setting this to false allows the replicator to optimistically acknowledge operations on behalf of the service. While true tells the replicator to require service ack via the Operation.Ack() API before the acknowledgement can be sent back to the primary service. Note that this flag is not respected for persistent services which always require services to acknowledge operations.
ClusterManager/Replication,ReplicatorAddress,wstring,L"localhost:0",Static,INTERNAL,src\Management\Common\ManagementConfig.h,The endpoint in form of a string -'IP:Port' which is used by the Windows Fabric Replicator to establish connections with other replicas in order to send/receive operations
ClusterManager/Replication,SecondaryClearAcknowledgedOperations,bool,false,Static,INTERNAL,src\Management\Common\ManagementConfig.h,Bool which controls if the operations on the secondary replicator are cleared once they are ACK'd by the state provider. Setting this to true may result in additional copy operations during the build of an idle replica
ClusterManager/Replication,UseStreamFaultsAndEndOfStreamOperationAck,bool,true,Static,INTERNAL,src\Management\Common\ManagementConfig.h,Bool which indicates to Windows Fabric Replicator if the state provider intends to use the OperationStream2 interface. If this is enabled the state provider must report fault on the OperationStream2 interface if it cannot apply any more operations that are pumped from the stream.The Windows Fabric Replicator will also dispatch an End of Stream operation in the secondary copy and replication streams.
ClusterManager/Replication,RetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. When an operation is lost or rejected this timer determines how often the replicator will retry sending the operation.
ClusterManager/Replication,CompleteReplicateThreadCount,uint,0,Static,INTERNAL,src\Management\Common\ManagementConfig.h,The maximum number of parallel threads that can be used by the Windows Fabric Replicator to quorum complete Replication operations on the primary
ClusterManager/Replication,AllowMultipleQuorumSet,bool,true,Static,INTERNAL,src\Management\Common\ManagementConfig.h,Bool which controls whether the Windows Fabric Replicator considers replicas in the previous and current configuration to compute quorum during reconfigurations. Setting this to false could result in higher chances of dataloss during failures
ClusterManager/Replication,TraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(120),Static,INTERNAL,src\Management\Common\ManagementConfig.h,Specify timespan in seconds. Determines the tracing interval of the replicator's progress (if there was any progress from the previous trace).
ClusterManager/Replication,UnreliableChannelEnabled,bool,false,Static,TEST,src\Management\Common\ManagementConfig.h,Enables the unreliable channel for replication operations for internal testing.
FileStoreService,NamingOperationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60.0),Dynamic,PUBLIC,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. The timeout for performing naming operation 
FileStoreService,QueryOperationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60.0),Dynamic,PUBLIC,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. The timeout for performing query operation 
FileStoreService,MaxCopyOperationThreads,uint,10,Dynamic,PUBLIC,src\Management\FileStoreService\FileStoreServiceConfig.h,The maximim number of parallel threads allowed during copy operation on secondary. '0' == number of cores 
FileStoreService,StoreTransactionRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(3.0),Dynamic,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. The backoff interval for StoreTransaction failures 
FileStoreService,StoreTransactionMaxRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(30.0),Dynamic,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. The max backoff interval for StoreTransaction failures 
FileStoreService,RecoveryRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5.0),Dynamic,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. The backoff interval for Recovery failure 
FileStoreService,GetStagingLocationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60.0),Dynamic,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. Timeout for getting the primary staging location on client 
FileStoreService,InternalServiceCallTimeout,TimeSpan,Common::TimeSpan::FromSeconds(90.0),Dynamic,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. Timeout for getting the primary staging location on client 
FileStoreService,ClientRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5.0),Dynamic,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. The backoff interval for client-side retries 
FileStoreService,MaxFileOperationFailureRetryCount,uint,3,Dynamic,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,The max retry count on file operation failure 
FileStoreService/Replication,InitialReplicationQueueSize,uint,64,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,The Windows Fabric Replicator which is a secondary contains internal queues which contain replication operations which have been delivered to the secondary but not distributed to the service.This value defines the initial size for the queue which maintains replication operations.  Note that it must be a power of 2.
FileStoreService/Replication,MaxReplicationQueueSize,uint,8192,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,This is the maximum number of operations that could exist in the replication queue. Note that it must be a power of 2.  If during runtime the queue grows to this size operations will be throttled between the primary and secondary replicators.
FileStoreService/Replication,MaxReplicationQueueMemorySize,uint,314572800,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,This is the maximum value of the replication queue in bytes. If during runtime the queue grows to this size operations will be throttled between the primary and secondary replicators.
FileStoreService/Replication,InitialCopyQueueSize,uint,64,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,This value defines the initial size for the queue which maintains copy operations.  Note that it must be a power of 2.
FileStoreService/Replication,MaxCopyQueueSize,uint,1024,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,This is the maximum value defines the initial size for the queue which maintains replication operations.  Note that it must be a power of 2.  If during runtime the queue grows to this size operations will be throttled between the primary and secondary replicators.
FileStoreService/Replication,BatchAcknowledgementInterval,TimeSpan,Common::TimeSpan::FromMilliseconds(0),Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. Determines the amount of time that the replicator waits after receiving an operation before sending back an acknowledgement. Other operations received during this time period will have their acknowledgements sent back in a single message-> reducing network traffic but potentially reducing the throughput of the replicator.
FileStoreService/Replication,MaxPendingAcknowledgements,uint,0,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Maximum number of outstanding operation acknowledgements.  Together with the BatchAckInterval controls replicator operation throttling.
FileStoreService/Replication,MaxReplicationMessageSize,uint,52428800,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Maximum message size of replication operations. Default is 50MB.
FileStoreService/Replication,RequireServiceAck,bool,false,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Bool which controls whether the Windows Fabric Replicator will optimistically acknowledge operations on behalf of services. Setting this to false allows the replicator to optimistically acknowledge operations on behalf of the service. While true tells the replicator to require service ack via the Operation.Ack() API before the acknowledgement can be sent back to the primary service. Note that this flag is not respected for persistent services which always require services to acknowledge operations.
FileStoreService/Replication,ReplicatorAddress,wstring,L"localhost:0",Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,The endpoint in form of a string -'IP:Port' which is used by the Windows Fabric Replicator to establish connections with other replicas in order to send/receive operations
FileStoreService/Replication,SecondaryClearAcknowledgedOperations,bool,false,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Bool which controls if the operations on the secondary replicator are cleared once they are ACK'd by the state provider. Setting this to true may result in additional copy operations during the build of an idle replica
FileStoreService/Replication,UseStreamFaultsAndEndOfStreamOperationAck,bool,true,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Bool which indicates to Windows Fabric Replicator if the state provider intends to use the OperationStream2 interface. If this is enabled the state provider must report fault on the OperationStream2 interface if it cannot apply any more operations that are pumped from the stream.The Windows Fabric Replicator will also dispatch an End of Stream operation in the secondary copy and replication streams.
FileStoreService/Replication,RetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. When an operation is lost or rejected this timer determines how often the replicator will retry sending the operation.
FileStoreService/Replication,CompleteReplicateThreadCount,uint,0,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,The maximum number of parallel threads that can be used by the Windows Fabric Replicator to quorum complete Replication operations on the primary
FileStoreService/Replication,AllowMultipleQuorumSet,bool,true,Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Bool which controls whether the Windows Fabric Replicator considers replicas in the previous and current configuration to compute quorum during reconfigurations. Setting this to false could result in higher chances of dataloss during failures
FileStoreService/Replication,TraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(120),Static,INTERNAL,src\Management\FileStoreService\FileStoreServiceConfig.h,Specify timespan in seconds. Determines the tracing interval of the replicator's progress (if there was any progress from the previous trace).
FileStoreService/Replication,UnreliableChannelEnabled,bool,false,Static,TEST,src\Management\FileStoreService\FileStoreServiceConfig.h,Enables the unreliable channel for replication operations for internal testing.
ImageStoreService,TargetReplicaSetSize,int,7,NotAllowed,PUBLIC,src\Management\ImageStore\ImageStoreServiceConfig.h,The TargetReplicaSetSize for ImageStoreService 
ImageStoreService,MinReplicaSetSize,int,3,NotAllowed,PUBLIC,src\Management\ImageStore\ImageStoreServiceConfig.h,The MinReplicaSetSize for ImageStoreService 
ImageStoreService,ReplicaRestartWaitDuration,TimeSpan,Common::TimeSpan::FromSeconds(60.0 * 30),NotAllowed,PUBLIC,src\Management\ImageStore\ImageStoreServiceConfig.h,Specify timespan in seconds. The ReplicaRestartWaitDuration for ImageStoreService 
ImageStoreService,QuorumLossWaitDuration,TimeSpan,Common::TimeSpan::MaxValue,NotAllowed,PUBLIC,src\Management\ImageStore\ImageStoreServiceConfig.h,Specify timespan in seconds. The QuorumLossWaitDuration for ImageStoreService 
ImageStoreService,StandByReplicaKeepDuration,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 24 * 7),NotAllowed,PUBLIC,src\Management\ImageStore\ImageStoreServiceConfig.h,Specify timespan in seconds. The StandByReplicaKeepDuration for ImageStoreService 
ImageStoreService,PlacementConstraints,wstring,L"",NotAllowed,PUBLIC,src\Management\ImageStore\ImageStoreServiceConfig.h,The PlacementConstraints for ImageStoreService 
ImageStoreClient,ClientUploadTimeout,TimeSpan,Common::TimeSpan::FromSeconds(600),Dynamic,PUBLIC,src\Management\ImageStore\ImageStoreServiceConfig.h,Specify timespan in seconds. Timeout value for top-level upload request to Image Store Service 
ImageStoreClient,ClientDownloadTimeout,TimeSpan,Common::TimeSpan::FromSeconds(600),Dynamic,PUBLIC,src\Management\ImageStore\ImageStoreServiceConfig.h,Specify timespan in seconds. Timeout value for top-level download request to Image Store Service 
ImageStoreClient,ClientDefaultTimeout,TimeSpan,Common::TimeSpan::FromSeconds(120),Dynamic,PUBLIC,src\Management\ImageStore\ImageStoreServiceConfig.h,Specify timespan in seconds. Timeout value for all non-upload/non-download requests (e.g. exists; delete) to Image Store Service 
ImageStoreService,EnableClusterManagerAffinity,bool,true,NotAllowed,INTERNAL,src\Management\ImageStore\ImageStoreServiceConfig.h,Enable/Disable affinity of ImageStoreService to CM 
RepairManager,TargetReplicaSetSize,int,0,NotAllowed,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,The TargetReplicaSetSize for RepairManager 
RepairManager,MinReplicaSetSize,int,0,NotAllowed,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,The MinReplicaSetSize for RepairManager 
RepairManager,ReplicaRestartWaitDuration,TimeSpan,Common::TimeSpan::FromSeconds(60.0 * 60),NotAllowed,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. The ReplicaRestartWaitDuration for RepairManager 
RepairManager,QuorumLossWaitDuration,TimeSpan,Common::TimeSpan::MaxValue,NotAllowed,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. The QuorumLossWaitDuration for RepairManager 
RepairManager,StandByReplicaKeepDuration,TimeSpan,Common::TimeSpan::FromSeconds(60.0 * 60 * 24 * 7),NotAllowed,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. The StandByReplicaKeepDuration for RepairManager 
RepairManager,PlacementConstraints,wstring,L"",NotAllowed,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,The PlacementConstraints for RepairManager 
RepairManager,MaxOperationRetryDelay,TimeSpan,Common::TimeSpan::FromSeconds(5),Dynamic,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. The maximum delay for internal retries when failures are encountered 
RepairManager,MaxCommunicationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Dynamic,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. The maximum timeout for internal communications between RepairManager and other system services (e.g. Cluster Manager; Failover Manager; etc.) 
RepairManager,RepairTaskProcessingInterval,TimeSpan,Common::TimeSpan::FromSeconds(15),Dynamic,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. The processing interval used by the repair task background processing (in Preparing; Restoring states) 
RepairManager,AllowNewRequests,bool,true,Dynamic,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Allows new repair requests to be created 
RepairManager,MaxActiveRequests,int,100,Dynamic,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,The maximum number of repair requests that can be in a state other than Completed 
RepairManager,MaxTotalRequests,int,2000,Dynamic,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,The maximum number of repair requests that can exist; regardless of state 
RepairManager/Replication,InitialReplicationQueueSize,uint,64,Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,The Windows Fabric Replicator which is a secondary contains internal queues which contain replication operations which have been delivered to the secondary but not distributed to the service.This value defines the initial size for the queue which maintains replication operations.  Note that it must be a power of 2.
RepairManager/Replication,MaxReplicationQueueSize,uint,8192,Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,This is the maximum number of operations that could exist in the replication queue. Note that it must be a power of 2.  If during runtime the queue grows to this size operations will be throttled between the primary and secondary replicators.
RepairManager/Replication,MaxReplicationQueueMemorySize,uint,314572800,Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,This is the maximum value of the replication queue in bytes. If during runtime the queue grows to this size operations will be throttled between the primary and secondary replicators.
RepairManager/Replication,InitialCopyQueueSize,uint,64,Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,This value defines the initial size for the queue which maintains copy operations.  Note that it must be a power of 2.
RepairManager/Replication,MaxCopyQueueSize,uint,1024,Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,This is the maximum value defines the initial size for the queue which maintains replication operations.  Note that it must be a power of 2.  If during runtime the queue grows to this size operations will be throttled between the primary and secondary replicators.
RepairManager/Replication,BatchAcknowledgementInterval,TimeSpan,Common::TimeSpan::FromMilliseconds(50),Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. Determines the amount of time that the replicator waits after receiving an operation before sending back an acknowledgement. Other operations received during this time period will have their acknowledgements sent back in a single message-> reducing network traffic but potentially reducing the throughput of the replicator.
RepairManager/Replication,MaxPendingAcknowledgements,uint,0,Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Maximum number of outstanding operation acknowledgements.  Together with the BatchAckInterval controls replicator operation throttling.
RepairManager/Replication,MaxReplicationMessageSize,uint,52428800,Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Maximum message size of replication operations. Default is 50MB.
RepairManager/Replication,RequireServiceAck,bool,false,Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Bool which controls whether the Windows Fabric Replicator will optimistically acknowledge operations on behalf of services. Setting this to false allows the replicator to optimistically acknowledge operations on behalf of the service. While true tells the replicator to require service ack via the Operation.Ack() API before the acknowledgement can be sent back to the primary service. Note that this flag is not respected for persistent services which always require services to acknowledge operations.
RepairManager/Replication,ReplicatorAddress,wstring,L"localhost:0",Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,The endpoint in form of a string -'IP:Port' which is used by the Windows Fabric Replicator to establish connections with other replicas in order to send/receive operations
RepairManager/Replication,SecondaryClearAcknowledgedOperations,bool,false,Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Bool which controls if the operations on the secondary replicator are cleared once they are ACK'd by the state provider. Setting this to true may result in additional copy operations during the build of an idle replica
RepairManager/Replication,UseStreamFaultsAndEndOfStreamOperationAck,bool,true,Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Bool which indicates to Windows Fabric Replicator if the state provider intends to use the OperationStream2 interface. If this is enabled the state provider must report fault on the OperationStream2 interface if it cannot apply any more operations that are pumped from the stream.The Windows Fabric Replicator will also dispatch an End of Stream operation in the secondary copy and replication streams.
RepairManager/Replication,RetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. When an operation is lost or rejected this timer determines how often the replicator will retry sending the operation.
RepairManager/Replication,CompleteReplicateThreadCount,uint,0,Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,The maximum number of parallel threads that can be used by the Windows Fabric Replicator to quorum complete Replication operations on the primary
RepairManager/Replication,AllowMultipleQuorumSet,bool,true,Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Bool which controls whether the Windows Fabric Replicator considers replicas in the previous and current configuration to compute quorum during reconfigurations. Setting this to false could result in higher chances of dataloss during failures
RepairManager/Replication,TraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(120),Static,INTERNAL,src\Management\RepairManager\RepairManagerConfig.h,Specify timespan in seconds. Determines the tracing interval of the replicator's progress (if there was any progress from the previous trace).
RepairManager/Replication,UnreliableChannelEnabled,bool,false,Static,TEST,src\Management\RepairManager\RepairManagerConfig.h,Enables the unreliable channel for replication operations for internal testing.
DSTSTokenValidationService,DSTSDnsName,wstring,L"",Dynamic,PUBLIC,src\Management\TokenValidationService\TokenValidationServiceConfig.h,DNS name of the DSTS server 
DSTSTokenValidationService,DSTSRealm,wstring,L"",Dynamic,PUBLIC,src\Management\TokenValidationService\TokenValidationServiceConfig.h,Realm name of DSTS server 
DSTSTokenValidationService,CloudServiceDnsName,wstring,L"",Dynamic,PUBLIC,src\Management\TokenValidationService\TokenValidationServiceConfig.h,DNS name of cloud service for which DSTS security token is requested 
DSTSTokenValidationService,CloudServiceName,wstring,L"",Dynamic,PUBLIC,src\Management\TokenValidationService\TokenValidationServiceConfig.h,Name of cloud service for which DSTS security token is requested 
DSTSTokenValidationService,PublicCertificateFindValue,wstring,L"",Dynamic,PUBLIC,src\Management\TokenValidationService\TokenValidationServiceConfig.h,X509 Certificate find value for DSTS public certificate 
DSTSTokenValidationService,PublicCertificateFindType,wstring,L"",Dynamic,PUBLIC,src\Management\TokenValidationService\TokenValidationServiceConfig.h,X509 certificate findtype for DSTS public certificate ex. FindByThumbprint 
DSTSTokenValidationService,PublicCertificateStoreName,wstring,L"",Dynamic,PUBLIC,src\Management\TokenValidationService\TokenValidationServiceConfig.h,Store name where DSTS servers public certificate is stored 
NamingService,OperationRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Dynamic,INTERNAL,src\Naming\NamingConfig.h,Specify timespan in seconds. The interval between operation retries on retryable operations 
NamingService,MaxNotificationReplyEntryCount,int,0,Dynamic,TEST,src\Naming\NamingConfig.h,The maximum number of entries to be put into the reply. Used to test the notification paging of the updates from gateway to client. Default is 0; which shows that the feature is disabled. 
NamingService,PartitionCount,int,3,NotAllowed,PUBLIC,src\Naming\NamingConfig.h,The number of partitions of the Naming Service store to be created. Each partition owns a single partition key that corresponds to its index; so partition keys [0; PartitionCount) exist. Increasing the number of Naming Service partitions increases the scale that the Naming Service can perform at by decreasing the average amount of data held by any backing replica set; at a cost of increased utilization of resources (since PartitionCount*ReplicaSetSize service replicas must be maintained). 
NamingService,TargetReplicaSetSize,int,7,NotAllowed,PUBLIC,src\Naming\NamingConfig.h,The number of replica sets for each partition of the Naming Service store. Increasing the number of replica sets increases the level of reliability for the information in the Naming Service Store; decreasing the change that the information will be lost as a result of node failures; at a cost of increased load on Windows Fabric and the amount of time it takes to perform updates to the naming data. 
NamingService,MinReplicaSetSize,int,3,NotAllowed,PUBLIC,src\Naming\NamingConfig.h,The minimum number of Naming Service replicas required to write into to complete an update. If there are fewer replicas than this active in the system the Reliability System denies updates to the Naming Service Store until replicas are restored. This value should never be more than the TargetReplicaSetSize. 
NamingService,ReplicaRestartWaitDuration,TimeSpan,Common::TimeSpan::FromSeconds(60.0 * 30),NotAllowed,PUBLIC,src\Naming\NamingConfig.h,Specify timespan in seconds. When a Naming Service replica goes down; this timer starts.  When it expires the FM will begin to replace the replicas which are down (it does not yet consider them lost) 
NamingService,QuorumLossWaitDuration,TimeSpan,Common::TimeSpan::MaxValue,NotAllowed,PUBLIC,src\Naming\NamingConfig.h,Specify timespan in seconds. When a Naming Service gets into quorum loss; this timer starts.  When it expires the FM will will consider the down replicas as lost; and attempt to recover quorum. Not that this may result in data loss. 
NamingService,StandByReplicaKeepDuration,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 24 * 7),NotAllowed,PUBLIC,src\Naming\NamingConfig.h,Specify timespan in seconds. When a Naming Service replicas come back from a down state; it may have already been replaced.  This timer determines how long the FM will keep the standby replica before discarding it. 
NamingService,PlacementConstraints,wstring,L"",NotAllowed,PUBLIC,src\Naming\NamingConfig.h,Placement constraint for the Naming Service 
NamingService,RepairOperationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(30),Dynamic,INTERNAL,src\Naming\NamingConfig.h,Specify timespan in seconds. Timeout time for each repair operation 
NamingService,RepairInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,PUBLIC,src\Naming\NamingConfig.h,Specify timespan in seconds. Interval in which the naming inconsistency repair between the authority owner and name owner will start. 
Naming/Replication,InitialReplicationQueueSize,uint,64,Static,INTERNAL,src\Naming\NamingConfig.h,The Windows Fabric Replicator which is a secondary contains internal queues which contain replication operations which have been delivered to the secondary but not distributed to the service.This value defines the initial size for the queue which maintains replication operations.  Note that it must be a power of 2.
Naming/Replication,MaxReplicationQueueSize,uint,1024,Static,INTERNAL,src\Naming\NamingConfig.h,This is the maximum number of operations that could exist in the replication queue. Note that it must be a power of 2.  If during runtime the queue grows to this size operations will be throttled between the primary and secondary replicators.
Naming/Replication,MaxReplicationQueueMemorySize,uint,104857600,Static,INTERNAL,src\Naming\NamingConfig.h,This is the maximum value of the replication queue in bytes. If during runtime the queue grows to this size operations will be throttled between the primary and secondary replicators.
Naming/Replication,InitialCopyQueueSize,uint,64,Static,INTERNAL,src\Naming\NamingConfig.h,This value defines the initial size for the queue which maintains copy operations.  Note that it must be a power of 2.
Naming/Replication,MaxCopyQueueSize,uint,1024,Static,INTERNAL,src\Naming\NamingConfig.h,This is the maximum value defines the initial size for the queue which maintains replication operations.  Note that it must be a power of 2.  If during runtime the queue grows to this size operations will be throttled between the primary and secondary replicators.
Naming/Replication,BatchAcknowledgementInterval,TimeSpan,Common::TimeSpan::FromMilliseconds(0),Static,INTERNAL,src\Naming\NamingConfig.h,Specify timespan in seconds. Determines the amount of time that the replicator waits after receiving an operation before sending back an acknowledgement. Other operations received during this time period will have their acknowledgements sent back in a single message-> reducing network traffic but potentially reducing the throughput of the replicator.
Naming/Replication,MaxPendingAcknowledgements,uint,0,Static,INTERNAL,src\Naming\NamingConfig.h,Maximum number of outstanding operation acknowledgements.  Together with the BatchAckInterval controls replicator operation throttling.
Naming/Replication,MaxReplicationMessageSize,uint,52428800,Static,INTERNAL,src\Naming\NamingConfig.h,Maximum message size of replication operations. Default is 50MB.
Naming/Replication,RequireServiceAck,bool,false,Static,INTERNAL,src\Naming\NamingConfig.h,Bool which controls whether the Windows Fabric Replicator will optimistically acknowledge operations on behalf of services. Setting this to false allows the replicator to optimistically acknowledge operations on behalf of the service. While true tells the replicator to require service ack via the Operation.Ack() API before the acknowledgement can be sent back to the primary service. Note that this flag is not respected for persistent services which always require services to acknowledge operations.
Naming/Replication,ReplicatorAddress,wstring,L"localhost:0",Static,INTERNAL,src\Naming\NamingConfig.h,The endpoint in form of a string -'IP:Port' which is used by the Windows Fabric Replicator to establish connections with other replicas in order to send/receive operations
Naming/Replication,SecondaryClearAcknowledgedOperations,bool,false,Static,INTERNAL,src\Naming\NamingConfig.h,Bool which controls if the operations on the secondary replicator are cleared once they are ACK'd by the state provider. Setting this to true may result in additional copy operations during the build of an idle replica
Naming/Replication,UseStreamFaultsAndEndOfStreamOperationAck,bool,true,Static,INTERNAL,src\Naming\NamingConfig.h,Bool which indicates to Windows Fabric Replicator if the state provider intends to use the OperationStream2 interface. If this is enabled the state provider must report fault on the OperationStream2 interface if it cannot apply any more operations that are pumped from the stream.The Windows Fabric Replicator will also dispatch an End of Stream operation in the secondary copy and replication streams.
Naming/Replication,RetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,src\Naming\NamingConfig.h,Specify timespan in seconds. When an operation is lost or rejected this timer determines how often the replicator will retry sending the operation.
Naming/Replication,CompleteReplicateThreadCount,uint,0,Static,INTERNAL,src\Naming\NamingConfig.h,The maximum number of parallel threads that can be used by the Windows Fabric Replicator to quorum complete Replication operations on the primary
Naming/Replication,AllowMultipleQuorumSet,bool,true,Static,INTERNAL,src\Naming\NamingConfig.h,Bool which controls whether the Windows Fabric Replicator considers replicas in the previous and current configuration to compute quorum during reconfigurations. Setting this to false could result in higher chances of dataloss during failures
Naming/Replication,TraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(120),Static,INTERNAL,src\Naming\NamingConfig.h,Specify timespan in seconds. Determines the tracing interval of the replicator's progress (if there was any progress from the previous trace).
Naming/Replication,UnreliableChannelEnabled,bool,false,Static,TEST,src\Naming\NamingConfig.h,Enables the unreliable channel for replication operations for internal testing.
Security/ClientAccess,CreateName,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,DeleteName,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,PropertyWriteBatch,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,CreateService,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,CreateServiceFromTemplate,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,UpdateService,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,DeleteService,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,ProvisionApplicationType,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,CreateApplication,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,DeleteApplication,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,UpgradeApplication,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,UnprovisionApplicationType,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,MoveNextUpgradeDomain,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,ReportHealth,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,ReportUpgradeHealth,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,ProvisionFabric,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,UpgradeFabric,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,UnprovisionFabric,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,MoveNextFabricUpgradeDomain,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,ReportFabricUpgradeHealth,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,StartInfrastructureTask,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,FinishInfrastructureTask,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,ActivateNode,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,DeactivateNode,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,DeactivateNodesBatch,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,RemoveNodeDeactivations,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,GetNodeDeactivationStatus,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,NodeStateRemoved,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,RecoverPartition,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,RecoverPartitions,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,RecoverServicePartitions,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,RecoverSystemPartitions,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,ReportFault,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,NodeControl,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,CodePackageControl,wstring,L"Admin",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,Ping,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,Query,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,NameExists,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,EnumerateSubnames,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,EnumerateProperties,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,PropertyReadBatch,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,GetServiceDescription,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,ResolveService,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,ResolveNameOwner,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,ResolvePartition,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,GetUpgradeStatus,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Security/ClientAccess,GetFabricUpgradeStatus,wstring,L"Admin||User",Dynamic,PUBLIC,src\Naming\PreprocessedClientAccessConfig.h,
Query,AggregatedHealthTimeoutPercentage,double,0.6,Dynamic,INTERNAL,src\query\QueryConfig.h,AggregatedHealthTimeoutPercentage indicates the amount of time from the user given timeout until which we will wait for the health manager to return the aggregated health state. It is a value between 0 and 1.0 with 1.0 indicating that the HM query should also get the entire user specified timeout. 
Failover,FTDetailedTraceInterval,TimeSpan,Common::TimeSpan::FromMinutes(60),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. The interval after which the Old state of an FT will be traced out 
Failover,SendToFMRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5.0),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. When sending messages from nodes to the FM; if acknowledgement is not received within the SendToFMTimeout; then wait for this interval before sending the next retry 
Failover,SendToFMTimeout,TimeSpan,Common::TimeSpan::FromSeconds(30.0),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. When sending messages from nodes to the FM; if an acknowledgement is not received within this timeout; then schedule a retry. 
Failover,SendToNodeTimeout,TimeSpan,Common::TimeSpan::FromSeconds(30.0),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. When sending a message from the FM to the node; if an acknowledgement is not received within this timeout; then retry sending the message 
Failover,RoutingRetryTimeout,TimeSpan,Common::TimeSpan::FromSeconds(5.0),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. When sending a routed message; if an ack is not received within this timeout; then retry the message 
FailoverManager,ClusterStableWaitDuration,TimeSpan,Common::TimeSpan::FromSeconds(30.0),Dynamic,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. When the cluster is first starting up; there will be many nodes joining.  However; even after the MinReplicaSetSize of the cluster is met; there may still be many nodes which are in the process of joining.  In order to prevent placing services when there are still nodes joining; once the FM sees a node come up it will wait for this duration before declaring the ring stable. If during this interval the FM observes another node come up; it will reset this timer. 
FailoverManager,StoreOpenTimeout,TimeSpan,Common::TimeSpan::FromSeconds(180.0),Dynamic,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. When opening up the local store that the FM uses; the FM waits this long for a response 
FailoverManager,StoreRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(1.0),Dynamic,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. If opening the store fails; then the FM waits this long before retrying 
FailoverManager,PeriodicStateScanInterval,TimeSpan,Common::TimeSpan::FromSeconds(5.0),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. The PeriodicStateScanInterval determines how often the FM background thread activates to scan for changes and kick off actions 
FailoverManager,ServiceLocationBroadcastInterval,TimeSpan,Common::TimeSpan::FromSeconds(5.0),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. Periodically the FM broadcasts changes to the locations of services. This broadcasts are picked up by naming and cached as an optimization 
FailoverManager,MinActionRetryIntervalPerReplica,TimeSpan,Common::TimeSpan::FromSeconds(10.0),Dynamic,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. When the FM sends a particular action for a specific replica; it starts this timer.  Before it expires; the FM will not send additional actions to the replica 
FailoverManager,MaxActionRetryIntervalPerReplica,TimeSpan,Common::TimeSpan::FromSeconds(60.0),Dynamic,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. When the FM sends a particular action for a specific replica; if the state has not been updated for this interval; message will be retried with this interval. 
FailoverManager,PeriodicStateCleanupScanInterval,TimeSpan,Common::TimeSpan::FromSeconds(300.0),Dynamic,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. Timer which determines how often the FM scans its state to clean unnecessary information such as service tombstones (Default: 5min) 
FailoverManager,SystemReplicaRestartWaitDuration,TimeSpan,Common::TimeSpan::FromSeconds(60.0 * 30),Dynamic,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. When persistent system replicas go down; this timer starts.  When it expires the FM will begin to replica the replicas which are down (it does not yet consider them lost) (Default: 30min) 
FailoverManager,SystemStandByReplicaKeepDuration,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 24 * 7),Dynamic,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. When persistent replicas come back from a down state; they may have already been replaced.  This timer determines how long the FM will keep the standby replica before discarding it.  Keeping the replica as standby rather than removing it is preferable when persistent replicas are expensive to build. (Default: 7 days) 
FailoverManager,OfflineReplicaKeepDuration,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 24 * 30),Dynamic,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. This timer defines the maximum amount of time that the FM will keep track of replicas which are down 
FailoverManager,ReplicaTombstoneDuration,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 10),Dynamic,DEPRECATED,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. Not being consumed by the code and present just for upgrade compatibility 
FailoverManager,DroppedReplicaKeepDuration,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 24 * 7),Dynamic,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. When a replica is removed from the system; the FM creates a tombstone record for that replica; which are kept for the DroppedReplicaKeepDuration While the replica is tombstoned the FM can distinguish between replicas which existed but have been dropped and replicas which do not exist. 
FailoverManager,DeletedReplicaKeepDuration,TimeSpan,Common::TimeSpan::FromSeconds(600.0),Dynamic,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. When a replica is deleted on RA; the FM still keeps the replica for DeletedReplicaKeepDuration. 
FailoverManager,InBuildFailoverUnitKeepDuration,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 24 * 30),Dynamic,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. When a failover unit is in the InBuild cache for this duration; FM will delete it. 
FailoverManager,RebuildRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5.0),Static,DEPRECATED,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. Not being consumed by the code and present just for upgrade compatibility 
FailoverManager,MinRebuildRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5.0),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. 
FailoverManager,MaxRebuildRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(10.0),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. 
FailoverManager,LockAcquireTimeout,TimeSpan,Common::TimeSpan::FromSeconds(5.0),Dynamic,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. When the FM attempts to acquire a lock on a resource like the local FM store; then wait at least this much time to see if the lock can be obtained 
FailoverManager,ExpectedClusterSize,int,1,Static,PUBLIC,src\Reliability\Failover\FailoverConfig.h,When the cluster is initially started up; the FM will wait for this many nodes to report themselves up before it begins placing other services; including the system services like naming.  Increasing this value increases the time it takes a cluster to start up; but prevents the early nodes from becoming overloaded and also the additional moves that will be necessary as more nodes come online.  This value should generally be set to some small fraction of the initial cluster size. 
FailoverManager,ClusterPauseThreshold,int,1,Static,PUBLIC,src\Reliability\Failover\FailoverConfig.h,If the number of nodes in system go below this value then placement; load balancing; and failover is stopped. 
FailoverManager,TargetReplicaSetSize,int,7,NotAllowed,PUBLIC,src\Reliability\Failover\FailoverConfig.h,This is the target number of FM replicas that Windows Fabric will maintain.  A higher number results in higher reliability of the FM data; with a small performance tradeoff 
FailoverManager,MinReplicaSetSize,int,3,NotAllowed,PUBLIC,src\Reliability\Failover\FailoverConfig.h,This is the minimum replica set size for the FM.  If the number of active FM replicas drops below this value; the FM will reject changes to the cluster until at least the min number of replicas is recovered 
FailoverManager,ReplicaRestartWaitDuration,TimeSpan,Common::TimeSpan::FromSeconds(60.0 * 30),NotAllowed,PUBLIC,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. This is the ReplicaRestartWaitDuration for the FMService 
FailoverManager,FullRebuildWaitDuration,TimeSpan,Common::TimeSpan::MaxValue,NotAllowed,PUBLIC,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. When the FM enters quorum loss; it first waits this amount of time before starting a full rebuild.  The purpose of waiting for this period of time is to give other nodes and FM replicas time to come up.  Increasing this time will help prevent the chances of accidental dataloss during FM rebuild; at the cost of some additional startup/recovery time 
FailoverManager,StandByReplicaKeepDuration,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 24 * 7),NotAllowed,PUBLIC,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. This is the StandByReplicaKeepDuration for the FMService 
FailoverManager,PlacementConstraints,wstring,L"",NotAllowed,PUBLIC,src\Reliability\Failover\FailoverConfig.h,Any placement constraints for the failover manager replicas 
FailoverManager,IsFabricUpgradeGatekeepingEnabled,bool,true,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,
FailoverManager,ExpectedNodeFabricUpgradeDuration,TimeSpan,Common::TimeSpan::FromSeconds(60.0 * 30),Dynamic,PUBLIC,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. 
FailoverManager,ExpectedReplicaUpgradeDuration,TimeSpan,Common::TimeSpan::FromSeconds(60.0 * 30),Dynamic,PUBLIC,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. 
FailoverManager,BackgroundThreadCount,int,0,Dynamic,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Determines the number of threads that the FM background task should use. The default value of 0 indicates that the FM should use a number of threads equal to the number of cores on the machine 
FailoverManager,ProcessingQueueThreadCount,int,0,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Determines the number of threads that the FM should use for message processing and PLB action consumption. The default value of 0 indicates that the FM should use a number of threads equal to the number of cores on the machine 
FailoverManager,CommitQueueThreadCount,int,0,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Determines the number of threads that the FM should use for completing the post-commit jobs. The default value of 0 indicates that the FM should use a number of threads equal to the number of cores on the machine 
FailoverManager,CommonQueueThreadCount,int,100,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Determines the number of threads that the FM should use for non-failover unit specific messages. 
FailoverManager,MaxActionsPerIteration,int,3000,Dynamic,INTERNAL,src\Reliability\Failover\FailoverConfig.h,When the FM runs; it generates a series of actions which need to be taken for the cluster.  This setting defines the maximum number of actions which the FM will issue in a single iteration of the FM state machine.  Increasing this number will allow the FM to reconfigure the system faster when necessary (no actions will be held back); at the cost of additional resource consumption in terms of messages that are sent from the FM to the replicas and also the concurrent handling of those actions by all of the affected replicas). 
FailoverManager,StoreRetryAttempt,int,3,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,When the FM attempts to access the store and fails; the FM should retry accessing the store 
FailoverManager,ServiceLookupTableBroadcastAttemptCount,int,2,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,When the FM broadcasts service locations these broadcasts can fail 
FailoverManager,ServiceLookupTableMessageMaxEntries,int,300,Dynamic,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Max entries a service lookup table update message can contain 
FailoverManager,ServiceLookupTableEmptyBroadcastInterval,TimeSpan,Common::TimeSpan::FromSeconds(15.0),Dynamic,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. Interval between empty service table update broadcast messages 
FailoverManager,MaxParallelLoadUpdates,int,3,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,The FM persistent store is used to store load reports which arrive from replicas and nodes.  Since the load balancing data is best effort; for performance reasons this information can be lazily committed.  The MaxParallelLoadUpdates setting defines the maximum number of load updates that will be applied in parallel. 
FailoverManager,MaxLoadUpdateBatchSize,int,50,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,When the FM is writing load reports into its persistent store; it should batch together no more than this many load reports 
FailoverManager,PeriodicLoadPersistInterval,TimeSpan,Common::TimeSpan::FromSeconds(10.0),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. Timer which determines how often the FM check if there are new load reports and persist them into store 
FailoverManager,AdminStateTraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(3600),Static,PUBLIC,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. The interval for tracing system services to the admin channel on FM/FMM. 
FailoverManager,DcaTraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(600),Dynamic,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. The interval for tracing to the DCA channel on FM/FMM. 
FailoverManager,PeriodicServiceTraceCount,int,15,Dynamic,INTERNAL,src\Reliability\Failover\FailoverConfig.h,The number of services to trace per AdminStateTraceInterval 
FailoverManager,StoreConnectionString,wstring,L"",Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,
FailoverManager,FMStoreDirectory,wstring,L".\\",Static,PUBLIC,src\Reliability\Failover\FailoverConfig.h,The directory where the FM will store its local data 
FailoverManager,FMStoreFilename,wstring,L"FM.edb",Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,The filename that the FM should use when creating it's local store 
FailoverManager,ReconfigurationTimeLimit,TimeSpan,Common::TimeSpan::FromSeconds(300),Dynamic,PUBLIC,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. The time limit for reconfiguration; after which a warning health report will be initiated 
FailoverManager,BuildReplicaTimeLimit,TimeSpan,Common::TimeSpan::FromSeconds(3600),Dynamic,PUBLIC,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. The time limit for building a stateful replica; after which a warning health report will be initiated 
FailoverManager,CreateInstanceTimeLimit,TimeSpan,Common::TimeSpan::FromSeconds(300),Dynamic,PUBLIC,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. The time limit for creating a stateless instance; after which a warning health report will be initiated 
FailoverManager,PlacementTimeLimit,TimeSpan,Common::TimeSpan::FromSeconds(600),Dynamic,PUBLIC,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. The time limit for reaching target replica count; after which a warning health report will be initiated 
FailoverManager,UnknownNodeKeepDuration,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 24),Dynamic,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. The duration for which FM keeps track of an unknown node 
ReconfigurationAgent,ReplicaUpMessageRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(30.0),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. This configuration is from v1 where the FM used it to schedule an internal retry for replica up messages Since v1 has shipped keeping this around for the FM use case and defining a new entry for RA use case 
FailoverManager,SeedNodeWaitSafetyFactor,int,3,Dynamic,INTERNAL,src\Reliability\Failover\FailoverConfig.h,A seed node can only function as arbitrator after LeaseDuration+ArbitrationTimeout. During upgrade or node deactivation; FM should only consider a seed node that is up after the above duration to be effective.  To accont for clock skew and configuration update; the duration is multiplied by this factor as the interval for which FM will wait. 
FailoverManager,DummyPLBEnabled,bool,false,Static,TEST,src\Reliability\Failover\FailoverConfig.h,
FailoverManager,DummyPLBRandomPlacementEnabled,bool,false,Static,TEST,src\Reliability\Failover\FailoverConfig.h,
FailoverManager,IsTestMode,bool,false,Static,TEST,src\Reliability\Failover\FailoverConfig.h,
FailoverManager/Store,CommitBatchingPeriod,int,50,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,FMStore will batch simple transactions that are created within this period.  0 means no batching. 
FailoverManager/Store,CommitBatchingSizeLimitInKB,int,256,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,When batched replications size reach this limit; FMStore will start a new group for new simple transaction. 
FailoverManager/Store,TransactionLowWatermark,int,100,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,When the number of FMStore pending completion transaction <= this; new simple transactions will not be batched.  -1 to disable. 
FailoverManager/Store,TransactionHighWatermark,int,-1,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,When the number of FMStore pending completion transaction >= this; batching period will be extended every time the period elapses.  -1 to disable. 
FailoverManager/Store,CommitBatchingPeriodExtension,int,0,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,When batching period needs to be extended; it will be extended this much every time.  0 means extending CommitBatchingPeriod. 
FailoverManager/Store,ThrottleOperationCount,int64,7500,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,The store will throttle operations once the number of operations in the replication queue reaches this value 
FailoverManager/Store,ThrottleQueueSizeBytes,int64,270*1024*1024,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,The store will throttle operations once the memory utilization (bytes) of the replication queue reaches this value 
FailoverManager/Store,TransactionThrottle,int,4096,Static,DEPRECATED,src\Reliability\Failover\FailoverConfig.h,This config is no longer consumed in the code and is present only for upgrade compatibility 
ReconfigurationAgent,MessageRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(30.0),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. Message retry interval for ServiceTypeDisabled/Enabled 
ReconfigurationAgent,ReconfigurationMessageRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(10.0),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. Message retry interval for messages related to reconfiguration 
ReconfigurationAgent,PerNodeMinimumIntervalBetweenMessageToFM,TimeSpan,Common::TimeSpan::FromSeconds(0.5),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. The minimum interval between two messages to FM (ReplicaUp/ReplicaDown/ReplicaDropped) Two replica up messages will not be sent by RA to FM in less than this interval 
ReconfigurationAgent,PerReplicaMinimumIntervalBetweenMessageToFM,TimeSpan,Common::TimeSpan::FromSeconds(15),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. The minimum interval between two messages for the same replica sent by RA to FM (Currently only ReplicaUp) Successive messages for the same replica will not be sent in less than this interval 
ReconfigurationAgent,MaxNumberOfReplicasInMessageToFM,int,256,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,The maximum number of replicas in a replica message Currently applies only to ReplicaUp 
ReconfigurationAgent,ReopenReplicaMessageRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(30.0),Static,DEPRECATED,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. 
ReconfigurationAgent,FMMessageRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(2),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. The retry interval for message to FM (ReplicaUp/ReplicaDown) This is set to a low value because the configuration above should allow new messages to be generated 
ReconfigurationAgent,ReplicaDroppedMessageRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(15),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. The retry interval for ReplicaDropped message to FM This is separate as it is a message targeted for a single FT and needs a higher retry interval than ReplicaUp/Down 
ReconfigurationAgent,RAPMessageRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(15),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. The retry interval for message to RAP for single FT messages related to FT Lifecycle 
ReconfigurationAgent,RAStoreOpenTimeout,TimeSpan,Common::TimeSpan::FromSeconds(120.0),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. When opening up the local store that the RA uses; the RA waits this long for a response 
ReconfigurationAgent,RAStoreOpenRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5.0),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. When opening up the RA local store fails; the RA waits this long before trying again 
ReconfigurationAgent,RAUpgradeProgressCheckInterval,TimeSpan,Common::TimeSpan::FromSeconds(10.0),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. When a service is upgraded; the RA will periodically check to see if it is back up again 
ReconfigurationAgent,SendLoadReportInterval,TimeSpan,Common::TimeSpan::FromSeconds(300),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. SendLoadReportInterval defines the interval to send ReportLoad messages from RAP to RA 
ReconfigurationAgent,FailoverUnitProxyCleanupInterval,TimeSpan,Common::TimeSpan::FromSeconds(1800),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. FailoverUnitProxyCleanupInterval defines the interval to cleanup the failover unit proxy objects that were kept around for stateleness check 
ReconfigurationAgent,MaxNumberOfLoadReportsPerMessage,int, 500,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,MaxNumberOfLoadReportsPerMessage defines the batch size for ReportLoad messages from RAP to RA 
ReconfigurationAgent,ProxyOutgoingMessageRetryTimerInterval,TimeSpan,Common::TimeSpan::FromSeconds(30.0),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. ProxyOutgoingMessageRetryTimerInterval defines the timer interval for outgoing messages; like ReportFault; in RAP 
ReconfigurationAgent,LocalMessageRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5.0),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. LocalMessageRetryInterval defines the local retry interval for failed messages in RAP 
ReconfigurationAgent,LocalMessageRetryTimerInterval,TimeSpan,Common::TimeSpan::FromSeconds(5.0),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. LocalMessageRetryTimerInterval defines the timer interval to retry pending messages in RAP 
ReconfigurationAgent,MaxLocalMessageRetryCount,int,2,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,MaxLocalMessageRetryCount defines the max number of local retries for a failed message in RAP 
ReconfigurationAgent,IsLocalHealthReportingEnabled,bool,true,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,IsLocalHealthReportingEnabled determines whether health reporting in RAP is enabled or not 
ReconfigurationAgent,IsHealthReportingEnabled,bool,true,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,IsHealthReportingEnabled determines whether health reporting in RA is enabled or not 
ReconfigurationAgent,ServiceApiHealthDuration,TimeSpan,Common::TimeSpan::FromMinutes(30.0),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. ServiceApiHealthDuration defines allowed run time before RAP reports unhealthy 
ReconfigurationAgent,ServiceReconfigurationApiHealthDuration,TimeSpan,Common::TimeSpan::FromSeconds(30.0),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. ServiceReconfigurationApiHealthDuration defines allowed run time that affects service availability before RAP reports unhealthy 
ReconfigurationAgent,LocalHealthReportingTimerInterval,TimeSpan,Common::TimeSpan::FromSeconds(30.0),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. LocalHealthReportingTimerInterval defines the interval to check and report health in RAP 
ReconfigurationAgent,FailoverUnitProcessingQueueThreadCount,int,0,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,The maximum number of threads that can be used for processing per failoverunit work 
ReconfigurationAgent,RAPMessageProcessingQueueThreadCount,int,30,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,The maximum number of threads that can be used for processing messages received by the RAP. 0 = #cores 
ReconfigurationAgent,MessageProcessingQueueThreadCount,int,0,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,The maximum number of threads that can be used for processing per messages 
ReconfigurationAgent/Store,MaxEseCommitWaitDuration,TimeSpan,Common::TimeSpan::FromMilliseconds(15),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. The maximum time to wait for async ESE transactions to commit 
ReconfigurationAgent,PerNodeMinimumIntervalBetweenReplicaUpMessages,TimeSpan,Common::TimeSpan::FromSeconds(0.5),Static,DEPRECATED,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. The minimum interval between two Replica Up messages sent by RA to FM Two replica up messages will not be sent by RA to FM in less than this interval 
ReconfigurationAgent,PerReplicaMinimumIntervalBetweenReplicaUpMessages,TimeSpan,Common::TimeSpan::FromSeconds(45),Static,DEPRECATED,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. The minimum interval between two Replica Up messages for the same replica sent by RA to FM Successive Replica Up messages for the same replica will not be sent in less than this interval 
ReconfigurationAgent,ReopenSuccessWaitInterval,TimeSpan,Common::TimeSpan::FromMinutes(5),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. The amount of time the RA will wait for a persisted replica to be reopened before telling the FM about it 
ReconfigurationAgent,DroppedFailoverUnitTombstoneDuration,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 24),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. The duration after which dropped FTs can be removed 
ReconfigurationAgent,DeletedFailoverUnitTombstoneDuration,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 12),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. The duration after which deleted FTs can be removed 
ReconfigurationAgent,PeriodicStateCleanupInterval,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 3),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. The time to take to scan cleaned up failover units 
ReconfigurationAgent,FabricUpgradeReplicaCloseCompleteCheckInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. The duration for which to wait before checking if all replicas are closed during a fabric upgrade 
ReconfigurationAgent,FabricUpgradeDownloadRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(60),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. The duration after which a failed download is retried 
ReconfigurationAgent,FabricUpgradeUpgradeRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(90),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. The duration after which a failed upgrade is retried 
ReconfigurationAgent,FabricUpgradeValidateRetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(15),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. The duration after which the validate call to Hosting is retried 
ReconfigurationAgent,ServiceTypeRegistrationMaxRetryThreshold,int,2147483647,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,The number of attempts at finding service type registration before replica is dropped This is defined based on a count which is retried depending on the Reopen/Open retry interval and timeout By default it is set to INT_MAX i.e. Infinite 
ReconfigurationAgent,ServiceTypeRegistrationWarningReportThreshold,int,2147483647,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,The number of attempts at finding a service type registration after which a warning will be reported Defaults to INT_MAX 
ReconfigurationAgent,ReplicaOpenFailureMaxRetryThreshold,int,40,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,The number of attempts at opening a new replica on a node after which RA will give up This is based on a count which is retried every ReplicaOpenMessageRetryInterval seconds With defaults; a total of 10 minutes will be spent (40 times; 15 seconds each) 
ReconfigurationAgent,ReplicaOpenFailureWarningReportThreshold,int,10,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,The number of attempts after which a warning will be reported to HM 
ReconfigurationAgent,ReplicaReopenFailureMaxRetryThreshold,int,40320,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,The number of attempts at reopening an existing replica on a node after which RA will give up This is based on a count which is retried every ReplicaReopenMessageRetryInterval seconds With defaults; a total of 40320 attempts will be made which is approximately 7 days 
ReconfigurationAgent,ReplicaReopenFailureWarningReportThreshold,int,10,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,The number of attempts after which a warning will be reported to HM 
ReconfigurationAgent,SchedulerWarningTraceThreshold,int,100,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,The number of job items per ft after which the scheduler will trace a warning on each new job item that is added 
ReconfigurationAgent,PeriodicQueryCleanupInterval,TimeSpan,Common::TimeSpan::FromMinutes(30),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. The duration after which pending Queries on the RA are completed with Timeout error 
Failover/Replication,InitialReplicationQueueSize,uint,64,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,The Windows Fabric Replicator which is a secondary contains internal queues which contain replication operations which have been delivered to the secondary but not distributed to the service.This value defines the initial size for the queue which maintains replication operations.  Note that it must be a power of 2.
Failover/Replication,MaxReplicationQueueSize,uint,8192,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,This is the maximum number of operations that could exist in the replication queue. Note that it must be a power of 2.  If during runtime the queue grows to this size operations will be throttled between the primary and secondary replicators.
Failover/Replication,MaxReplicationQueueMemorySize,uint,314572800,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,This is the maximum value of the replication queue in bytes. If during runtime the queue grows to this size operations will be throttled between the primary and secondary replicators.
Failover/Replication,InitialCopyQueueSize,uint,64,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,This value defines the initial size for the queue which maintains copy operations.  Note that it must be a power of 2.
Failover/Replication,MaxCopyQueueSize,uint,1024,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,This is the maximum value defines the initial size for the queue which maintains replication operations.  Note that it must be a power of 2.  If during runtime the queue grows to this size operations will be throttled between the primary and secondary replicators.
Failover/Replication,BatchAcknowledgementInterval,TimeSpan,Common::TimeSpan::FromMilliseconds(50),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. Determines the amount of time that the replicator waits after receiving an operation before sending back an acknowledgement. Other operations received during this time period will have their acknowledgements sent back in a single message-> reducing network traffic but potentially reducing the throughput of the replicator.
Failover/Replication,MaxPendingAcknowledgements,uint,0,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Maximum number of outstanding operation acknowledgements.  Together with the BatchAckInterval controls replicator operation throttling.
Failover/Replication,MaxReplicationMessageSize,uint,52428800,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Maximum message size of replication operations. Default is 50MB.
Failover/Replication,RequireServiceAck,bool,false,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Bool which controls whether the Windows Fabric Replicator will optimistically acknowledge operations on behalf of services. Setting this to false allows the replicator to optimistically acknowledge operations on behalf of the service. While true tells the replicator to require service ack via the Operation.Ack() API before the acknowledgement can be sent back to the primary service. Note that this flag is not respected for persistent services which always require services to acknowledge operations.
Failover/Replication,ReplicatorAddress,wstring,L"localhost:0",Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,The endpoint in form of a string -'IP:Port' which is used by the Windows Fabric Replicator to establish connections with other replicas in order to send/receive operations
Failover/Replication,SecondaryClearAcknowledgedOperations,bool,false,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Bool which controls if the operations on the secondary replicator are cleared once they are ACK'd by the state provider. Setting this to true may result in additional copy operations during the build of an idle replica
Failover/Replication,UseStreamFaultsAndEndOfStreamOperationAck,bool,true,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Bool which indicates to Windows Fabric Replicator if the state provider intends to use the OperationStream2 interface. If this is enabled the state provider must report fault on the OperationStream2 interface if it cannot apply any more operations that are pumped from the stream.The Windows Fabric Replicator will also dispatch an End of Stream operation in the secondary copy and replication streams.
Failover/Replication,RetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. When an operation is lost or rejected this timer determines how often the replicator will retry sending the operation.
Failover/Replication,CompleteReplicateThreadCount,uint,0,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,The maximum number of parallel threads that can be used by the Windows Fabric Replicator to quorum complete Replication operations on the primary
Failover/Replication,AllowMultipleQuorumSet,bool,true,Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Bool which controls whether the Windows Fabric Replicator considers replicas in the previous and current configuration to compute quorum during reconfigurations. Setting this to false could result in higher chances of dataloss during failures
Failover/Replication,TraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(120),Static,INTERNAL,src\Reliability\Failover\FailoverConfig.h,Specify timespan in seconds. Determines the tracing interval of the replicator's progress (if there was any progress from the previous trace).
Failover/Replication,UnreliableChannelEnabled,bool,false,Static,TEST,src\Reliability\Failover\FailoverConfig.h,Enables the unreliable channel for replication operations for internal testing.
PlacementAndLoadBalancing,DummyPLBEnabled,bool,false,Dynamic,TEST,src\Reliability\LoadBalancing\PLBConfig.h,TODO: add validation for all configurations 
PlacementAndLoadBalancing,PLBRefreshInterval,TimeSpan,Common::TimeSpan::FromSeconds(1.0),Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. Defines how frequently the PLB background thread scans its state to determine if any actions need to be taken 
PlacementAndLoadBalancing,MinLoadBalancingInterval,TimeSpan,Common::TimeSpan::FromSeconds(5.0),Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. Defines the minimum interval between two load balancing rounds 
PlacementAndLoadBalancing,BalancingDelayAfterNodeDown,TimeSpan,Common::TimeSpan::FromSeconds(120.0),Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. Do not start balancing activities within this period after a node down event 
PlacementAndLoadBalancing,BalancingDelayAfterNewNode,TimeSpan,Common::TimeSpan::FromSeconds(120.0),Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. Do not start balancing activities within this period after adding a new node 
PlacementAndLoadBalancing,PLBRewindInterval,TimeSpan,Common::TimeSpan::FromSeconds(300.0),Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. Rewind the state machine and retry placement or constraintcheck or balancing again when we are at NoActionNeeded for a while 
PlacementAndLoadBalancing,PLBActionRetryTimes,int,3,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,The times of retry for each PLB action 
PlacementAndLoadBalancing,MaxMovementHoldingTime,TimeSpan,Common::TimeSpan::FromSeconds(3600.0),Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. Defines the maximum amount of time PLB background thread can wait if actions from the last scan is not submitted yet 
PlacementAndLoadBalancing,MaxMovementExecutionTime,TimeSpan,Common::TimeSpan::FromSeconds(10.0),Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. Defines the maximum amount of time PLB background thread can wait if actions from the last scan is submitted but not executed by FM yet 
PlacementAndLoadBalancing,AvgStdDevDeltaThrottleThreshold,double,0.01,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Balancing activities will be reduced if (current AvgStdDev) <= (AvgStdDev after last balancing) * (1 + AvgStdDevDeltaThrottleThreshold) This type of throttling can be disabled by providing a negative value for this parameter. 
PlacementAndLoadBalancing,GlobalMovementThrottleThreshold,uint,1000,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,No balancing related movement will occur if the per domain replica movements has reached or exceeded GlobalMovementThrottleThreshold in the past interval indicated by GlobalMovementThrottleCountingInterval 
PlacementAndLoadBalancing,GlobalMovementThrottleCountingInterval,TimeSpan,Common::TimeSpan::FromSeconds(600),Static,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. Indicate the length of the past interval for which to track per domain replica movements (used along with GlobalMovementThrottleThreshold) 
PlacementAndLoadBalancing,MovementPerPartitionThrottleThreshold,uint,50,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,No balancing related movement will occur for a partition if the number of balancing related movements for replicas of that partition has reached or exceeded MovementPerFailoverUnitThrottleThreshold in the past interval indicated by MovementPerPartitionThrottleCountingInterval 
PlacementAndLoadBalancing,MovementPerPartitionThrottleCountingInterval,TimeSpan,Common::TimeSpan::FromSeconds(600),Static,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. Indicate the length of the past interval for which to track replica movements for each partition (used along with MovementPerPartitionThrottleThreshold) 
PlacementAndLoadBalancing,MovementThrottledPartitionsPercentageThreshold,double,0.5,Static,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,No balancing will be performed if (the number of currently throttled partitions) > (the number of imbalanced partitions) * MovementThrottledPartitionsPercentageThreshold 
PlacementAndLoadBalancing,PlacementSearchTimeout,TimeSpan,Common::TimeSpan::FromSeconds(0.5),Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. When placing services; search for at most this long before returning a result 
PlacementAndLoadBalancing,ConstraintCheckSearchTimeout,TimeSpan,Common::TimeSpan::FromSeconds(0.5),Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. When placing services; search for at most this long before returning a result 
PlacementAndLoadBalancing,FastBalancingSearchTimeout,TimeSpan,Common::TimeSpan::FromSeconds(10),Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. When performing fast balancing; search for at most this long before returning a result 
PlacementAndLoadBalancing,SlowBalancingSearchTimeout,TimeSpan,Common::TimeSpan::FromSeconds(120),Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. When performing slow balancing; search for at most this long before returning a result 
PlacementAndLoadBalancing,LoadBalancingEnabled,bool,true,Dynamic,TEST,src\Reliability\LoadBalancing\PLBConfig.h,Enable or disable all movements including constraint check and load balancing 
PlacementAndLoadBalancing,IsTestMode,bool,false,Static,TEST,src\Reliability\LoadBalancing\PLBConfig.h,Setting which determines if the LB is in test mode; which results in additional tracing and validity checking 
PlacementAndLoadBalancing,AllowedBalancingScoreDifference,double,0.1,Dynamic,TEST,src\Reliability\LoadBalancing\PLBConfig.h,The percentage of difference in score when doing load balancing 
PlacementAndLoadBalancing,FaultDomainEnabled,bool,true,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Enable or disable fault domain in PLB 
PlacementAndLoadBalancing,UpgradeDomainEnabled,bool,true,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Enable or disable upgrade domain in PLB 
PlacementAndLoadBalancing,LocalBalancingThreshold,double,0.0,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Set the balancing threshold for local domains 
PlacementAndLoadBalancing,YieldDurationPer10ms,int,7,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,When searching for a balanced solution; every 10ms the LB search thread will sleep for this amount of time 
PlacementAndLoadBalancing,InitialRandomSeed,int,-1,Static,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Initial random seed 
PlacementAndLoadBalancing,MaxSimulatedAnnealingIterations,int,-1,Static,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Maximum number of simulated annealing iterations.  The default value of -1 specifies no limit within the specified timeout 
PlacementAndLoadBalancing,MaxPercentageToMove,double,0.3,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Maximum percentage of the service objects in the cluster to move at any time 
PlacementAndLoadBalancing,MaxPercentageToMoveForPlacement,double,0.1,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Maximum percentage of the service objects in the cluster to move during placement 
PlacementAndLoadBalancing,FastBalancingPopulationSize,int,1,Static,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,The number of potential simulated annealing solutions to keep in fast load balancing 
PlacementAndLoadBalancing,SlowBalancingPopulationSize,int,2,Static,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,The number of potential simulated annealing solutions to keep in slow load balancing 
PlacementAndLoadBalancing,FastBalancingTemperatureDecayRate,double,0.8,Static,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,The rate at which the simulated annealing algorithm changes the tradeoff from random search to score improvement in fast load balancing 
PlacementAndLoadBalancing,SlowBalancingTemperatureDecayRate,double,0.98,Static,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,The rate at which the simulated annealing algorithm changes the tradeoff from random search to score improvement in slow load balancing 
PlacementAndLoadBalancing,IgnoreCostInScoring,bool,false,Static,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Instructs the LB to ignore the cost element of the scoring function; resulting potentially large number of moves for better balanced placement 
PlacementAndLoadBalancing,ScoreImprovementThreshold,double,0.0,Static,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Setting which indicates that there must be a particular amount of improvement in the score between two solutions in order for the LB to accept the new solution 
PlacementAndLoadBalancing,NodeLoadsTracingInterval,TimeSpan,Common::TimeSpan::FromSeconds(20),Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. The interval with which to trace node loads for each service domain 
PlacementAndLoadBalancing,PLBPeriodicalTraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(20),Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. The interval with which to periodically trace information of PLB 
PlacementAndLoadBalancing,MaxInvalidReplicasToTrace,int,10,Static,TEST,src\Reliability\LoadBalancing\PLBConfig.h,The max number of replicas to trace that cannot be placed or that are violating constraints and cannot be corrected 
MetricActivityThresholds,PropertyGroup,KeyIntegerValueMap,None,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determines the set of MetricActivityThresholds for the metrics in the cluster. 
MetricBalancingThresholds,PropertyGroup,KeyDoubleValueMap,None,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determines the set of MetricBalancingThresholds for the metrics in the cluster. 
GlobalMetricWeights,PropertyGroup,KeyDoubleValueMap,None,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determines the set of GlobalMetricWeights for the metrics in the cluster. 
PlacementAndLoadBalancing,InBuildThrottlingEnabled,bool,false,Static,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determine whether the in-build throttling is enabled 
PlacementAndLoadBalancing,InBuildThrottlingAssociatedMetric,wstring,L"",Static,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,The associated metric name for this throttling 
PlacementAndLoadBalancing,InBuildThrottlingGlobalMaxValue,int,0,Static,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,The maximal number of in-build replicas allowed globally 
PlacementAndLoadBalancing,SwapPrimaryThrottlingEnabled,bool,false,Static,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determine whether the swap-primary throttling is enabled 
PlacementAndLoadBalancing,SwapPrimaryThrottlingAssociatedMetric,wstring,L"",Static,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,The associated metric name for this throttling 
PlacementAndLoadBalancing,SwapPrimaryThrottlingGlobalMaxValue,int,0,Static,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,The maximal number of swap-primary replicas allowed globally 
PlacementAndLoadBalancing,TraceSimulatedAnnealingStatistics,bool,false,Static,TEST,src\Reliability\LoadBalancing\PLBConfig.h,Determines whether to trace simulated annealing statistics 
PlacementAndLoadBalancing,SimulatedAnnealingStatisticsInterval,int,100,Static,TEST,src\Reliability\LoadBalancing\PLBConfig.h,Determines the interval at which to trace simulated annealing statistics 
PlacementAndLoadBalancing,InitialTemperatureProbeCount,int,50,Static,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,How many random movements to probe for determining the initial temperature 
PlacementAndLoadBalancing,SimulatedAnnealingIterationsPerRound,int,1000,Static,TEST,src\Reliability\LoadBalancing\PLBConfig.h,Number of iterations per round during simulated annealing 
PlacementAndLoadBalancing,ProcessPendingUpdatesInterval,TimeSpan,Common::TimeSpan::FromSeconds(0.3),Static,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. Interval with which to process pending updates from FM. 
PlacementAndLoadBalancing,SwapPrimaryProbability,double,0.3,Dynamic,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,The probability to generate a swap primary movement during load balancing 
PlacementAndLoadBalancing,LoadDecayInterval,TimeSpan,Common::TimeSpan::FromSeconds(60.0),Static,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,Specify timespan in seconds. The interval of that the loads in the history decay for the given factor measured in second 
PlacementAndLoadBalancing,LoadDecayFactor,double,0,Static,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,The factor that the loads in the history decay; it should be greater than or equal to 0 and less than or equal to 1 
PlacementAndLoadBalancing,PlacementConstraintPriority,int,0,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determines the priority of placement constraint: 0: Hard; 1: Soft; negative: Ignore 
PlacementAndLoadBalancing,PreferredLocationConstraintPriority,int,2,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determines the priority of prefered location constraint: 0: Hard; 1: Soft; 2: Optimization; negative: Ignore 
PlacementAndLoadBalancing,CapacityConstraintPriority,int,0,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determines the priority of capacity constraint: 0: Hard; 1: Soft; negative: Ignore 
PlacementAndLoadBalancing,AffinityConstraintPriority,int,0,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determines the priority of affinity constraint: 0: Hard; 1: Soft; negative: Ignore 
PlacementAndLoadBalancing,FaultDomainConstraintPriority,int,1,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determines the priority of fault domain constraint: 0: Hard; 1: Soft; negative: Ignore 
PlacementAndLoadBalancing,UpgradeDomainConstraintPriority,int,1,Dynamic,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Determines the priority of upgrade domain constraint: 0: Hard; 1: Soft; negative: Ignore 
PlacementAndLoadBalancing,IsAffinityBidirectional,bool,false,Static,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Setting which determines if the affinity is bi-directional 
PlacementAndLoadBalancing,MoveExistingReplicaForPlacement,bool,true,Static,PUBLIC,src\Reliability\LoadBalancing\PLBConfig.h,Setting which determines if to move existing replica during placement 
PlacementAndLoadBalancing,AffinityMoveParentReplicaProbability,double,0.5,Static,INTERNAL,src\Reliability\LoadBalancing\PLBConfig.h,The probability to move parent instead of child replica probability for affinity constraint check 
PlacementAndLoadBalancing,RelaxConstraintsForPlacementEnabled,bool,false,Static,DEPRECATED,src\Reliability\LoadBalancing\PLBConfig.h,Determines whether we should relax constraints (including Affinity; FD/UD; and Capacity) during placement if we cannot find the placement honoring all constraints 
PlacementAndLoadBalancing,RelaxFaultDomainConstraintsForPlacement,bool,true,Static,DEPRECATED,src\Reliability\LoadBalancing\PLBConfig.h,Determines whether we should relax FD/UD constraint during placement if we cannot find the placement honoring all constraints 
PlacementAndLoadBalancing,RelaxAffinityConstraintsForPlacement,bool,false,Static,DEPRECATED,src\Reliability\LoadBalancing\PLBConfig.h,Determines whether we should relax Affinity constraints during placement if we cannot find the placement honoring all constraints 
PlacementAndLoadBalancing,RelaxCapacityConstraintsForPlacement,bool,false,Static,DEPRECATED,src\Reliability\LoadBalancing\PLBConfig.h,Determines whether we should relax Capacity constraints during placement if we cannot find the placement honoring all constraints 
Replication,InitialReplicationQueueSize,uint,64,Static,PUBLIC,src\Reliability\Replication\REConfig.h,The Windows Fabric Replicator which is a secondary contains internal queues which contain replication operations which have been delivered to the secondary but not distributed to the service.This value defines the initial size for the queue which maintains replication operations.  Note that it must be a power of 2.
Replication,MaxReplicationQueueSize,uint,1024,Static,PUBLIC,src\Reliability\Replication\REConfig.h,This is the maximum number of operations that could exist in the replication queue. Note that it must be a power of 2.  If during runtime the queue grows to this size operations will be throttled between the primary and secondary replicators.
Replication,MaxReplicationQueueMemorySize,uint,0,Static,PUBLIC,src\Reliability\Replication\REConfig.h,This is the maximum value of the replication queue in bytes. If during runtime the queue grows to this size operations will be throttled between the primary and secondary replicators.
Replication,InitialCopyQueueSize,uint,64,Static,PUBLIC,src\Reliability\Replication\REConfig.h,This value defines the initial size for the queue which maintains copy operations.  Note that it must be a power of 2.
Replication,MaxCopyQueueSize,uint,1024,Static,PUBLIC,src\Reliability\Replication\REConfig.h,This is the maximum value defines the initial size for the queue which maintains replication operations.  Note that it must be a power of 2.  If during runtime the queue grows to this size operations will be throttled between the primary and secondary replicators.
Replication,BatchAcknowledgementInterval,TimeSpan,Common::TimeSpan::FromMilliseconds(50),Static,PUBLIC,src\Reliability\Replication\REConfig.h,Specify timespan in seconds. Determines the amount of time that the replicator waits after receiving an operation before sending back an acknowledgement. Other operations received during this time period will have their acknowledgements sent back in a single message-> reducing network traffic but potentially reducing the throughput of the replicator.
Replication,MaxPendingAcknowledgements,uint,0,Static,PUBLIC,src\Reliability\Replication\REConfig.h,Maximum number of outstanding operation acknowledgements.  Together with the BatchAckInterval controls replicator operation throttling.
Replication,MaxReplicationMessageSize,uint,52428800,Static,PUBLIC,src\Reliability\Replication\REConfig.h,Maximum message size of replication operations. Default is 50MB.
Replication,RequireServiceAck,bool,false,Static,PUBLIC,src\Reliability\Replication\REConfig.h,Bool which controls whether the Windows Fabric Replicator will optimistically acknowledge operations on behalf of services. Setting this to false allows the replicator to optimistically acknowledge operations on behalf of the service. While true tells the replicator to require service ack via the Operation.Ack() API before the acknowledgement can be sent back to the primary service. Note that this flag is not respected for persistent services which always require services to acknowledge operations.
Replication,ReplicatorAddress,wstring,L"localhost:0",Static,PUBLIC,src\Reliability\Replication\REConfig.h,The endpoint in form of a string -'IP:Port' which is used by the Windows Fabric Replicator to establish connections with other replicas in order to send/receive operations
Replication,SecondaryClearAcknowledgedOperations,bool,false,Static,PUBLIC,src\Reliability\Replication\REConfig.h,Bool which controls if the operations on the secondary replicator are cleared once they are ACK'd by the state provider. Setting this to true may result in additional copy operations during the build of an idle replica
Replication,UseStreamFaultsAndEndOfStreamOperationAck,bool,false,Static,PUBLIC,src\Reliability\Replication\REConfig.h,Bool which indicates to Windows Fabric Replicator if the state provider intends to use the OperationStream2 interface. If this is enabled the state provider must report fault on the OperationStream2 interface if it cannot apply any more operations that are pumped from the stream.The Windows Fabric Replicator will also dispatch an End of Stream operation in the secondary copy and replication streams.
Replication,RetryInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,src\Reliability\Replication\REConfig.h,Specify timespan in seconds. When an operation is lost or rejected this timer determines how often the replicator will retry sending the operation.
Replication,CompleteReplicateThreadCount,uint,0,Static,INTERNAL,src\Reliability\Replication\REConfig.h,The maximum number of parallel threads that can be used by the Windows Fabric Replicator to quorum complete Replication operations on the primary
Replication,AllowMultipleQuorumSet,bool,true,Static,INTERNAL,src\Reliability\Replication\REConfig.h,Bool which controls whether the Windows Fabric Replicator considers replicas in the previous and current configuration to compute quorum during reconfigurations. Setting this to false could result in higher chances of dataloss during failures
Replication,TraceInterval,TimeSpan,Common::TimeSpan::FromSeconds(120),Static,INTERNAL,src\Reliability\Replication\REConfig.h,Specify timespan in seconds. Determines the tracing interval of the replicator's progress (if there was any progress from the previous trace).
Replication,UnreliableChannelEnabled,bool,false,Static,TEST,src\Reliability\Replication\REConfig.h,Enables the unreliable channel for replication operations for internal testing.
FailoverManager,UserReplicaRestartWaitDuration,TimeSpan,Common::TimeSpan::FromSeconds(60.0 * 30),Static,PUBLIC,src\ServiceModel\ServiceModelConfig.h,Specify timespan in seconds. When a persisted replica goes down; Windows Fabric waits for this duration for the replica to come back up before creating new replacement replicas (which would require a copy of the state). Default value is 5min. 
FailoverManager,QuorumLossWaitDuration,TimeSpan,Common::TimeSpan::MaxValue,Static,PUBLIC,src\ServiceModel\ServiceModelConfig.h,Specify timespan in seconds. This is the max duration for which we allow a partition to be in a state of quorum loss. If the partition is still in quorum loss after this duration; the partition is recovered from quorum loss by considering the down replicas as lost. Note that this can potentially incur data loss. 
FailoverManager,UserStandByReplicaKeepDuration,TimeSpan,Common::TimeSpan::FromSeconds(3600.0 * 24 * 7),Static,PUBLIC,src\ServiceModel\ServiceModelConfig.h,Specify timespan in seconds. When a persisted replicas come back from a down state; it may have already been replaced. This timer determines how long the FM will keep the standby replica before discarding it. 
Federation,NodeNamePrefixesForV1Generator,wstring,L"",Static,PUBLIC,src\ServiceModel\ServiceModelConfig.h,This specifies a list of roles for which V1 node id generator should be used. 
Federation,UseV2NodeIdGenerator,bool,false,Static,PUBLIC,src\ServiceModel\ServiceModelConfig.h,This confiugration specifies whether or not to use V2 node id generator. 
NamingService,MaxPropertyNameLength,int,256,Static,INTERNAL,src\ServiceModel\ServiceModelConfig.h,Maximum allowed property name length (depends on local store limits) 
NamingService,MaxMessageSize,int,4*1024*1024,Static,PUBLIC,src\ServiceModel\ServiceModelConfig.h,The maximum message size for client node communication when using naming. DOS attack alleviation 
NamingService,MessageContentBufferRatio,double,0.75,Dynamic,INTERNAL,src\ServiceModel\ServiceModelConfig.h,The fraction of MaxMessageSize to use as the available buffer limit when calculating how much data to put in a single message (should be in the range [0.0; 1.0]) 
NamingService,MaxOperationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(600),Dynamic,PUBLIC,src\ServiceModel\ServiceModelConfig.h,Specify timespan in seconds. The maximum timeout allowed for client operations. Requests specifying a larger timeout will be rejected. 
EseStore,DatabasePageSizeInKB,int,8,NotAllowed,INTERNAL,src\Store\StoreConfig.h, Settings that are related to performance  
EseStore,VerPageSizeInKB,int,8,NotAllowed,INTERNAL,src\Store\StoreConfig.h,
EseStore,EseLogFileSizeInKB,int,5120,NotAllowed,INTERNAL,src\Store\StoreConfig.h,
EseStore,EseLogBufferSizeInKB,int,1024,Static,INTERNAL,src\Store\StoreConfig.h,
EseStore,EsePoolMinSize,int,100,Static,INTERNAL,src\Store\StoreConfig.h,
EseStore,EsePoolAdjustmentSize,int,10,Static,INTERNAL,src\Store\StoreConfig.h,
EseStore,EsePoolEvictionPeriodInSeconds,int,900,Static,INTERNAL,src\Store\StoreConfig.h,
EseStore,MaxAsyncCommitDelayInMilliseconds,int,200,Static,INTERNAL,src\Store\StoreConfig.h,
EseStore,EseMinDatabasePagesInBufferPoolCache,int,64,Static,INTERNAL,src\Store\StoreConfig.h, This setting is used to reduce the chance ESE runs out of buffer pages It is a per instance setting. Each ESE instance will have this many pages in buffer pool as a minimum.  
EseStore,MaxJetInstances,int,200,Static,INTERNAL,src\Store\StoreConfig.h, Settings that are to control ESE resource use; intended to catch bugs  
EseStore,MaxSessions,int,8192,Static,INTERNAL,src\Store\StoreConfig.h,
EseStore,MaxCursors,int,8192,Static,INTERNAL,src\Store\StoreConfig.h,
EseStore,MaxOpenTables,int,49152,Static,INTERNAL,src\Store\StoreConfig.h,
EseStore,MaxVerPages,int,8192,Static,INTERNAL,src\Store\StoreConfig.h,
EseStore,CheckpointDepthMaxInMB,int,512,Static,INTERNAL,src\Store\StoreConfig.h,
EseStore,MaxCacheSizeInMB,int,1024,Static,INTERNAL,src\Store\StoreConfig.h, Value of -1 for int values uses ESE defaults  
EseStore,EseEnableBackgroundMaintenance,bool,true,Static,INTERNAL,src\Store\StoreConfig.h, Enable the background database maintenance task that does ECC checks to fix bit errors; etc. Value of -1 for int values uses ESE defaults  Default for EseEnableScanSerialization = 20ms Default for EseScanIntervalMinInSeconds = 1 * 24 * 60 * 60 = 1 day Default for EseScanIntervalMaxInSeconds = 7 * 24 * 60 * 60 = 7 days  
EseStore,EseEnableScanSerialization,bool,false,Static,INTERNAL,src\Store\StoreConfig.h,
EseStore,EseScanThrottleInMilleseconds,int,-1,Static,INTERNAL,src\Store\StoreConfig.h,
EseStore,EseScanIntervalMinInSeconds,int,-1,Static,INTERNAL,src\Store\StoreConfig.h,
EseStore,EseScanIntervalMaxInSeconds,int,-1,Static,INTERNAL,src\Store\StoreConfig.h,
ReplicatedStore,FabricTimePersistInterval,TimeSpan,Common::TimeSpan::Zero,Dynamic,INTERNAL,src\Store\StoreConfig.h,Specify timespan in seconds.  ReplicatedStore  
ReplicatedStore,FabricTimeRefreshTimeoutValue,TimeSpan,Common::TimeSpan::FromSeconds(10),Dynamic,INTERNAL,src\Store\StoreConfig.h,Specify timespan in seconds. 
ReplicatedStore,TombstoneCleanupLimit,int,600,Dynamic,INTERNAL,src\Store\StoreConfig.h,
ReplicatedStore,ThrottleCountersRefreshIntervalInOperationCount,int,256,Static,INTERNAL,src\Store\StoreConfig.h,
ReplicatedStore,ThrottleCountersRefreshInterval,TimeSpan,Common::TimeSpan::FromSeconds(1),Static,INTERNAL,src\Store\StoreConfig.h,Specify timespan in seconds. 
TombstoneCleanupLimit,TombstoneCleanupLimit,int,600,Dynamic,INTERNAL,src\Store\StoreDeprecatedConfig.h,This config will be deprecated soon. Use ReplicatedStore/TombstoneCleanupLimit instead 
Transport,ThreadThrottle,int,300,Static,INTERNAL,src\Transport\TransportConfig.h,The process has this configurable value number of threads as a threshold. Once the threshold is reached; incoming messages can be dropped. 0 or negative value will disable thread count throttling. This is only applicable for fabric.exe. 
Transport,ThreadTestLimit,int,0,Static,INTERNAL,src\Transport\TransportConfig.h,Limit how many threads are allowed in testing; crash the process immediately when reaching the limit. 0 or negative value will disable thread count test limit 
Transport,ThrottleTestAssertThreshold,TimeSpan,Common::TimeSpan::FromSeconds(0),Static,INTERNAL,src\Transport\TransportConfig.h,Specify timespan in seconds. If the thread count exceeds the configured ThreadThrottle value for ThrottleTestAssertThreshold consecutive performance measurements; then a TestAssert is triggered. 0 or negative value will disable the TestAssert. 
Transport,MemoryThrottleInMB,int,4096,Static,INTERNAL,src\Transport\TransportConfig.h,The process has this configurable value number of memory as a threshold. Once the threshold is reached; incoming messages can be dropped. 0 or negative value will disable memory throttling. This is only applicable for fabric.exe. 
Transport,MemoryThrottleInterval,TimeSpan,Common::TimeSpan::FromSeconds(30),Static,INTERNAL,src\Transport\TransportConfig.h,Specify timespan in seconds. The interval to apply memory throttle; after which memory throttle limit will be increased by MemoryThrottleIncrementRatio. 
Transport,MemoryThrottleIncrementRatio,double,0.1,Static,INTERNAL,src\Transport\TransportConfig.h,The ratio to increase the memory throttle limit. 
Transport,MemoryThrottleUpperLimitInMB,int,8192,Static,INTERNAL,src\Transport\TransportConfig.h,The upper limit of memory consumption.  If memory is above this limit for MemoryThrottleInterval; the process will be restarted.  0 if no upper limit. 
Transport,ResolveOption,wstring,L"unspecified",Static,PUBLIC,src\Transport\TransportConfig.h,Determines how FQDN are resolved.  Valid values are "unspecified/ipv4/ipv6". 
Transport,DefaultReceiveChunkSize,int,4*1024,Static,INTERNAL,src\Transport\TransportConfig.h,Receive chunk size for non-secure mode 
Transport,SslReceiveChunkSize,int,64*1024,Static,INTERNAL,src\Transport\TransportConfig.h,Chunk size of SSL receive buffer; it must be at least twice as large as SSL record size: SecPkgContext_StreamSizes{cbHeader + cbMaximumMessage + cbTrailer} 
Transport,DefaultOutgoingMessageExpiration,TimeSpan,Common::TimeSpan::FromSeconds(180),Static,INTERNAL,src\Transport\TransportConfig.h,Specify timespan in seconds. Indicate how long an outgoing message can be queued until being sent or dropped; set to 0 to disable 
Transport,DefaultSendQueueSizeLimit,int,64 * 1024 * 1024,Static,INTERNAL,src\Transport\TransportConfig.h,Default send queue size limit in bytes; per target; set to 0 to disable 
Transport,DynamicListenPortTrialMax,int,3,Static,INTERNAL,src\Transport\TransportConfig.h,When listen address has hostname and "ResolveOption" set to "unspecified"; we need to listen on both IPv4 0.0.0.0 and IPv6 [::]; and we need to make sure the two listen ports are the same; otherwise we will have to publish two separate listen addresses instead of one with hostname. The following setting specify how many times we retry on finding a dynamic listen port common to IPv4 and IPv6. 
Transport,MaxIpcMessageSize,int,4*1024*1024,Static,INTERNAL,src\Transport\TransportConfig.h,Maximum size for IPC messages 
Transport,ConnectionIdleTimeout,TimeSpan,Common::TimeSpan::FromSeconds(300),Static,INTERNAL,src\Transport\TransportConfig.h,Specify timespan in seconds. Connection idle timeout: connection gets closed after being inactive for a while Setting to 0 or negative to disable 
Transport,SendTargetSoftLimit,int,1000,Static,INTERNAL,src\Transport\TransportConfig.h,When cleaning up an idle connection; if its send target still have external reference counts; the following threshold will be checked. The connection is cleaned up only if the total number of send targets reaches the threshold. Setting to 0 or negative value will disable such threshold checking. 
Transport,ReceiveMissingThreshold,TimeSpan,Common::TimeSpan::FromSeconds(200),Static,INTERNAL,src\Transport\TransportConfig.h,Specify timespan in seconds. If no receive is posted for the threshold; something is probably stuck and an assert will be fired. Setting to 0 or negative to disable. 
Transport,ConnectionConfirmWaitLimit,TimeSpan,Common::TimeSpan::FromSeconds(10),Static,INTERNAL,src\Transport\TransportConfig.h,Specify timespan in seconds. How long can messages be sent on a connection with unconfirmed instance 
Transport,IpcReconnectDelay,TimeSpan,Common::TimeSpan::FromSeconds(3),Static,INTERNAL,src\Transport\TransportConfig.h,Specify timespan in seconds. How long IpcClient waits before reconnecting; after connection failure 
Transport,IpcClientDisconnectLimit,int,100,Dynamic,INTERNAL,src\Transport\TransportConfig.h,IpcClient exits process when disconnect count reaches the following limit; set to 0 to disable such process exit. 
UnreliableTransport,MaxAllowedDelayInSeconds,TimeSpan,Common::TimeSpan::FromSeconds(40),Static,INTERNAL,src\Transport\UnreliableTransportConfig.h,Specify timespan in seconds. 
FabricTest,UseRandomReplicatorSettings,bool,false,Static,INTERNAL,test\FabricTest\FabricTestCommonConfig.h,
FabricTest,UseLargeReplicationQueues,bool,false,Static,INTERNAL,test\FabricTest\FabricTestCommonConfig.h,
FabricTest,ServiceDescriptorLowRange,int64,0,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,ServiceDescriptorHighRange,int64,100,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,ResolveServiceBufferCount,int,1,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,NodeOpenMaxRetryCount,int,5,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,StoreClientCommandQuorumLossRetryCount,int,5,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,QueryOperationRetryCount,int,15,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,VerifyTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,VerifyUpgradeTimeout,TimeSpan,Common::TimeSpan::FromSeconds(300),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,NamingOperationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,NamingOperationRetryTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,NamingResolveRetryTimeout,TimeSpan,Common::TimeSpan::FromSeconds(30),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,NamingOperationRetryDelay,TimeSpan,Common::TimeSpan::FromSeconds(2),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,QueryOperationRetryDelay,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,StoreClientTimeout,TimeSpan,Common::TimeSpan::FromSeconds(90),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,ReportLoadInterval,TimeSpan,Common::TimeSpan::FromSeconds(100),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,HostingOpenCloseTimeout,TimeSpan,Common::TimeSpan::FromSeconds(90),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,MaxClientSessionIdleTimeout,TimeSpan,Common::TimeSpan::FromSeconds(25),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,NodeDeallocationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(300),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,OpenTimeout,TimeSpan,Common::TimeSpan::FromSeconds(45),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,ApiDelayInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,DelayOpenAfterAbortNode,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,Specify timespan in seconds. 
FabricTest,AllowServiceAndFULossOnRebuild,bool,false,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,AllowUnexpectedFUs,bool,false,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,AllowHostFailureOnUpgrade,bool,false,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,AllowQuoumLostFailoverUnitsOnVerify,bool,true,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,ChangeServiceLocationOnChangeRole,bool,false,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,UseEtw,bool,false,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,SkipDeleteVerifyForQuorumLostServices,bool,false,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,AsyncNodeCloseEnabled,bool,false,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,UseInternalHealthClient,bool,false,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,ReportHealthThroughHMPrimary,bool,false,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,ScaleMinModeEnabled,bool,false,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,HealthVerificationEnabled,bool,false,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,HealthFullVerificationEnabled,bool,false,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,LimitRandomApiFaultsDuringVerify,bool,false,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTest,TraceFileName,wstring,L"FabricTest.trace",Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricTestQueryWeights,PropertyGroup,FabricTestQueryWeights,None,Static,INTERNAL,test\FabricTest\FabricTestSessionConfig.h,
FabricRandomTest,MaxNodes,int,50,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,MinNodes,int,10,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,MaxDynamism,int,3,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,CalculatorServiceCount,int,3,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,TestStoreServiceCount,int,3,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,TestPersistedStoreServiceCount,int,3,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,MaxPartitions,int,5,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,MaxReplicas,int,5,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,ClientThreadCount,int,5,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,RandomVoteCount,int,3,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,DeleteServiceInterval,int,200,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,UpdateServiceInterval,int,0,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,ActivateDeactivateNodeInterval,int,10,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,MaxRatioOfFabricNodesToDeactivate,double,0.2,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,Not more than this ratio of nodes would be deactivated in a cluster 
FabricRandomTest,NamingThreadCount,int,10,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,NameCount,int,100,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,PropertyPerNameCount,int,10,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,FullRebuildInterval,int,0,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,UpgradeInterval,int,0,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,ApplicationCount,int,0,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,ApplicationVersionsCount,int,10,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,AppMaxServicePackage,int,3,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,AppMaxCodePackage,int,3,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,AppMaxServiceTypes,int,3,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,AppMaxPartitionCount,int,3,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,AppMaxReplicaCount,int,5,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,UpgradeDomainSize,int,4,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,MaxAllowedMemoryInMB,int,400,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,WatchDogCount,int,3,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,VerifyQueryCount,int,1,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,MaxDynamismInterval,TimeSpan,Common::TimeSpan::FromSeconds(2),Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,Specify timespan in seconds. 
FabricRandomTest,VerifyTimeout,TimeSpan,Common::TimeSpan::FromSeconds(120),Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,Specify timespan in seconds. 
FabricRandomTest,OpenTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,Specify timespan in seconds. 
FabricRandomTest,ClientOperationInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,Specify timespan in seconds. 
FabricRandomTest,NamingOperationInterval,TimeSpan,Common::TimeSpan::FromSeconds(5),Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,Specify timespan in seconds. 
FabricRandomTest,NamingOperationTimeout,TimeSpan,Common::TimeSpan::FromSeconds(20),Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,Specify timespan in seconds. 
FabricRandomTest,MaxAllowedMemoryTimeout,TimeSpan,Common::TimeSpan::FromSeconds(300),Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,Specify timespan in seconds. 
FabricRandomTest,MaxApiDelayInterval,TimeSpan,Common::TimeSpan::FromSeconds(6),Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,Specify timespan in seconds. 
FabricRandomTest,MinApiDelayInterval,TimeSpan,Common::TimeSpan::FromSeconds(1),Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,Specify timespan in seconds. 
FabricRandomTest,WatchDogReportInterval,TimeSpan,Common::TimeSpan::FromSeconds(1),Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,Specify timespan in seconds. 
FabricRandomTest,AbortRatio,double,0.1,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,KillRuntimeRatio,double,0.1,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,ClientPutRatio,double,0.5,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,AppStatelessServiceRatio,double,0.15,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,AppPersistedServiceRatio,double,0.7,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,CalculatorServices,wstring,L"",Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,TestStoreServices,wstring,L"",Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,TestPersistedStoreServices,wstring,L"",Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,UnreliableTransportBehaviors,wstring,L"",Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,Properties,wstring,L"",Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,NodeOpenRetryErrors,wstring,L"AddressAlreadyInUse",Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,DoRandomUpgrade,bool,false,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FabricRandomTest,AssertOnMemoryCheckFailure,bool,true,Static,INTERNAL,test\FabricTest\RandomSessionConfig.h,
FederationTest,OpenTimeout,TimeSpan,Common::TimeSpan::FromSeconds(100),Static,INTERNAL,test\FederationTest\FederationTestConfig.h,Specify timespan in seconds. 
FederationTest,RouteTimeout,TimeSpan,Common::TimeSpan::FromSeconds(15),Static,INTERNAL,test\FederationTest\FederationTestConfig.h,Specify timespan in seconds. 
FederationTest,SendTimeout,TimeSpan,Common::TimeSpan::FromSeconds(15),Static,INTERNAL,test\FederationTest\FederationTestConfig.h,Specify timespan in seconds. 
FederationTest,RouteRetryTimeout,TimeSpan,Common::TimeSpan::FromSeconds(2),Static,INTERNAL,test\FederationTest\FederationTestConfig.h,Specify timespan in seconds. 
FederationTest,BroadcastReplyTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Static,INTERNAL,test\FederationTest\FederationTestConfig.h,Specify timespan in seconds. 
FederationTest,VerifyTimeout,TimeSpan,Common::TimeSpan::FromSeconds(150),Static,INTERNAL,test\FederationTest\FederationTestConfig.h,Specify timespan in seconds. 
FederationRandomTest,MaxAllowedMemoryInMB,int,400,Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,
FederationRandomTest,MaxAllowedMemoryInMBForSsl,int,450,Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,
FederationRandomTest,MaxAllowedMemoryInMBForKerberos,int,500,Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,
FederationRandomTest,MaxAllowedMemoryTimeout,TimeSpan,Common::TimeSpan::FromSeconds(3600),Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,Specify timespan in seconds. 
FederationRandomTest,TotalNodes,int,120,Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,
FederationRandomTest,MaxNodes,int,60,Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,
FederationRandomTest,MinNodes,int,20,Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,
FederationRandomTest,AbortRatio,int,20,Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,
FederationRandomTest,MaxDynamism,int,3,Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,
FederationRandomTest,MaxRoutes,int,10,Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,
FederationRandomTest,MaxBroadcasts,int,2,Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,
FederationRandomTest,WaitTime,TimeSpan,Common::TimeSpan::FromSeconds(130),Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,Specify timespan in seconds. 
FederationRandomTest,OpenTimeout,TimeSpan,Common::TimeSpan::FromSeconds(120),Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,Specify timespan in seconds. 
FederationRandomTest,RouteTimeout,TimeSpan,Common::TimeSpan::FromSeconds(60),Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,Specify timespan in seconds. 
FederationRandomTest,AssertOnMemoryCheckFailure,bool,true,Static,INTERNAL,test\FederationTest\RandomFederationTestConfig.h,
LBSimulator,VerifyTimeout,TimeSpan,Common::TimeSpan::FromSeconds(20),Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,Specify timespan in seconds. 
LBSimulator,RandomSeed,int,12345,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,FailTestIfVerifyTimeout,bool,false,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,MaxNodes,int,50,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,MaxServices,int,20,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,InitialServices,int,2,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,MaxPartitions,int,200,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,MaxReplicas,int,4,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,MaxDynamism,int,3,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,ServiceDynamicIterations,int,2,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,Level1FaultDomainCount,int,2,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,Level2FaultDomainCount,int,2,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,UpgradeDomainCount,int,3,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,MetricCount,int,20,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,ReportLoadProbability,double,0.2,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,AffinitySimulationThreshold,double,0.25,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
LBSimulator,CapacityOrCapacityRatioChangeThreshold,double,0.3,Static,INTERNAL,test\LBSimulator\LBSimulatorConfig.h,
ModelChecker,VerifyTimeout,TimeSpan,Common::TimeSpan::FromSeconds(20),Static,INTERNAL,test\ModelChecker\ModelCheckerConfig.h,Specify timespan in seconds. 
HttpGateway,IsEnabled,bool,false,Static,PUBLIC,src\Managed\FabricHtppGateway\GatewaySettings.cs,"Flag indicates if the HttpGateway is enabled."
