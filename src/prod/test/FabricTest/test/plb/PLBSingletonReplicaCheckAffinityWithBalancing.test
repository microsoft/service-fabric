###############################################################################
# Test: PLBSingleReplicaCheckAffinityWithBalancing.test
# Owners: apopadic, nipuzovi, yangli
# This test verifies that check affinity upgrade optimization for singleton
# replica services, works for all type of upgrades:
# config, single package, full application, SF upgrade, Infra/OS upgrade
###############################################################################

votes 10 30 50
fmservice 2 1
namingservice 1 2 1
cmservice 2 1
cleantest

# Enable predictability of replica placement
set DummyPLBEnabled true

# Disable load balancing before placement
set LoadBalancingEnabled false

# Enable load balancing to introduce other movements
set LoadBalancingEnabled true

# Limiting the balancing duration to 30s,
# as search space is not that big
set SlowBalancingSearchTimeout 30

# Allow movement of replicas of services which have target replica count = 1, during upgrade
set IsSingletonReplicaMoveAllowedDuringUpgrade true

# Do not restore replica location after the upgrade (#10463332)
set RestoreReplicaLocationAfterUpgrade false

# Add/move new replicas together for affinity correlated partitions during upgrade
set CheckAffinityForUpgradePlacement true

# Disable relaxed affinity during upgrade 
set RelaxAffinityConstraintDuringUpgrade false

# Set the FM expected upgrade durations
set ExpectedReplicaUpgradeDuration 3600
set ExpectedNodeFabricUpgradeDuration 3600

# Ensuring that service package deactivation is not too slow
set DeactivationGraceInterval 0
set DeactivationFailedRetryIntervalRange 0

# Avoid timeout during cluster upgrade
set NamingOperationTimeout 60
set NamingOperationRetryTimeout 180

# Avoid automatic cleanup of unused application types
!setcfg Management.CleanupUnusedApplicationTypes=false

+10 ud=UD1 cap=CPU:50
+20 ud=UD1 cap=CPU:120
+30 ud=UD2 cap=CPU:50
+40 ud=UD2 cap=CPU:120
+50 ud=UD3 cap=CPU:120
verify

#### TEST SETUP: Create application
#### Application contains all service types: stateless, voltile, persisted

# Initial application version
app.add AppV1 MyApp v1
app.clear AppV1
app.servicepack AppV1 MyServicePackage version=v1 configversion=v1 dataversion=v1
app.servicetypes AppV1 MyServicePackage StatelessServiceType stateless
app.servicetypes AppV1 MyServicePackage VolatileServiceType stateful
app.servicetypes AppV1 MyServicePackage PersistedServiceType stateful persist
app.codepack AppV1 MyServicePackage StatelessCode types=StatelessServiceType version=v1
app.codepack AppV1 MyServicePackage VolatileCode types=VolatileServiceType version=v1
app.codepack AppV1 MyServicePackage PersistedCode types=PersistedServiceType version=v1
app.upload AppV1
provisionapp AppV1

# Config package upgrade
app.add AppV2 MyApp v2
app.clear AppV2
app.servicepack AppV2 MyServicePackage version=v2 configversion=v2 dataversion=v1
app.servicetypes AppV2 MyServicePackage StatelessServiceType stateless
app.servicetypes AppV2 MyServicePackage VolatileServiceType stateful
app.servicetypes AppV2 MyServicePackage PersistedServiceType stateful persist
app.codepack AppV2 MyServicePackage StatelessCode types=StatelessServiceType version=v1
app.codepack AppV2 MyServicePackage VolatileCode types=VolatileServiceType version=v1
app.codepack AppV2 MyServicePackage PersistedCode types=PersistedServiceType version=v1
app.upload AppV2
provisionapp AppV2

# Single code package upgrade (volatile)
app.add AppV3 MyApp v3
app.clear AppV3
app.servicepack AppV3 MyServicePackage version=v3 configversion=v2 dataversion=v1
app.servicetypes AppV3 MyServicePackage StatelessServiceType stateless
app.servicetypes AppV3 MyServicePackage VolatileServiceType stateful
app.servicetypes AppV3 MyServicePackage PersistedServiceType stateful persist
app.codepack AppV3 MyServicePackage StatelessCode types=StatelessServiceType version=v1
app.codepack AppV3 MyServicePackage VolatileCode types=VolatileServiceType version=v2
app.codepack AppV3 MyServicePackage PersistedCode types=PersistedServiceType version=v1
app.upload AppV3
provisionapp AppV3

# Full application upgrade (all services)
app.add AppV4 MyApp v4
app.clear AppV4
app.servicepack AppV4 MyServicePackage version=v4 configversion=v2 dataversion=v1
app.servicetypes AppV4 MyServicePackage StatelessServiceType stateless
app.servicetypes AppV4 MyServicePackage VolatileServiceType stateful
app.servicetypes AppV4 MyServicePackage PersistedServiceType stateful persist
app.codepack AppV4 MyServicePackage StatelessCode types=StatelessServiceType version=v2
app.codepack AppV4 MyServicePackage VolatileCode types=VolatileServiceType version=v3
app.codepack AppV4 MyServicePackage PersistedCode types=PersistedServiceType version=v2
app.upload AppV4
provisionapp AppV4

#### Create application and services (parent: stateless, persisted, volatile)
createapp fabric:/testApp MyApp v1
# Scenario with stateless parent is disabled due to RDBug:10588889
#RDBug 10588889: createservice fabric:/testApp/StatelessParent StatelessServiceType n 1 1 appname=fabric:/testApp metrics=CPU,High,10,0
#RDBug 10588889:createservice fabric:/testApp/StatelessChild1 StatelessServiceType n 1 1 servicecorrelations=fabric:/testApp/StatelessParent,affinity appname=fabric:/testApp metrics=CPU,High,10,0
#RDBug 10588889:createservice fabric:/testApp/VolatileChild3 VolatileServiceType y 1 1 servicecorrelations=fabric:/testApp/StatelessParent,nonAlignedAffinity minreplicasetsize=1 appname=fabric:/testApp metrics=CPU,High,10,10
#RDBug 10588889:createservice fabric:/testApp/PersistedChild3 PersistedServiceType y 1 1 servicecorrelations=fabric:/testApp/StatelessParent,nonAlignedAffinity persist minreplicasetsize=1 appname=fabric:/testApp metrics=CPU,High,10,10

createservice fabric:/testApp/VolatileParent VolatileServiceType y 1 1 minreplicasetsize=1 appname=fabric:/testApp metrics=CPU,High,10,10
createservice fabric:/testApp/VolatileChild1 VolatileServiceType y 1 1 servicecorrelations=fabric:/testApp/VolatileParent,affinity minreplicasetsize=1 appname=fabric:/testApp metrics=CPU,High,10,10
createservice fabric:/testApp/VolatileChild2 VolatileServiceType y 1 1 servicecorrelations=fabric:/testApp/VolatileParent,affinity minreplicasetsize=1 appname=fabric:/testApp metrics=CPU,High,10,10
createservice fabric:/testApp/VolatileChild3 VolatileServiceType y 1 1 servicecorrelations=fabric:/testApp/VolatileParent,affinity minreplicasetsize=1 appname=fabric:/testApp metrics=CPU,High,10,10
createservice fabric:/testApp/VolatileChild4 VolatileServiceType y 1 1 servicecorrelations=fabric:/testApp/VolatileParent,affinity minreplicasetsize=1 appname=fabric:/testApp metrics=CPU,High,10,10

createservice fabric:/testApp/PersistedParent PersistedServiceType y 1 1 persist minreplicasetsize=1 appname=fabric:/testApp metrics=CPU,High,10,10
createservice fabric:/testApp/PersistedChild1 PersistedServiceType y 1 1 servicecorrelations=fabric:/testApp/PersistedParent,affinity persist minreplicasetsize=1 appname=fabric:/testApp metrics=CPU,High,10,10
createservice fabric:/testApp/PersistedChild2 PersistedServiceType y 1 1 servicecorrelations=fabric:/testApp/PersistedParent,affinity persist minreplicasetsize=1 appname=fabric:/testApp metrics=CPU,High,10,10
createservice fabric:/testApp/PersistedChild3 PersistedServiceType y 1 1 servicecorrelations=fabric:/testApp/PersistedParent,affinity persist minreplicasetsize=1 appname=fabric:/testApp metrics=CPU,High,10,10
createservice fabric:/testApp/PersistedChild4 PersistedServiceType y 1 1 servicecorrelations=fabric:/testApp/PersistedParent,affinity persist minreplicasetsize=1 appname=fabric:/testApp metrics=CPU,High,10,10

verify
nameexists fabric:/testApp true

# Enable load balancing and disable test mode
set DummyPLBEnabled false
set LoadBalancingEnabled true

#
#### TEST CASE 1: Application upgrade - only configuration package
#
upgradeapp fabric:/testApp v2 Rolling upgrademode=manual
verifyupgradeapp fabric:/testApp upgradedomains=UD1
upgradeappmovenext fabric:/testApp
verifyupgradeapp fabric:/testApp upgradedomains=UD2
upgradeappmovenext fabric:/testApp
verifyupgradeapp fabric:/testApp upgradedomains=UD3

#
#### TEST CASE 2: Application upgrade - single code package upgrade (volatile)
#
!pause 5
upgradeapp fabric:/testApp v3 Rolling upgrademode=manual
verifyupgradeapp fabric:/testApp upgradedomains=UD1
upgradeappmovenext fabric:/testApp
verifyupgradeapp fabric:/testApp upgradedomains=UD2
upgradeappmovenext fabric:/testApp
verifyupgradeapp fabric:/testApp upgradedomains=UD3

#
#### TEST CASE 3: Application upgrade - full application upgrade (all services)
#
!pause 5
upgradeapp fabric:/testApp v4 Rolling upgrademode=manual
verifyupgradeapp fabric:/testApp upgradedomains=UD1
upgradeappmovenext fabric:/testApp
verifyupgradeapp fabric:/testApp upgradedomains=UD2
upgradeappmovenext fabric:/testApp
verifyupgradeapp fabric:/testApp upgradedomains=UD3

#
#### TEST CASE 4: Fabric upgrade
#
!pause 5
prepareupgradefabric code=6.0.0.0 config=v6
provisionfabric code=6.0.0.0 config=v6
upgradefabric code=6.0.0.0 config=v6 Rolling upgrademode=manual
verifyupgradefabric upgradedomains=UD1
upgradefabricmovenext
verifyupgradefabric upgradedomains=UD2
upgradefabricmovenext
verifyupgradefabric upgradedomains=UD3

#
#### TEST CASE 5: Node Deactivation - Restart (Infra/OS upgrade)
#
!pause 5
deactivatenode 10 Restart
!waitforstate FM.Node.DeactivationIntent.10 Restart
!waitforstate FM.Node.DeactivationStatus.10 DeactivationComplete
activatenode 10
!waitforstate FM.Node.DeactivationIntent.10 None
!waitforstate FM.Node.DeactivationStatus.10 None
verify
deactivatenode 20 Restart
!waitforstate FM.Node.DeactivationIntent.20 Restart
!waitforstate FM.Node.DeactivationStatus.20 DeactivationComplete
activatenode 20
!waitforstate FM.Node.DeactivationIntent.20 None
!waitforstate FM.Node.DeactivationStatus.20 None
verify
deactivatenode 30 Restart
!waitforstate FM.Node.DeactivationIntent.30 Restart
!waitforstate FM.Node.DeactivationStatus.30 DeactivationComplete
activatenode 30
!waitforstate FM.Node.DeactivationIntent.30 None
!waitforstate FM.Node.DeactivationStatus.30 None
verify
deactivatenode 40 Restart
!waitforstate FM.Node.DeactivationIntent.40 Restart
!waitforstate FM.Node.DeactivationStatus.40 DeactivationComplete
activatenode 40
!waitforstate FM.Node.DeactivationIntent.40 None
!waitforstate FM.Node.DeactivationStatus.40 None
verify
deactivatenode 50 Restart
!waitforstate FM.Node.DeactivationIntent.50 Restart
!waitforstate FM.Node.DeactivationStatus.50 DeactivationComplete
activatenode 50
!waitforstate FM.Node.DeactivationIntent.50 None
!waitforstate FM.Node.DeactivationStatus.50 None
verify
gfum


##### Test case cleanup
deleteapp fabric:/testApp
unprovisionapp MyApp v1
unprovisionapp MyApp v2
unprovisionapp MyApp v3
unprovisionapp MyApp v4
unprovisionfabric code=6.0.0.0 config=v6 FabricVersionInUse
verify
nameexists fabric:/testApp false

-*

!q