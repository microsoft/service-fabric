###############################################################################################################################
# Test: RGLimitVerify.test
# Owners: miradic, nipuzovi, anuragg

#IMPORTANT - when this test is run on Linux cgorup hierarchy is created on a single machine regardless on the number of nodes
#Therefore we should only create singleton services
################################################################################################################################

votes 10 20 30
namingservice 1 3 1
cmservice 3 1
fmservice 3 1
cleantest

set NamingOperationTimeout 120
set RestoreReplicaLocationAfterUpgrade true

# We need to be able to move replicas while in upgrade
set AllowConstraintCheckFixesDuringApplicationUpgrade true

# Disable load balancing to have predictability during test run
set LoadBalancingEnabled false

# Do not allow movement during upgrade for replicas which services have target replica count = 1
set IsSingletonReplicaMoveAllowedDuringUpgrade false

# Time slot while hosting holds opened service package after replica was dropped
set DeactivationGraceInterval 0
set DeactivationFailedRetryIntervalRange to 0

#No LRM test mode
set LocalResourceManagerTestMode false

set DummyPLBEnabled true

# Avoid automatic cleanup of unused application types
!setcfg Management.CleanupUnusedApplicationTypes=false

#All the machines we run tests on should have at least this much for them
+10 ud=UD1 cap=servicefabric:/_CpuCores:1,servicefabric:/_MemoryInMB:200
+20 ud=UD2 cap=servicefabric:/_CpuCores:1,servicefabric:/_MemoryInMB:200
+30 ud=UD3 cap=servicefabric:/_CpuCores:1,servicefabric:/_MemoryInMB:200
verify

# 
# Application type version 1.0
#
app.add version10 TestAppType 1.0
app.clear version10
app.servicepack version10 ServicePackageA version=1.0 resources=CPU,0.6,MemoryInMB,150
app.servicetypes version10 ServicePackageA ServiceTypeA1 stateless
app.servicetypes version10 ServicePackageA ServiceTypeA2 stateless
app.codepack version10 ServicePackageA CodeA1 types=ServiceTypeA1 version=1.0 rgpolicies=MemoryInMB;70
app.codepack version10 ServicePackageA CodeA2 types=ServiceTypeA2 version=1.0 rgpolicies=MemoryInMB;70
app.upload version10 compress
provisionapp version10

# 
# Application type version 1.1 
#
app.add version11 TestAppType 1.1 version10
app.clear version11
app.servicepack version11 ServicePackageA resources=CPU,0.6,MemoryInMB,150
app.servicetypes version11 ServicePackageA ServiceTypeA1 stateless
app.servicetypes version11 ServicePackageA ServiceTypeA2 stateless
app.codepack version11 ServicePackageA CodeA1 types=ServiceTypeA1 version=1.0 rgpolicies=MemoryInMB;70;CpuShares;150
app.codepack version11 ServicePackageA CodeA2 types=ServiceTypeA2 version=1.0 rgpolicies=MemoryInMB;70;CpuShares;50
app.upload version11 compress
provisionapp version11

# 
# Application type version 1.2
#
app.add version12 TestAppType 1.2 version11
app.clear version12
app.servicepack version12 ServicePackageA resources=CPU,0.6,MemoryInMB,150
app.servicetypes version12 ServicePackageA ServiceTypeA1 stateless
app.servicetypes version12 ServicePackageA ServiceTypeA2 stateless
app.codepack version12 ServicePackageA CodeA1 types=ServiceTypeA1 version=1.0 rgpolicies=MemoryInMB;80;CpuShares;150
app.codepack version12 ServicePackageA CodeA2 types=ServiceTypeA2 version=1.0 rgpolicies=MemoryInMB;70;CpuShares;50
app.upload version12 compress
provisionapp version12

# 
# Application type version 1.3
#
app.add version13 TestAppType 1.3 version12
app.clear version13
app.servicepack version13 ServicePackageA resources=CPU,0.8,MemoryInMB,200
app.servicetypes version13 ServicePackageA ServiceTypeA1 stateless
app.servicetypes version13 ServicePackageA ServiceTypeA2 stateless
app.codepack version13 ServicePackageA CodeA1 types=ServiceTypeA1 version=1.0 rgpolicies=MemoryInMB;80;CpuShares;150
app.codepack version13 ServicePackageA CodeA2 types=ServiceTypeA2 version=1.0 rgpolicies=MemoryInMB;70;CpuShares;50
app.upload version13 compress
provisionapp version13

#
# Create application version 1.0
#
createapp fabric:/app1 TestAppType 1.0
verify

createservice fabric:/app1/serviceA1 ServiceTypeA1 n 1 1 appname=fabric:/app1
verify

!waitforstate FM.Replica.State.fabric:/app1/serviceA1.30 Ready

verifynodeload nodeid:30 servicefabric:/_CpuCores 1 0.6
verifynodeload nodeid:30 servicefabric:/_MemoryInMB 150

verifyresourceonnode 30 servicefabric:/_CpuCores 0.6
verifyresourceonnode 30 servicefabric:/_MemoryInMB 150

#shares are split only on windows - on linux we do not apply limits on CP level
verifylimits cpcpu=0.3w,0.3w cpmemory=73400320,73400320

#change only shares but new limits should be enforced
upgradeapp fabric:/app1 1.1 Rolling
verifyupgradeapp fabric:/app1 timeout=500
verify

verifynodeload nodeid:30 servicefabric:/_CpuCores 1 0.6
verifynodeload nodeid:30 servicefabric:/_MemoryInMB 150

verifyresourceonnode 30 servicefabric:/_CpuCores 0.6
verifyresourceonnode 30 servicefabric:/_MemoryInMB 150

verifylimits cpcpu=0.45,0.15 cpmemory=73400320,73400320

#change only memory limit on CP level
upgradeapp fabric:/app1 1.2 Rolling
verifyupgradeapp fabric:/app1 timeout=500
verify

verifynodeload nodeid:30 servicefabric:/_CpuCores 1 0.6
verifynodeload nodeid:30 servicefabric:/_MemoryInMB 150

verifyresourceonnode 30 servicefabric:/_CpuCores 0.6
verifyresourceonnode 30 servicefabric:/_MemoryInMB 150

verifylimits cpcpu=0.45,0.15 cpmemory=83886080,73400320

#change SP level governance
upgradeapp fabric:/app1 1.3 Rolling
verifyupgradeapp fabric:/app1 timeout=500
verify

verifynodeload nodeid:30 servicefabric:/_CpuCores 1 0.8
verifynodeload nodeid:30 servicefabric:/_MemoryInMB 200

verifyresourceonnode 30 servicefabric:/_CpuCores 0.8
verifyresourceonnode 30 servicefabric:/_MemoryInMB 200

verifylimits cpcpu=0.6,0.2 cpmemory=83886080,73400320

#remove service
deleteservice fabric:/app1/serviceA1
verify

!pause 10

verifyresourceonnode 30 servicefabric:/_CpuCores 0
verifyresourceonnode 30 servicefabric:/_MemoryInMB 0

#no limits should be present
verifylimits

deleteapp fabric:/app1
verify

# Repeat the initial test, setting limits only on working set size.
# This setting is static in manifest, but it is correctly read in the code even if it changes.
set GovernOnlyMainMemoryForProcesses true

createapp fabric:/app1 TestAppType 1.0
verify

createservice fabric:/app1/serviceA1 ServiceTypeA1 n 1 1 appname=fabric:/app1
verify

!waitforstate FM.Replica.State.fabric:/app1/serviceA1.30 Ready

verifynodeload nodeid:30 servicefabric:/_CpuCores 1 0.6
verifynodeload nodeid:30 servicefabric:/_MemoryInMB 150

verifyresourceonnode 30 servicefabric:/_CpuCores 0.6
verifyresourceonnode 30 servicefabric:/_MemoryInMB 150

# This will verify working set size, and not process memory limit.
verifylimits cpcpu=0.3w,0.3w cpmemory=73400320,73400320

!q
